
BareMinimum.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001f4  00800200  000087da  0000886e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000087da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000349  008003f4  008003f4  00008a62  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00008a62  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00008a94  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000015b8  00000000  00000000  00008ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00038e2f  00000000  00000000  0000a08c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000080c5  00000000  00000000  00042ebb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000ddb5  00000000  00000000  0004af80  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00005a3c  00000000  00000000  00058d38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000094d8  00000000  00000000  0005e774  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0002629e  00000000  00000000  00067c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001920  00000000  00000000  0008deea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	95 c6       	rjmp	.+3370   	; 0xd2c <__dtors_end>
       2:	00 00       	nop
       4:	0c 94 45 37 	jmp	0x6e8a	; 0x6e8a <__vector_1>
       8:	0c 94 70 37 	jmp	0x6ee0	; 0x6ee0 <__vector_2>
       c:	0c 94 9b 37 	jmp	0x6f36	; 0x6f36 <__vector_3>
      10:	0c 94 c6 37 	jmp	0x6f8c	; 0x6f8c <__vector_4>
      14:	0c 94 f1 37 	jmp	0x6fe2	; 0x6fe2 <__vector_5>
      18:	0c 94 1c 38 	jmp	0x7038	; 0x7038 <__vector_6>
      1c:	0c 94 47 38 	jmp	0x708e	; 0x708e <__vector_7>
      20:	0c 94 72 38 	jmp	0x70e4	; 0x70e4 <__vector_8>
      24:	b4 c6       	rjmp	.+3432   	; 0xd8e <__bad_interrupt>
      26:	00 00       	nop
      28:	b2 c6       	rjmp	.+3428   	; 0xd8e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	b0 c6       	rjmp	.+3424   	; 0xd8e <__bad_interrupt>
      2e:	00 00       	nop
      30:	ae c6       	rjmp	.+3420   	; 0xd8e <__bad_interrupt>
      32:	00 00       	nop
      34:	ac c6       	rjmp	.+3416   	; 0xd8e <__bad_interrupt>
      36:	00 00       	nop
      38:	aa c6       	rjmp	.+3412   	; 0xd8e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	a8 c6       	rjmp	.+3408   	; 0xd8e <__bad_interrupt>
      3e:	00 00       	nop
      40:	a6 c6       	rjmp	.+3404   	; 0xd8e <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 70 2b 	jmp	0x56e0	; 0x56e0 <__vector_17>
      48:	a2 c6       	rjmp	.+3396   	; 0xd8e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	a0 c6       	rjmp	.+3392   	; 0xd8e <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 b4 2d 	jmp	0x5b68	; 0x5b68 <__vector_20>
      54:	9c c6       	rjmp	.+3384   	; 0xd8e <__bad_interrupt>
      56:	00 00       	nop
      58:	9a c6       	rjmp	.+3380   	; 0xd8e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 9d 38 	jmp	0x713a	; 0x713a <__vector_23>
      60:	96 c6       	rjmp	.+3372   	; 0xd8e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 f4 35 	jmp	0x6be8	; 0x6be8 <__vector_25>
      68:	0c 94 2a 36 	jmp	0x6c54	; 0x6c54 <__vector_26>
      6c:	90 c6       	rjmp	.+3360   	; 0xd8e <__bad_interrupt>
      6e:	00 00       	nop
      70:	8e c6       	rjmp	.+3356   	; 0xd8e <__bad_interrupt>
      72:	00 00       	nop
      74:	8c c6       	rjmp	.+3352   	; 0xd8e <__bad_interrupt>
      76:	00 00       	nop
      78:	8a c6       	rjmp	.+3348   	; 0xd8e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	88 c6       	rjmp	.+3344   	; 0xd8e <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 9c 2b 	jmp	0x5738	; 0x5738 <__vector_32>
      84:	84 c6       	rjmp	.+3336   	; 0xd8e <__bad_interrupt>
      86:	00 00       	nop
      88:	82 c6       	rjmp	.+3332   	; 0xd8e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	80 c6       	rjmp	.+3328   	; 0xd8e <__bad_interrupt>
      8e:	00 00       	nop
      90:	7e c6       	rjmp	.+3324   	; 0xd8e <__bad_interrupt>
      92:	00 00       	nop
      94:	7c c6       	rjmp	.+3320   	; 0xd8e <__bad_interrupt>
      96:	00 00       	nop
      98:	7a c6       	rjmp	.+3316   	; 0xd8e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 77 30 	jmp	0x60ee	; 0x60ee <__vector_39>
      a0:	76 c6       	rjmp	.+3308   	; 0xd8e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	74 c6       	rjmp	.+3304   	; 0xd8e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0c 94 c8 2b 	jmp	0x5790	; 0x5790 <__vector_42>
      ac:	70 c6       	rjmp	.+3296   	; 0xd8e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	6e c6       	rjmp	.+3292   	; 0xd8e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	6c c6       	rjmp	.+3288   	; 0xd8e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	6a c6       	rjmp	.+3284   	; 0xd8e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__vector_47>
      c0:	66 c6       	rjmp	.+3276   	; 0xd8e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	64 c6       	rjmp	.+3272   	; 0xd8e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	62 c6       	rjmp	.+3268   	; 0xd8e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	60 c6       	rjmp	.+3264   	; 0xd8e <__bad_interrupt>
      ce:	00 00       	nop
      d0:	5e c6       	rjmp	.+3260   	; 0xd8e <__bad_interrupt>
      d2:	00 00       	nop
      d4:	5c c6       	rjmp	.+3256   	; 0xd8e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	5a c6       	rjmp	.+3252   	; 0xd8e <__bad_interrupt>
      da:	00 00       	nop
      dc:	58 c6       	rjmp	.+3248   	; 0xd8e <__bad_interrupt>
      de:	00 00       	nop
      e0:	56 c6       	rjmp	.+3244   	; 0xd8e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	1f 37       	cpi	r17, 0x7F	; 127
      e6:	e9 36       	cpi	r30, 0x69	; 105
      e8:	f1 36       	cpi	r31, 0x61	; 97
      ea:	fd 36       	cpi	r31, 0x6D	; 109
      ec:	0a 37       	cpi	r16, 0x7A	; 122
      ee:	2b 37       	cpi	r18, 0x7B	; 123
      f0:	38 37       	cpi	r19, 0x78	; 120
      f2:	09 3a       	cpi	r16, 0xA9	; 169
      f4:	0e 3a       	cpi	r16, 0xAE	; 174
      f6:	13 3a       	cpi	r17, 0xA3	; 163
      f8:	1d 3a       	cpi	r17, 0xAD	; 173
      fa:	27 3a       	cpi	r18, 0xA7	; 167
      fc:	a0 3a       	cpi	r26, 0xA0	; 160
      fe:	31 3a       	cpi	r19, 0xA1	; 161
     100:	39 3a       	cpi	r19, 0xA9	; 169
     102:	41 3a       	cpi	r20, 0xA1	; 161
     104:	4b 3a       	cpi	r20, 0xAB	; 171
     106:	55 3a       	cpi	r21, 0xA5	; 165
     108:	5f 3a       	cpi	r21, 0xAF	; 175
     10a:	6e 3a       	cpi	r22, 0xAE	; 174
     10c:	78 3a       	cpi	r23, 0xA8	; 168
     10e:	a0 3a       	cpi	r26, 0xA0	; 160
     110:	82 3a       	cpi	r24, 0xA2	; 162
     112:	8c 3a       	cpi	r24, 0xAC	; 172
     114:	96 3a       	cpi	r25, 0xA6	; 166
     116:	c3 3a       	cpi	r28, 0xA3	; 163
     118:	c6 3a       	cpi	r28, 0xA6	; 166
     11a:	b5 3a       	cpi	r27, 0xA5	; 165
     11c:	b9 3a       	cpi	r27, 0xA9	; 169
     11e:	bf 3a       	cpi	r27, 0xAF	; 175
     120:	fd 3a       	cpi	r31, 0xAD	; 173
     122:	ca 3a       	cpi	r28, 0xAA	; 170
     124:	ce 3a       	cpi	r28, 0xAE	; 174
     126:	d4 3a       	cpi	r29, 0xA4	; 164
     128:	d8 3a       	cpi	r29, 0xA8	; 168
     12a:	dc 3a       	cpi	r29, 0xAC	; 172
     12c:	e2 3a       	cpi	r30, 0xA2	; 162
     12e:	e6 3a       	cpi	r30, 0xA6	; 166
     130:	ea 3a       	cpi	r30, 0xAA	; 170
     132:	fd 3a       	cpi	r31, 0xAD	; 173
     134:	f0 3a       	cpi	r31, 0xA0	; 160
     136:	f4 3a       	cpi	r31, 0xA4	; 164
     138:	f8 3a       	cpi	r31, 0xA8	; 168

0000013a <__trampolines_end>:
     13a:	00 40       	sbci	r16, 0x00	; 0
     13c:	7a 10       	cpse	r7, r10
     13e:	f3 5a       	subi	r31, 0xA3	; 163
     140:	00 a0       	ldd	r0, Z+32	; 0x20
     142:	72 4e       	sbci	r23, 0xE2	; 226
     144:	18 09       	sbc	r17, r8
     146:	00 10       	cpse	r0, r0
     148:	a5 d4       	rcall	.+2378   	; 0xa94 <_ZL12splash1_data+0x159>
     14a:	e8 00       	.word	0x00e8	; ????
     14c:	00 e8       	ldi	r16, 0x80	; 128
     14e:	76 48       	sbci	r23, 0x86	; 134
     150:	17 00       	.word	0x0017	; ????
     152:	00 e4       	ldi	r16, 0x40	; 64
     154:	0b 54       	subi	r16, 0x4B	; 75
     156:	02 00       	.word	0x0002	; ????
     158:	00 ca       	rjmp	.-3072   	; 0xfffff55a <__eeprom_end+0xff7ef55a>
     15a:	9a 3b       	cpi	r25, 0xBA	; 186
     15c:	00 00       	nop
     15e:	00 e1       	ldi	r16, 0x10	; 16
     160:	f5 05       	cpc	r31, r5
     162:	00 00       	nop
     164:	80 96       	adiw	r24, 0x20	; 32
     166:	98 00       	.word	0x0098	; ????
     168:	00 00       	nop
     16a:	40 42       	sbci	r20, 0x20	; 32
     16c:	0f 00       	.word	0x000f	; ????
     16e:	00 00       	nop
     170:	a0 86       	std	Z+8, r10	; 0x08
     172:	01 00       	.word	0x0001	; ????
     174:	00 00       	nop
     176:	10 27       	eor	r17, r16
     178:	00 00       	nop
     17a:	00 00       	nop
     17c:	e8 03       	fmulsu	r22, r16
     17e:	00 00       	nop
     180:	00 00       	nop
     182:	64 00       	.word	0x0064	; ????
     184:	00 00       	nop
     186:	00 00       	nop
     188:	0a 00       	.word	0x000a	; ????
     18a:	00 00       	nop
     18c:	00 00       	nop
     18e:	01 00       	.word	0x0001	; ????
     190:	00 00       	nop
     192:	00 00       	nop
     194:	2c 76       	andi	r18, 0x6C	; 108
     196:	d8 88       	ldd	r13, Y+16	; 0x10
     198:	dc 67       	ori	r29, 0x7C	; 124
     19a:	4f 08       	sbc	r4, r15
     19c:	23 df       	rcall	.-442    	; 0xffffffe4 <__eeprom_end+0xff7effe4>
     19e:	c1 df       	rcall	.-126    	; 0x122 <__SREG__+0xe3>
     1a0:	ae 59       	subi	r26, 0x9E	; 158
     1a2:	e1 b1       	in	r30, 0x01	; 1
     1a4:	b7 96       	adiw	r30, 0x27	; 39
     1a6:	e5 e3       	ldi	r30, 0x35	; 53
     1a8:	e4 53       	subi	r30, 0x34	; 52
     1aa:	c6 3a       	cpi	r28, 0xA6	; 166
     1ac:	e6 51       	subi	r30, 0x16	; 22
     1ae:	99 76       	andi	r25, 0x69	; 105
     1b0:	96 e8       	ldi	r25, 0x86	; 134
     1b2:	e6 c2       	rjmp	.+1484   	; 0x780 <_ZL12splash2_data+0x25>
     1b4:	84 26       	eor	r8, r20
     1b6:	eb 89       	ldd	r30, Y+19	; 0x13
     1b8:	8c 9b       	sbis	0x11, 4	; 17
     1ba:	62 ed       	ldi	r22, 0xD2	; 210
     1bc:	40 7c       	andi	r20, 0xC0	; 192
     1be:	6f fc       	.word	0xfc6f	; ????
     1c0:	ef bc       	out	0x2f, r14	; 47
     1c2:	9c 9f       	mul	r25, r28
     1c4:	40 f2       	brcs	.-112    	; 0x156 <__trampolines_end+0x1c>
     1c6:	ba a5       	ldd	r27, Y+42	; 0x2a
     1c8:	6f a5       	ldd	r22, Y+47	; 0x2f
     1ca:	f4 90       	lpm	r15, Z
     1cc:	05 5a       	subi	r16, 0xA5	; 165
     1ce:	2a f7       	brpl	.-54     	; 0x19a <__trampolines_end+0x60>
     1d0:	5c 93       	st	X, r21
     1d2:	6b 6c       	ori	r22, 0xCB	; 203
     1d4:	f9 67       	ori	r31, 0x79	; 121
     1d6:	6d c1       	rjmp	.+730    	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
     1d8:	1b fc       	.word	0xfc1b	; ????
     1da:	e0 e4       	ldi	r30, 0x40	; 64
     1dc:	0d 47       	sbci	r16, 0x7D	; 125
     1de:	fe f5       	brtc	.+126    	; 0x25e <_ZL4font+0x2a>
     1e0:	20 e6       	ldi	r18, 0x60	; 96
     1e2:	b5 00       	.word	0x00b5	; ????
     1e4:	d0 ed       	ldi	r29, 0xD0	; 208
     1e6:	90 2e       	mov	r9, r16
     1e8:	03 00       	.word	0x0003	; ????
     1ea:	94 35       	cpi	r25, 0x54	; 84
     1ec:	77 05       	cpc	r23, r7
     1ee:	00 80       	ld	r0, Z
     1f0:	84 1e       	adc	r8, r20
     1f2:	08 00       	.word	0x0008	; ????
     1f4:	00 20       	and	r0, r0
     1f6:	4e 0a       	sbc	r4, r30
     1f8:	00 00       	nop
     1fa:	00 c8       	rjmp	.-4096   	; 0xfffff1fc <__eeprom_end+0xff7ef1fc>
     1fc:	0c 33       	cpi	r16, 0x3C	; 60
     1fe:	33 33       	cpi	r19, 0x33	; 51
     200:	33 0f       	add	r19, r19
     202:	98 6e       	ori	r25, 0xE8	; 232
     204:	12 83       	std	Z+2, r17	; 0x02
     206:	11 41       	sbci	r17, 0x11	; 17
     208:	ef 8d       	ldd	r30, Y+31	; 0x1f
     20a:	21 14       	cp	r2, r1
     20c:	89 3b       	cpi	r24, 0xB9	; 185
     20e:	e6 55       	subi	r30, 0x56	; 86
     210:	16 cf       	rjmp	.-468    	; 0x3e <__SP_H__>
     212:	fe e6       	ldi	r31, 0x6E	; 110
     214:	db 18       	sub	r13, r11
     216:	d1 84       	ldd	r13, Z+9	; 0x09
     218:	4b 38       	cpi	r20, 0x8B	; 139
     21a:	1b f7       	brvc	.-58     	; 0x1e2 <__trampolines_end+0xa8>
     21c:	7c 1d       	adc	r23, r12
     21e:	90 1d       	adc	r25, r0
     220:	a4 bb       	out	0x14, r26	; 20
     222:	e4 24       	eor	r14, r4
     224:	20 32       	cpi	r18, 0x20	; 32
     226:	84 72       	andi	r24, 0x24	; 36
     228:	5e 22       	and	r5, r30
     22a:	81 00       	.word	0x0081	; ????
     22c:	c9 f1       	breq	.+114    	; 0x2a0 <_ZL4font+0x6c>
     22e:	24 ec       	ldi	r18, 0xC4	; 196
     230:	a1 e5       	ldi	r26, 0x51	; 81
     232:	3d 27       	eor	r19, r29

00000234 <_ZL4font>:
     234:	00 00 00 00 00 3e 5b 4f 5b 3e 3e 6b 4f 6b 3e 1c     .....>[O[>>kOk>.
     244:	3e 7c 3e 1c 18 3c 7e 3c 18 1c 57 7d 57 1c 1c 5e     >|>..<~<..W}W..^
     254:	7f 5e 1c 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .^...<.........$
     264:	18 00 ff e7 db e7 ff 30 48 3a 06 0e 26 29 79 29     .......0H:..&)y)
     274:	26 40 7f 05 05 07 40 7f 05 25 3f 5a 3c e7 3c 5a     &@....@..%?Z<.<Z
     284:	7f 3e 1c 1c 08 08 1c 1c 3e 7f 14 22 7f 22 14 5f     .>......>.."."._
     294:	5f 00 5f 5f 06 09 7f 01 7f 00 66 89 95 6a 60 60     _.__......f..j``
     2a4:	60 60 60 94 a2 ff a2 94 08 04 7e 04 08 10 20 7e     ```.......~... ~
     2b4:	20 10 08 08 2a 1c 08 08 1c 2a 08 08 1e 10 10 10      ...*....*......
     2c4:	10 0c 1e 0c 1e 0c 30 38 3e 38 30 06 0e 3e 0e 06     ......08>80..>..
     2d4:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     2e4:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     2f4:	56 20 50 00 08 07 03 00 00 1c 22 41 00 00 41 22     V P......."A..A"
     304:	1c 00 2a 1c 7f 1c 2a 08 08 3e 08 08 00 80 70 30     ..*...*..>....p0
     314:	00 08 08 08 08 08 00 00 60 60 00 20 10 08 04 02     ........``. ....
     324:	3e 51 49 45 3e 00 42 7f 40 00 72 49 49 49 46 21     >QIE>.B.@.rIIIF!
     334:	41 49 4d 33 18 14 12 7f 10 27 45 45 45 39 3c 4a     AIM3.....'EEE9<J
     344:	49 49 31 41 21 11 09 07 36 49 49 49 36 46 49 49     II1A!...6III6FII
     354:	29 1e 00 00 14 00 00 00 40 34 00 00 00 08 14 22     ).......@4....."
     364:	41 14 14 14 14 14 00 41 22 14 08 02 01 59 09 06     A......A"....Y..
     374:	3e 41 5d 59 4e 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]YN|...|.III6>
     384:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
     394:	09 09 01 3e 41 41 51 73 7f 08 08 08 7f 00 41 7f     ...>AAQs......A.
     3a4:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     3b4:	40 7f 02 1c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     3c4:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
     3d4:	49 49 49 32 03 01 7f 01 03 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
     3e4:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 03 04 78     @ .?@8@?c...c..x
     3f4:	04 03 61 59 49 4d 43 00 7f 41 41 41 02 04 08 10     ..aYIMC..AAA....
     404:	20 00 41 41 41 7f 04 02 01 02 04 40 40 40 40 40      .AAA......@@@@@
     414:	00 03 07 08 00 20 54 54 78 40 7f 28 44 44 38 38     ..... TTx@.(DD88
     424:	44 44 44 28 38 44 44 28 7f 38 54 54 54 18 00 08     DDD(8DD(.8TTT...
     434:	7e 09 02 18 a4 a4 9c 78 7f 08 04 04 78 00 44 7d     ~......x....x.D}
     444:	40 00 20 40 40 3d 00 7f 10 28 44 00 00 41 7f 40     @. @@=...(D..A.@
     454:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
     464:	fc 18 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     ..$$..$$..|....H
     474:	54 54 54 24 04 04 3f 44 24 3c 40 40 20 7c 1c 20     TTT$..?D$<@@ |. 
     484:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 4c 90 90     @ .<@0@<D(.(DL..
     494:	90 7c 44 64 54 4c 44 00 08 36 41 00 00 00 77 00     .|DdTLD..6A...w.
     4a4:	00 00 41 36 08 00 02 01 02 04 02 3c 26 23 26 3c     ..A6.......<&#&<
     4b4:	1e a1 a1 61 12 3a 40 40 20 7a 38 54 54 55 59 21     ...a.:@@ z8TTUY!
     4c4:	55 55 79 41 22 54 54 78 42 21 55 54 78 40 20 54     UUyA"TTxB!UTx@ T
     4d4:	55 79 40 0c 1e 52 72 12 39 55 55 55 59 39 54 54     Uy@..Rr.9UUUY9TT
     4e4:	54 59 39 55 54 54 58 00 00 45 7c 41 00 02 45 7d     TY9UTTX..E|A..E}
     4f4:	42 00 01 45 7c 40 7d 12 11 12 7d f0 28 25 28 f0     B..E|@}...}.(%(.
     504:	7c 54 55 45 00 20 54 54 7c 54 7c 0a 09 7f 49 32     |TUE. TT|T|...I2
     514:	49 49 49 32 3a 44 44 44 3a 32 4a 48 48 30 3a 41     III2:DDD:2JHH0:A
     524:	41 21 7a 3a 42 40 20 78 00 9d a0 a0 7d 3d 42 42     A!z:B@ x....}=BB
     534:	42 3d 3d 40 40 40 3d 3c 24 ff 24 24 48 7e 49 43     B==@@@=<$.$$H~IC
     544:	66 2b 2f fc 2f 2b ff 09 29 f6 20 c0 88 7e 09 03     f+/./+..). ..~..
     554:	20 54 54 79 41 00 00 44 7d 41 30 48 48 4a 32 38      TTyA..D}A0HHJ28
     564:	40 40 22 7a 00 7a 0a 0a 72 7d 0d 19 31 7d 26 29     @@"z.z..r}..1}&)
     574:	29 2f 28 26 29 29 29 26 30 48 4d 40 20 38 08 08     )/(&)))&0HM@ 8..
     584:	08 08 08 08 08 08 38 2f 10 c8 ac ba 2f 10 28 34     ......8/..../.(4
     594:	fa 00 00 7b 00 00 08 14 2a 14 22 22 14 2a 14 08     ...{....*."".*..
     5a4:	55 00 55 00 55 aa 55 aa 55 aa ff 55 ff 55 ff 00     U.U.U.U.U..U.U..
     5b4:	00 00 ff 00 10 10 10 ff 00 14 14 14 ff 00 10 10     ................
     5c4:	ff 00 ff 10 10 f0 10 f0 14 14 14 fc 00 14 14 f7     ................
     5d4:	00 ff 00 00 ff 00 ff 14 14 f4 04 fc 14 14 17 10     ................
     5e4:	1f 10 10 1f 10 1f 14 14 14 1f 00 10 10 10 f0 00     ................
     5f4:	00 00 00 1f 10 10 10 10 1f 10 10 10 10 f0 10 00     ................
     604:	00 00 ff 10 10 10 10 10 10 10 10 10 ff 10 00 00     ................
     614:	00 ff 14 00 00 ff 00 ff 00 00 1f 10 17 00 00 fc     ................
     624:	04 f4 14 14 17 10 17 14 14 f4 04 f4 00 00 ff 00     ................
     634:	f7 14 14 14 14 14 14 14 f7 00 f7 14 14 14 17 14     ................
     644:	10 10 1f 10 1f 14 14 14 f4 14 10 10 f0 10 f0 00     ................
     654:	00 1f 10 1f 00 00 00 1f 14 00 00 00 fc 14 00 00     ................
     664:	f0 10 f0 10 10 ff 10 ff 14 14 14 ff 14 10 10 10     ................
     674:	1f 00 00 00 00 f0 10 ff ff ff ff ff f0 f0 f0 f0     ................
     684:	f0 ff ff ff 00 00 00 00 00 ff ff 0f 0f 0f 0f 0f     ................
     694:	38 44 44 38 44 fc 4a 4a 4a 34 7e 02 02 06 06 02     8DD8D.JJJ4~.....
     6a4:	7e 02 7e 02 63 55 49 41 63 38 44 44 3c 04 40 7e     ~.~.cUIAc8DD<.@~
     6b4:	20 1e 20 06 02 7e 02 02 99 a5 e7 a5 99 1c 2a 49      . ..~........*I
     6c4:	2a 1c 4c 72 01 72 4c 30 4a 4d 4d 30 30 48 78 48     *.Lr.rL0JMM00HxH
     6d4:	30 bc 62 5a 46 3d 3e 49 49 49 00 7e 01 01 01 7e     0.bZF=>III.~...~
     6e4:	2a 2a 2a 2a 2a 44 44 5f 44 44 40 51 4a 44 40 40     *****DD_DD@QJD@@
     6f4:	44 4a 51 40 00 00 ff 01 03 e0 80 ff 00 00 08 08     DJQ@............
     704:	6b 6b 08 36 12 36 24 36 06 0f 09 0f 06 00 00 18     kk.6.6$6........
     714:	18 00 00 00 10 10 00 30 40 ff 01 01 00 1f 01 01     .......0@.......
     724:	1e 00 19 1d 17 12 00 3c 3c 3c 3c 00 00 00 00 00     .......<<<<.....

00000734 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
     734:	22 00 ff 21 00                                      "..!.

00000739 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEiiijE8postmask>:
     739:	00 01 03 07 0f 1f 3f 7f                             ......?.

00000741 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEiiijE7premask>:
     741:	00 80 c0 e0 f0 f8 fc fe                             ........

00000749 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
     749:	db 40 a4 a6 2e af                                   .@....

0000074f <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
     74f:	20 00 a1 c8                                          ...

00000753 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
     753:	d3 00 40 8d                                         ..@.

00000757 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
     757:	ae d5 80 a8                                         ....

0000075b <_ZL12splash2_data>:
     75b:	00 00 60 00 00 00 00 00 00 00 00 00 00 00 00 00     ..`.............
     76b:	00 e0 00 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
     77b:	e0 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f0     ................
	...
     797:	00 03 f0 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     7a7:	07 f0 00 00 00 00 00 00 00 00 00 00 00 00 00 07     ................
     7b7:	f8 00 00 00 00 00 00 00 00 00 00 00 00 00 0f f8     ................
     7c7:	00 00 00 03 c0 00 7e 00 00 01 e0 00 7f 0f f8 00     ......~.........
     7d7:	00 00 03 c0 00 fe 00 00 01 e0 00 ff ef f8 00 00     ................
     7e7:	00 03 c0 00 fe 00 00 01 e0 00 ff ff f8 00 00 00     ................
     7f7:	03 c0 00 f0 00 00 00 0f 00 7f fe 7f c0 00 00 03     ................
     807:	c0 00 f0 00 00 00 0f 00 3f fe 7f f8 3f f1 fb cf     ........?...?...
     817:	fc fe f3 bc 3d ef e0 1f fe 7f ff 7f fb ff df fe     ....=...........
     827:	fe ff bc 3d ef e0 1f c6 ff ff 7f fb ff df fe fe     ...=............
     837:	ff bc 3d ef e0 0f e3 c7 fe 78 7b c3 de 1e f0 ff     ..=......x{.....
     847:	bc 3d ef 00 07 ff 87 fc 78 7b c3 de 1e f0 f8 3c     .=......x{.....<
     857:	3d ef 00 01 ff ff f0 00 7b c3 c0 1e f0 f0 3c 3d     =.......{.....<=
     867:	ef 00 01 f3 7f e0 3f fb c3 cf fe f0 f0 3c 3d ef     ......?......<=.
     877:	00 03 e3 3f 80 7f fb c3 df fe f0 f0 3c 3d ef 00     ...?........<=..
     887:	07 e7 3c 00 78 7b c3 de 1e f0 f0 3c 3d ef 00 07     ..<.x{.....<=...
     897:	ff be 00 78 7b c3 de 1e f0 f0 3c 3d ef 00 07 ff     ...x{.....<=....
     8a7:	fe 00 78 7b c3 de 1e f0 f0 3c 3d ef 00 0f ff fe     ..x{.....<=.....
     8b7:	00 7f fb ff df fe f0 f0 3f fd ef e0 0f ff ff 00     ........?.......
     8c7:	7f fb ff df fe f0 f0 3f fd ef e0 0f f9 ff 00 3e     .......?.......>
     8d7:	79 f9 cf 9e f0 f0 1f 3d e7 e0 1f f1 ff 00 00 00     y......=........
	...
     8ef:	00 1f 80 ff 00 7f ff ff ff ff ff ff ff ff ff e0     ................
     8ff:	1c 00 7f 00 7f ff ff ff fe b4 6d 88 8d 18 e0 00     ..........m.....
     90f:	00 1f 00 7f ff ff ff fe 95 ad 7d b5 77 e0 00 00     ..........}.w...
     91f:	0f 00 7f ff ff ff fe a5 ad 9d 8d 19 e0 00 00 06     ................
     92f:	00 7f ff ff ff fe b5 ad ed b5 7e e0                 ..........~.

0000093b <_ZL12splash1_data>:
     93b:	00 00 00 00 00 01 80 00 00 00 00 00 00 00 00 00     ................
     94b:	03 80 00 00 00 00 00 00 00 00 00 07 c0 00 00 00     ................
     95b:	00 00 00 00 00 00 07 c0 00 00 00 00 00 00 00 00     ................
     96b:	00 0f c0 00 00 00 00 00 00 00 00 00 1f e0 00 00     ................
     97b:	00 00 00 00 00 00 00 1f e0 00 00 00 00 00 00 00     ................
     98b:	00 00 3f e0 00 00 00 00 00 00 00 00 00 3f f0 00     ..?..........?..
	...
     9a3:	7f f0 00 00 00 00 00 00 00 1f f8 7f f0 00 00 00     ................
     9b3:	00 00 00 00 3f fe 7f f0 00 00 00 00 00 00 00 3f     ....?..........?
     9c3:	ff 7f f0 00 00 00 00 00 00 00 1f ff fb e0 00 00     ................
     9d3:	00 00 00 00 00 0f ff f9 ff c0 00 00 00 00 00 00     ................
     9e3:	0f ff f9 ff f8 00 00 00 00 00 00 07 ff f1 ff ff     ................
     9f3:	00 00 00 00 00 00 03 fc 73 ff ff 80 00 00 00 00     ........s.......
     a03:	00 01 fe 3f ff ff 80 00 00 00 00 00 00 ff 1e 0f     ...?............
     a13:	ff 00 00 00 00 00 00 00 7f fe 1f fc 00 00 00 00     ................
     a23:	00 00 00 3f ff ff f8 00 00 00 00 00 00 00 0f df     ...?............
     a33:	ff e0 00 00 00 00 00 00 00 1f 19 ff c0 00 00 00     ................
     a43:	00 00 00 00 3f 3c ff 00 00 00 00 00 00 00 00 7e     ....?<.........~
     a53:	7c f8 00 00 00 00 00 00 00 00 7f fe 7c 00 00 00     |...........|...
     a63:	00 00 00 00 00 ff ff fc 00 00 00 00 00 00 00 00     ................
     a73:	ff ff fe 00 00 00 00 00 00 00 00 ff ff fe 00 00     ................
     a83:	00 00 00 00 00 01 ff ef fe 00 00 00 00 00 00 00     ................
     a93:	01 ff cf fe 00 00 00 00 00 00 00 03 ff 07 fe 00     ................
     aa3:	00 00 00 00 00 00 03 fc 07 fe 00 00 00 00 00 00     ................
     ab3:	00 03 f0 03 fe 00 00 00 00 00 00 00 01 80 00 fe     ................
	...
     acb:	00 00 7e 00 00 00 00 00 00 00 00 00 00 3e 00 00     ..~..........>..
	...
     ae3:	0c 00 00 00 00 00 00 07 80 00 fc 00 00 03 c0 00     ................
     af3:	00 00 07 80 01 fc 00 00 03 c0 00 00 00 07 80 01     ................
     b03:	fc 00 00 03 c0 00 00 00 07 80 01 e0 00 00 00 1e     ................
     b13:	00 00 00 07 80 01 e0 00 00 00 1e 00 7f e3 f7 9f     ................
     b23:	f9 fd e7 78 7b df c0 ff f7 ff bf fd fd ff 78 7b     ...x{.........x{
     b33:	df c0 ff f7 ff bf fd fd ff 78 7b df c0 f0 f7 87     .........x{.....
     b43:	bc 3d e1 ff 78 7b de 00 f0 f7 87 bc 3d e1 f0 78     .=..x{......=..x
     b53:	7b de 00 00 f7 87 80 3d e1 e0 78 7b de 00 7f f7     {......=..x{....
     b63:	87 9f fd e1 e0 78 7b de 00 ff f7 87 bf fd e1 e0     .....x{.........
     b73:	78 7b de 00 f0 f7 87 bc 3d e1 e0 78 7b de 00 f0     x{......=..x{...
     b83:	f7 87 bc 3d e1 e0 78 7b de 00 f0 f7 87 bc 3d e1     ...=..x{......=.
     b93:	e0 78 7b de 00 ff f7 ff bf fd e1 e0 7f fb df c0     .x{.............
     ba3:	ff f7 ff bf fd e1 e0 7f fb df c0 7c f3 f3 9f 3d     ...........|...=
     bb3:	e1 e0 3e 7b cf c0 00 00 00 00 00 00 00 00 00 00     ..>{............
     bc3:	00 ff ff ff ff ff ff ff ff ff ff c0 ff ff ff ff     ................
     bd3:	fd 68 db 11 1a 31 c0 ff ff ff ff fd 2b 5a fb 6a     .h...1......+Z.j
     be3:	ef c0 ff ff ff ff fd 4b 5b 3b 1a 33 c0 ff ff ff     .......K[;.3....
     bf3:	ff fd 6b 5b db 6a fd c0                             ..k[.j..

00000bfb <digital_pin_to_timer_PGM>:
     bfb:	00 00 0a 0b 02 09 0c 0d 0e 08 07 03 04 01 00 00     ................
	...
     c27:	12 11 10 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

00000c41 <digital_pin_to_bit_mask_PGM>:
     c41:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     c51:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     c61:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     c71:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     c81:	04 08 10 20 40 80                                   ... @.

00000c87 <digital_pin_to_port_PGM>:
     c87:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     c97:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     ca7:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     cb7:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     cc7:	0b 0b 0b 0b 0b 0b                                   ......

00000ccd <port_to_input_PGM>:
     ccd:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     cdd:	00 01 00 00 03 01 06 01 09 01                       ..........

00000ce7 <port_to_output_PGM>:
     ce7:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     cf7:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000d01 <port_to_mode_PGM>:
     d01:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     d11:	01 01 00 00 04 01 07 01 0a 01 00                    ...........

00000d1c <__ctors_start>:
     d1c:	6c 08       	sbc	r6, r12
     d1e:	2f 0c       	add	r2, r15
     d20:	3b 0e       	add	r3, r27
     d22:	04 33       	cpi	r16, 0x34	; 52
     d24:	5c 36       	cpi	r21, 0x6C	; 108

00000d26 <__ctors_end>:
     d26:	83 08       	sbc	r8, r3
     d28:	86 0c       	add	r8, r6
     d2a:	53 0e       	add	r5, r19

00000d2c <__dtors_end>:
     d2c:	11 24       	eor	r1, r1
     d2e:	1f be       	out	0x3f, r1	; 63
     d30:	cf ef       	ldi	r28, 0xFF	; 255
     d32:	d1 e2       	ldi	r29, 0x21	; 33
     d34:	de bf       	out	0x3e, r29	; 62
     d36:	cd bf       	out	0x3d, r28	; 61
     d38:	00 e0       	ldi	r16, 0x00	; 0
     d3a:	0c bf       	out	0x3c, r16	; 60

00000d3c <__do_copy_data>:
     d3c:	13 e0       	ldi	r17, 0x03	; 3
     d3e:	a0 e0       	ldi	r26, 0x00	; 0
     d40:	b2 e0       	ldi	r27, 0x02	; 2
     d42:	ea ed       	ldi	r30, 0xDA	; 218
     d44:	f7 e8       	ldi	r31, 0x87	; 135
     d46:	00 e0       	ldi	r16, 0x00	; 0
     d48:	0b bf       	out	0x3b, r16	; 59
     d4a:	02 c0       	rjmp	.+4      	; 0xd50 <__do_copy_data+0x14>
     d4c:	07 90       	elpm	r0, Z+
     d4e:	0d 92       	st	X+, r0
     d50:	a4 3f       	cpi	r26, 0xF4	; 244
     d52:	b1 07       	cpc	r27, r17
     d54:	d9 f7       	brne	.-10     	; 0xd4c <__do_copy_data+0x10>

00000d56 <__do_clear_bss>:
     d56:	27 e0       	ldi	r18, 0x07	; 7
     d58:	a4 ef       	ldi	r26, 0xF4	; 244
     d5a:	b3 e0       	ldi	r27, 0x03	; 3
     d5c:	01 c0       	rjmp	.+2      	; 0xd60 <.do_clear_bss_start>

00000d5e <.do_clear_bss_loop>:
     d5e:	1d 92       	st	X+, r1

00000d60 <.do_clear_bss_start>:
     d60:	ad 33       	cpi	r26, 0x3D	; 61
     d62:	b2 07       	cpc	r27, r18
     d64:	e1 f7       	brne	.-8      	; 0xd5e <.do_clear_bss_loop>

00000d66 <__do_global_ctors>:
     d66:	16 e0       	ldi	r17, 0x06	; 6
     d68:	c3 e9       	ldi	r28, 0x93	; 147
     d6a:	d6 e0       	ldi	r29, 0x06	; 6
     d6c:	00 e0       	ldi	r16, 0x00	; 0
     d6e:	06 c0       	rjmp	.+12     	; 0xd7c <__do_global_ctors+0x16>
     d70:	21 97       	sbiw	r28, 0x01	; 1
     d72:	01 09       	sbc	r16, r1
     d74:	80 2f       	mov	r24, r16
     d76:	fe 01       	movw	r30, r28
     d78:	0e 94 a4 3e 	call	0x7d48	; 0x7d48 <__tablejump2__>
     d7c:	ce 38       	cpi	r28, 0x8E	; 142
     d7e:	d1 07       	cpc	r29, r17
     d80:	80 e0       	ldi	r24, 0x00	; 0
     d82:	08 07       	cpc	r16, r24
     d84:	a9 f7       	brne	.-22     	; 0xd70 <__do_global_ctors+0xa>
     d86:	0e 94 8b 36 	call	0x6d16	; 0x6d16 <main>
     d8a:	0c 94 dc 43 	jmp	0x87b8	; 0x87b8 <__do_global_dtors>

00000d8e <__bad_interrupt>:
     d8e:	38 c9       	rjmp	.-3472   	; 0x0 <__vectors>

00000d90 <_Z9ReadClockv>:
#include "AtomicClock.h"

extern RTClib myClock;

DateTime ReadClock()// Clock reader
{
     d90:	cf 93       	push	r28
     d92:	df 93       	push	r29
     d94:	00 d0       	rcall	.+0      	; 0xd96 <_Z9ReadClockv+0x6>
     d96:	00 d0       	rcall	.+0      	; 0xd98 <_Z9ReadClockv+0x8>
     d98:	cd b7       	in	r28, 0x3d	; 61
     d9a:	de b7       	in	r29, 0x3e	; 62
	return myClock.now();
     d9c:	0e 94 91 20 	call	0x4122	; 0x4122 <_ZN6RTClib3nowEv>
}
     da0:	80 e0       	ldi	r24, 0x00	; 0
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	26 96       	adiw	r28, 0x06	; 6
     da6:	0f b6       	in	r0, 0x3f	; 63
     da8:	f8 94       	cli
     daa:	de bf       	out	0x3e, r29	; 62
     dac:	0f be       	out	0x3f, r0	; 63
     dae:	cd bf       	out	0x3d, r28	; 61
     db0:	df 91       	pop	r29
     db2:	cf 91       	pop	r28
     db4:	08 95       	ret

00000db6 <_Z13GetTimeString8DateTime>:
String GetTimeString(DateTime dt)// Retrieves the time from the atomic clock.
{
     db6:	df 92       	push	r13
     db8:	ef 92       	push	r14
     dba:	ff 92       	push	r15
     dbc:	0f 93       	push	r16
     dbe:	1f 93       	push	r17
     dc0:	cf 93       	push	r28
     dc2:	df 93       	push	r29
     dc4:	00 d0       	rcall	.+0      	; 0xdc6 <_Z13GetTimeString8DateTime+0x10>
     dc6:	00 d0       	rcall	.+0      	; 0xdc8 <_Z13GetTimeString8DateTime+0x12>
     dc8:	cd b7       	in	r28, 0x3d	; 61
     dca:	de b7       	in	r29, 0x3e	; 62
     dcc:	8c 01       	movw	r16, r24
     dce:	f5 2e       	mov	r15, r21
     dd0:	d6 2e       	mov	r13, r22
     dd2:	e7 2e       	mov	r14, r23
	String tempTimeString = "";
     dd4:	6c eb       	ldi	r22, 0xBC	; 188
     dd6:	72 e0       	ldi	r23, 0x02	; 2
     dd8:	0e 94 3a 3c 	call	0x7874	; 0x7874 <_ZN6StringC1EPKc>
	if (dt.hour() < 9)
     ddc:	88 e0       	ldi	r24, 0x08	; 8
     dde:	8f 15       	cp	r24, r15
     de0:	28 f0       	brcs	.+10     	; 0xdec <_Z13GetTimeString8DateTime+0x36>
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
	String & operator += (unsigned char num)		{concat(num); return (*this);}
	String & operator += (int num)			{concat(num); return (*this);}
     de2:	60 e0       	ldi	r22, 0x00	; 0
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	c8 01       	movw	r24, r16
     de8:	0e 94 b0 3d 	call	0x7b60	; 0x7b60 <_ZN6String6concatEi>
     dec:	6f 2d       	mov	r22, r15
     dee:	70 e0       	ldi	r23, 0x00	; 0
     df0:	61 50       	subi	r22, 0x01	; 1
     df2:	71 09       	sbc	r23, r1
     df4:	c8 01       	movw	r24, r16
     df6:	0e 94 b0 3d 	call	0x7b60	; 0x7b60 <_ZN6String6concatEi>
	unsigned char concat(const __FlashStringHelper * str);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
     dfa:	68 e7       	ldi	r22, 0x78	; 120
     dfc:	72 e0       	ldi	r23, 0x02	; 2
     dfe:	c8 01       	movw	r24, r16
     e00:	0e 94 79 3d 	call	0x7af2	; 0x7af2 <_ZN6String6concatEPKc>
	{
		tempTimeString += 0;
	}
	tempTimeString += dt.hour() - 1;
	tempTimeString += ":";
	if (dt.minute() < 9)
     e04:	88 e0       	ldi	r24, 0x08	; 8
     e06:	8d 15       	cp	r24, r13
     e08:	28 f0       	brcs	.+10     	; 0xe14 <_Z13GetTimeString8DateTime+0x5e>
	String & operator += (char c)			{concat(c); return (*this);}
	String & operator += (unsigned char num)		{concat(num); return (*this);}
	String & operator += (int num)			{concat(num); return (*this);}
     e0a:	60 e0       	ldi	r22, 0x00	; 0
     e0c:	70 e0       	ldi	r23, 0x00	; 0
     e0e:	c8 01       	movw	r24, r16
     e10:	0e 94 b0 3d 	call	0x7b60	; 0x7b60 <_ZN6String6concatEi>
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
	String & operator += (unsigned char num)		{concat(num); return (*this);}
     e14:	6d 2d       	mov	r22, r13
     e16:	c8 01       	movw	r24, r16
     e18:	0e 94 87 3d 	call	0x7b0e	; 0x7b0e <_ZN6String6concatEh>
	unsigned char concat(const __FlashStringHelper * str);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
     e1c:	68 e7       	ldi	r22, 0x78	; 120
     e1e:	72 e0       	ldi	r23, 0x02	; 2
     e20:	c8 01       	movw	r24, r16
     e22:	0e 94 79 3d 	call	0x7af2	; 0x7af2 <_ZN6String6concatEPKc>
	{
		tempTimeString += 0;
	}
	tempTimeString += dt.minute();
	tempTimeString += ":";
	if (dt.second() < 9)
     e26:	88 e0       	ldi	r24, 0x08	; 8
     e28:	8e 15       	cp	r24, r14
     e2a:	28 f0       	brcs	.+10     	; 0xe36 <_Z13GetTimeString8DateTime+0x80>
	String & operator += (char c)			{concat(c); return (*this);}
	String & operator += (unsigned char num)		{concat(num); return (*this);}
	String & operator += (int num)			{concat(num); return (*this);}
     e2c:	60 e0       	ldi	r22, 0x00	; 0
     e2e:	70 e0       	ldi	r23, 0x00	; 0
     e30:	c8 01       	movw	r24, r16
     e32:	0e 94 b0 3d 	call	0x7b60	; 0x7b60 <_ZN6String6concatEi>
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
	String & operator += (unsigned char num)		{concat(num); return (*this);}
     e36:	6e 2d       	mov	r22, r14
     e38:	c8 01       	movw	r24, r16
     e3a:	0e 94 87 3d 	call	0x7b0e	; 0x7b0e <_ZN6String6concatEh>
	{
		tempTimeString += 0;
	}
	tempTimeString += dt.second();
	return tempTimeString;
}
     e3e:	c8 01       	movw	r24, r16
     e40:	26 96       	adiw	r28, 0x06	; 6
     e42:	0f b6       	in	r0, 0x3f	; 63
     e44:	f8 94       	cli
     e46:	de bf       	out	0x3e, r29	; 62
     e48:	0f be       	out	0x3f, r0	; 63
     e4a:	cd bf       	out	0x3d, r28	; 61
     e4c:	df 91       	pop	r29
     e4e:	cf 91       	pop	r28
     e50:	1f 91       	pop	r17
     e52:	0f 91       	pop	r16
     e54:	ff 90       	pop	r15
     e56:	ef 90       	pop	r14
     e58:	df 90       	pop	r13
     e5a:	08 95       	ret

00000e5c <_Z13GetDataString8DateTime>:
String GetDataString(DateTime dt)// Retrieves the date from the atomic clock.
{
     e5c:	df 92       	push	r13
     e5e:	ef 92       	push	r14
     e60:	ff 92       	push	r15
     e62:	0f 93       	push	r16
     e64:	1f 93       	push	r17
     e66:	cf 93       	push	r28
     e68:	df 93       	push	r29
     e6a:	00 d0       	rcall	.+0      	; 0xe6c <_Z13GetDataString8DateTime+0x10>
     e6c:	00 d0       	rcall	.+0      	; 0xe6e <_Z13GetDataString8DateTime+0x12>
     e6e:	cd b7       	in	r28, 0x3d	; 61
     e70:	de b7       	in	r29, 0x3e	; 62
     e72:	8c 01       	movw	r16, r24
     e74:	f2 2e       	mov	r15, r18
     e76:	e3 2e       	mov	r14, r19
     e78:	d4 2e       	mov	r13, r20
	String tempDataString = "";
     e7a:	6c eb       	ldi	r22, 0xBC	; 188
     e7c:	72 e0       	ldi	r23, 0x02	; 2
     e7e:	0e 94 3a 3c 	call	0x7874	; 0x7874 <_ZN6StringC1EPKc>
	if (dt.day() < 9)
     e82:	88 e0       	ldi	r24, 0x08	; 8
     e84:	8d 15       	cp	r24, r13
     e86:	28 f0       	brcs	.+10     	; 0xe92 <_Z13GetDataString8DateTime+0x36>
	String & operator += (int num)			{concat(num); return (*this);}
     e88:	60 e0       	ldi	r22, 0x00	; 0
     e8a:	70 e0       	ldi	r23, 0x00	; 0
     e8c:	c8 01       	movw	r24, r16
     e8e:	0e 94 b0 3d 	call	0x7b60	; 0x7b60 <_ZN6String6concatEi>
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
	String & operator += (unsigned char num)		{concat(num); return (*this);}
     e92:	6d 2d       	mov	r22, r13
     e94:	c8 01       	movw	r24, r16
     e96:	0e 94 87 3d 	call	0x7b0e	; 0x7b0e <_ZN6String6concatEh>
	unsigned char concat(const __FlashStringHelper * str);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
     e9a:	6a e7       	ldi	r22, 0x7A	; 122
     e9c:	72 e0       	ldi	r23, 0x02	; 2
     e9e:	c8 01       	movw	r24, r16
     ea0:	0e 94 79 3d 	call	0x7af2	; 0x7af2 <_ZN6String6concatEPKc>
	{
		tempDataString += 0;
	}
	tempDataString += dt.day();
	tempDataString += "-";
	if (dt.month() < 9)
     ea4:	88 e0       	ldi	r24, 0x08	; 8
     ea6:	8e 15       	cp	r24, r14
     ea8:	28 f0       	brcs	.+10     	; 0xeb4 <_Z13GetDataString8DateTime+0x58>
	String & operator += (char c)			{concat(c); return (*this);}
	String & operator += (unsigned char num)		{concat(num); return (*this);}
	String & operator += (int num)			{concat(num); return (*this);}
     eaa:	60 e0       	ldi	r22, 0x00	; 0
     eac:	70 e0       	ldi	r23, 0x00	; 0
     eae:	c8 01       	movw	r24, r16
     eb0:	0e 94 b0 3d 	call	0x7b60	; 0x7b60 <_ZN6String6concatEi>
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
	String & operator += (unsigned char num)		{concat(num); return (*this);}
     eb4:	6e 2d       	mov	r22, r14
     eb6:	c8 01       	movw	r24, r16
     eb8:	0e 94 87 3d 	call	0x7b0e	; 0x7b0e <_ZN6String6concatEh>
	unsigned char concat(const __FlashStringHelper * str);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
     ebc:	6a e7       	ldi	r22, 0x7A	; 122
     ebe:	72 e0       	ldi	r23, 0x02	; 2
     ec0:	c8 01       	movw	r24, r16
     ec2:	0e 94 79 3d 	call	0x7af2	; 0x7af2 <_ZN6String6concatEPKc>
	String & operator += (char c)			{concat(c); return (*this);}
	String & operator += (unsigned char num)		{concat(num); return (*this);}
	String & operator += (int num)			{concat(num); return (*this);}
	String & operator += (unsigned int num)		{concat(num); return (*this);}
     ec6:	6f 2d       	mov	r22, r15
     ec8:	70 e0       	ldi	r23, 0x00	; 0
     eca:	60 53       	subi	r22, 0x30	; 48
     ecc:	78 4f       	sbci	r23, 0xF8	; 248
     ece:	c8 01       	movw	r24, r16
     ed0:	0e 94 de 3d 	call	0x7bbc	; 0x7bbc <_ZN6String6concatEj>
	{
		tempDataString += 0;
	}
	tempDataString += dt.year();
	return tempDataString;
}
     ed4:	c8 01       	movw	r24, r16
     ed6:	26 96       	adiw	r28, 0x06	; 6
     ed8:	0f b6       	in	r0, 0x3f	; 63
     eda:	f8 94       	cli
     edc:	de bf       	out	0x3e, r29	; 62
     ede:	0f be       	out	0x3f, r0	; 63
     ee0:	cd bf       	out	0x3d, r28	; 61
     ee2:	df 91       	pop	r29
     ee4:	cf 91       	pop	r28
     ee6:	1f 91       	pop	r17
     ee8:	0f 91       	pop	r16
     eea:	ff 90       	pop	r15
     eec:	ef 90       	pop	r14
     eee:	df 90       	pop	r13
     ef0:	08 95       	ret

00000ef2 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // These must be defined by the subclass

  /*! @brief Whether we should automatically change the range (if possible) for
     higher precision
      @param enabled True if we will try to autorange */
  virtual void enableAutoRange(bool enabled) {
     ef2:	08 95       	ret

00000ef4 <_Z13GetSensorTempv>:
#include "OwnDHT11.h"

extern DHT_Unified dht;

String GetSensorTemp()// Retrieves the temperature from the DT11 sensor.
{
     ef4:	cf 92       	push	r12
     ef6:	df 92       	push	r13
     ef8:	ef 92       	push	r14
     efa:	ff 92       	push	r15
     efc:	0f 93       	push	r16
     efe:	1f 93       	push	r17
     f00:	cf 93       	push	r28
     f02:	df 93       	push	r29
     f04:	cd b7       	in	r28, 0x3d	; 61
     f06:	de b7       	in	r29, 0x3e	; 62
     f08:	ad 97       	sbiw	r28, 0x2d	; 45
     f0a:	0f b6       	in	r0, 0x3f	; 63
     f0c:	f8 94       	cli
     f0e:	de bf       	out	0x3e, r29	; 62
     f10:	0f be       	out	0x3f, r0	; 63
     f12:	cd bf       	out	0x3d, r28	; 61
     f14:	8c 01       	movw	r16, r24
	sensors_event_t event;
	String temprature = "";
     f16:	6c eb       	ldi	r22, 0xBC	; 188
     f18:	72 e0       	ldi	r23, 0x02	; 2
     f1a:	0e 94 3a 3c 	call	0x7874	; 0x7874 <_ZN6StringC1EPKc>

/** @brief Common sensor interface to unify various sensors.
 * Intentionally modeled after sensors.h in the Android API:
 * https://github.com/android/platform_hardware_libhardware/blob/master/include/hardware/sensors.h
 */
class Adafruit_Sensor {
     f1e:	80 91 00 05 	lds	r24, 0x0500	; 0x800500 <dht+0x16>
     f22:	8f a3       	std	Y+39, r24	; 0x27
  void begin();

  /*!
   *  @brief  Class that stores state and functions about Temperature
   */
  class Temperature : public Adafruit_Sensor {
     f24:	87 e9       	ldi	r24, 0x97	; 151
     f26:	93 e0       	ldi	r25, 0x03	; 3
     f28:	9e a3       	std	Y+38, r25	; 0x26
     f2a:	8d a3       	std	Y+37, r24	; 0x25
     f2c:	80 91 01 05 	lds	r24, 0x0501	; 0x800501 <dht+0x17>
     f30:	90 91 02 05 	lds	r25, 0x0502	; 0x800502 <dht+0x18>
     f34:	99 a7       	std	Y+41, r25	; 0x29
     f36:	88 a7       	std	Y+40, r24	; 0x28
     f38:	80 91 03 05 	lds	r24, 0x0503	; 0x800503 <dht+0x19>
     f3c:	90 91 04 05 	lds	r25, 0x0504	; 0x800504 <dht+0x1a>
     f40:	a0 91 05 05 	lds	r26, 0x0505	; 0x800505 <dht+0x1b>
     f44:	b0 91 06 05 	lds	r27, 0x0506	; 0x800506 <dht+0x1c>
     f48:	8a a7       	std	Y+42, r24	; 0x2a
     f4a:	9b a7       	std	Y+43, r25	; 0x2b
     f4c:	ac a7       	std	Y+44, r26	; 0x2c
     f4e:	bd a7       	std	Y+45, r27	; 0x2d
	dht.temperature().getEvent(&event);
     f50:	be 01       	movw	r22, r28
     f52:	6f 5f       	subi	r22, 0xFF	; 255
     f54:	7f 4f       	sbci	r23, 0xFF	; 255
     f56:	ce 01       	movw	r24, r28
     f58:	85 96       	adiw	r24, 0x25	; 37
     f5a:	0e 94 89 1e 	call	0x3d12	; 0x3d12 <_ZN11DHT_Unified11Temperature8getEventEP15sensors_event_t>
	if (isnan(event.temperature))
     f5e:	cd 88       	ldd	r12, Y+21	; 0x15
     f60:	de 88       	ldd	r13, Y+22	; 0x16
     f62:	ef 88       	ldd	r14, Y+23	; 0x17
     f64:	f8 8c       	ldd	r15, Y+24	; 0x18
     f66:	a7 01       	movw	r20, r14
     f68:	96 01       	movw	r18, r12
     f6a:	c7 01       	movw	r24, r14
     f6c:	b6 01       	movw	r22, r12
     f6e:	0e 94 81 34 	call	0x6902	; 0x6902 <__unordsf2>
     f72:	88 23       	and	r24, r24
     f74:	31 f0       	breq	.+12     	; 0xf82 <_Z13GetSensorTempv+0x8e>
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
	String & operator += (unsigned char num)		{concat(num); return (*this);}
	String & operator += (int num)			{concat(num); return (*this);}
     f76:	69 e1       	ldi	r22, 0x19	; 25
     f78:	7c ef       	ldi	r23, 0xFC	; 252
     f7a:	c8 01       	movw	r24, r16
     f7c:	0e 94 b0 3d 	call	0x7b60	; 0x7b60 <_ZN6String6concatEi>
     f80:	11 c0       	rjmp	.+34     	; 0xfa4 <_Z13GetSensorTempv+0xb0>
	{
		temprature += -999;
	}
	else
	{
		temprature += String(event.temperature);
     f82:	22 e0       	ldi	r18, 0x02	; 2
     f84:	b7 01       	movw	r22, r14
     f86:	a6 01       	movw	r20, r12
     f88:	ce 01       	movw	r24, r28
     f8a:	85 96       	adiw	r24, 0x25	; 37
     f8c:	0e 94 19 3d 	call	0x7a32	; 0x7a32 <_ZN6StringC1Efh>
	unsigned char concat(double num);
	unsigned char concat(const __FlashStringHelper * str);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
     f90:	be 01       	movw	r22, r28
     f92:	6b 5d       	subi	r22, 0xDB	; 219
     f94:	7f 4f       	sbci	r23, 0xFF	; 255
     f96:	c8 01       	movw	r24, r16
     f98:	0e 94 73 3d 	call	0x7ae6	; 0x7ae6 <_ZN6String6concatERKS_>
     f9c:	ce 01       	movw	r24, r28
     f9e:	85 96       	adiw	r24, 0x25	; 37
     fa0:	0e 94 d0 3b 	call	0x77a0	; 0x77a0 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
     fa4:	6c e7       	ldi	r22, 0x7C	; 124
     fa6:	72 e0       	ldi	r23, 0x02	; 2
     fa8:	c8 01       	movw	r24, r16
     faa:	0e 94 79 3d 	call	0x7af2	; 0x7af2 <_ZN6String6concatEPKc>
	}
	temprature += " C";
	return temprature;
}
     fae:	c8 01       	movw	r24, r16
     fb0:	ad 96       	adiw	r28, 0x2d	; 45
     fb2:	0f b6       	in	r0, 0x3f	; 63
     fb4:	f8 94       	cli
     fb6:	de bf       	out	0x3e, r29	; 62
     fb8:	0f be       	out	0x3f, r0	; 63
     fba:	cd bf       	out	0x3d, r28	; 61
     fbc:	df 91       	pop	r29
     fbe:	cf 91       	pop	r28
     fc0:	1f 91       	pop	r17
     fc2:	0f 91       	pop	r16
     fc4:	ff 90       	pop	r15
     fc6:	ef 90       	pop	r14
     fc8:	df 90       	pop	r13
     fca:	cf 90       	pop	r12
     fcc:	08 95       	ret

00000fce <_Z14GetSensorHumidv>:
String GetSensorHumid()// Retrieves the humidity from the DT11 sensor.
{
     fce:	cf 92       	push	r12
     fd0:	df 92       	push	r13
     fd2:	ef 92       	push	r14
     fd4:	ff 92       	push	r15
     fd6:	0f 93       	push	r16
     fd8:	1f 93       	push	r17
     fda:	cf 93       	push	r28
     fdc:	df 93       	push	r29
     fde:	cd b7       	in	r28, 0x3d	; 61
     fe0:	de b7       	in	r29, 0x3e	; 62
     fe2:	ad 97       	sbiw	r28, 0x2d	; 45
     fe4:	0f b6       	in	r0, 0x3f	; 63
     fe6:	f8 94       	cli
     fe8:	de bf       	out	0x3e, r29	; 62
     fea:	0f be       	out	0x3f, r0	; 63
     fec:	cd bf       	out	0x3d, r28	; 61
     fee:	8c 01       	movw	r16, r24
	sensors_event_t event;
	String humid = "";
     ff0:	6c eb       	ldi	r22, 0xBC	; 188
     ff2:	72 e0       	ldi	r23, 0x02	; 2
     ff4:	0e 94 3a 3c 	call	0x7874	; 0x7874 <_ZN6StringC1EPKc>
     ff8:	80 91 09 05 	lds	r24, 0x0509	; 0x800509 <dht+0x1f>
     ffc:	8f a3       	std	Y+39, r24	; 0x27
  };

  /*!
   *  @brief  Class that stores state and functions about Humidity
   */
  class Humidity : public Adafruit_Sensor {
     ffe:	85 ea       	ldi	r24, 0xA5	; 165
    1000:	93 e0       	ldi	r25, 0x03	; 3
    1002:	9e a3       	std	Y+38, r25	; 0x26
    1004:	8d a3       	std	Y+37, r24	; 0x25
    1006:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <dht+0x20>
    100a:	90 91 0b 05 	lds	r25, 0x050B	; 0x80050b <dht+0x21>
    100e:	99 a7       	std	Y+41, r25	; 0x29
    1010:	88 a7       	std	Y+40, r24	; 0x28
    1012:	80 91 0c 05 	lds	r24, 0x050C	; 0x80050c <dht+0x22>
    1016:	90 91 0d 05 	lds	r25, 0x050D	; 0x80050d <dht+0x23>
    101a:	a0 91 0e 05 	lds	r26, 0x050E	; 0x80050e <dht+0x24>
    101e:	b0 91 0f 05 	lds	r27, 0x050F	; 0x80050f <dht+0x25>
    1022:	8a a7       	std	Y+42, r24	; 0x2a
    1024:	9b a7       	std	Y+43, r25	; 0x2b
    1026:	ac a7       	std	Y+44, r26	; 0x2c
    1028:	bd a7       	std	Y+45, r27	; 0x2d
	dht.humidity().getEvent(&event);
    102a:	be 01       	movw	r22, r28
    102c:	6f 5f       	subi	r22, 0xFF	; 255
    102e:	7f 4f       	sbci	r23, 0xFF	; 255
    1030:	ce 01       	movw	r24, r28
    1032:	85 96       	adiw	r24, 0x25	; 37
    1034:	0e 94 c3 1e 	call	0x3d86	; 0x3d86 <_ZN11DHT_Unified8Humidity8getEventEP15sensors_event_t>
	if (isnan(event.temperature))
    1038:	cd 88       	ldd	r12, Y+21	; 0x15
    103a:	de 88       	ldd	r13, Y+22	; 0x16
    103c:	ef 88       	ldd	r14, Y+23	; 0x17
    103e:	f8 8c       	ldd	r15, Y+24	; 0x18
    1040:	a7 01       	movw	r20, r14
    1042:	96 01       	movw	r18, r12
    1044:	c7 01       	movw	r24, r14
    1046:	b6 01       	movw	r22, r12
    1048:	0e 94 81 34 	call	0x6902	; 0x6902 <__unordsf2>
    104c:	88 23       	and	r24, r24
    104e:	31 f0       	breq	.+12     	; 0x105c <__EEPROM_REGION_LENGTH__+0x5c>
	String & operator += (char c)			{concat(c); return (*this);}
	String & operator += (unsigned char num)		{concat(num); return (*this);}
	String & operator += (int num)			{concat(num); return (*this);}
    1050:	69 e1       	ldi	r22, 0x19	; 25
    1052:	7c ef       	ldi	r23, 0xFC	; 252
    1054:	c8 01       	movw	r24, r16
    1056:	0e 94 b0 3d 	call	0x7b60	; 0x7b60 <_ZN6String6concatEi>
    105a:	11 c0       	rjmp	.+34     	; 0x107e <__EEPROM_REGION_LENGTH__+0x7e>
	{
		humid += -999;
	}
	else
	{
		humid += String(event.relative_humidity);
    105c:	22 e0       	ldi	r18, 0x02	; 2
    105e:	b7 01       	movw	r22, r14
    1060:	a6 01       	movw	r20, r12
    1062:	ce 01       	movw	r24, r28
    1064:	85 96       	adiw	r24, 0x25	; 37
    1066:	0e 94 19 3d 	call	0x7a32	; 0x7a32 <_ZN6StringC1Efh>
	unsigned char concat(double num);
	unsigned char concat(const __FlashStringHelper * str);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    106a:	be 01       	movw	r22, r28
    106c:	6b 5d       	subi	r22, 0xDB	; 219
    106e:	7f 4f       	sbci	r23, 0xFF	; 255
    1070:	c8 01       	movw	r24, r16
    1072:	0e 94 73 3d 	call	0x7ae6	; 0x7ae6 <_ZN6String6concatERKS_>
    1076:	ce 01       	movw	r24, r28
    1078:	85 96       	adiw	r24, 0x25	; 37
    107a:	0e 94 d0 3b 	call	0x77a0	; 0x77a0 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
    107e:	6f e7       	ldi	r22, 0x7F	; 127
    1080:	72 e0       	ldi	r23, 0x02	; 2
    1082:	c8 01       	movw	r24, r16
    1084:	0e 94 79 3d 	call	0x7af2	; 0x7af2 <_ZN6String6concatEPKc>
	}
	humid += " %";
	return humid;
}
    1088:	c8 01       	movw	r24, r16
    108a:	ad 96       	adiw	r28, 0x2d	; 45
    108c:	0f b6       	in	r0, 0x3f	; 63
    108e:	f8 94       	cli
    1090:	de bf       	out	0x3e, r29	; 62
    1092:	0f be       	out	0x3f, r0	; 63
    1094:	cd bf       	out	0x3d, r28	; 61
    1096:	df 91       	pop	r29
    1098:	cf 91       	pop	r28
    109a:	1f 91       	pop	r17
    109c:	0f 91       	pop	r16
    109e:	ff 90       	pop	r15
    10a0:	ef 90       	pop	r14
    10a2:	df 90       	pop	r13
    10a4:	cf 90       	pop	r12
    10a6:	08 95       	ret

000010a8 <_Z20WriteToLiquidCrystal6Stringii>:
#include "DisplayOnLC.h""

extern LiquidCrystal lcd;

void WriteToLiquidCrystal(String _input, int _line, int _position)//What and where something should be written to the Crystal display
{
    10a8:	cf 93       	push	r28
    10aa:	df 93       	push	r29
    10ac:	ec 01       	movw	r28, r24
    10ae:	84 2f       	mov	r24, r20
	lcd.setCursor(_position, _line);
    10b0:	46 2f       	mov	r20, r22
    10b2:	68 2f       	mov	r22, r24
    10b4:	88 ec       	ldi	r24, 0xC8	; 200
    10b6:	94 e0       	ldi	r25, 0x04	; 4
    10b8:	0e 94 d9 24 	call	0x49b2	; 0x49b2 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print(_input);
    10bc:	be 01       	movw	r22, r28
    10be:	88 ec       	ldi	r24, 0xC8	; 200
    10c0:	94 e0       	ldi	r25, 0x04	; 4
}
    10c2:	df 91       	pop	r29
    10c4:	cf 91       	pop	r28
extern LiquidCrystal lcd;

void WriteToLiquidCrystal(String _input, int _line, int _position)//What and where something should be written to the Crystal display
{
	lcd.setCursor(_position, _line);
	lcd.print(_input);
    10c6:	0c 94 c3 36 	jmp	0x6d86	; 0x6d86 <_ZN5Print5printERK6String>

000010ca <_Z10ReadKeypadv>:
		return key;
	}
}
void keypadStringReset()// Resets what is in the global KeypadString
{
	keypadString = "";
    10ca:	8a ef       	ldi	r24, 0xFA	; 250
    10cc:	93 e0       	ldi	r25, 0x03	; 3
    10ce:	0e 94 17 24 	call	0x482e	; 0x482e <_ZN6Keypad6getKeyEv>
    10d2:	81 11       	cpse	r24, r1
    10d4:	00 c0       	rjmp	.+0      	; 0x10d6 <_Z10ReadKeypadv+0xc>
    10d6:	08 95       	ret

000010d8 <_GLOBAL__sub_I_keys>:
}
    10d8:	ef 92       	push	r14
    10da:	0f 93       	push	r16
	{'7','8','9','C'},
	{'*','0','#','D'}
};
byte rowPins[rows] = {37,36,35,34};
byte colPins[cols] = {33,32,31,30};
Keypad keypad = Keypad( makeKeymap(keys), rowPins, colPins, rows, cols );
    10dc:	84 e0       	ldi	r24, 0x04	; 4
    10de:	e8 2e       	mov	r14, r24
    10e0:	04 e0       	ldi	r16, 0x04	; 4
    10e2:	26 e0       	ldi	r18, 0x06	; 6
    10e4:	32 e0       	ldi	r19, 0x02	; 2
    10e6:	4a e0       	ldi	r20, 0x0A	; 10
    10e8:	52 e0       	ldi	r21, 0x02	; 2
    10ea:	6e e0       	ldi	r22, 0x0E	; 14
    10ec:	72 e0       	ldi	r23, 0x02	; 2
    10ee:	8a ef       	ldi	r24, 0xFA	; 250
    10f0:	93 e0       	ldi	r25, 0x03	; 3
    10f2:	0e 94 37 21 	call	0x426e	; 0x426e <_ZN6KeypadC1EPcPhS1_hh>
String keypadString = "";
    10f6:	6c eb       	ldi	r22, 0xBC	; 188
    10f8:	72 e0       	ldi	r23, 0x02	; 2
    10fa:	84 ef       	ldi	r24, 0xF4	; 244
    10fc:	93 e0       	ldi	r25, 0x03	; 3
	}
}
void keypadStringReset()// Resets what is in the global KeypadString
{
	keypadString = "";
}
    10fe:	0f 91       	pop	r16
    1100:	ef 90       	pop	r14
	{'*','0','#','D'}
};
byte rowPins[rows] = {37,36,35,34};
byte colPins[cols] = {33,32,31,30};
Keypad keypad = Keypad( makeKeymap(keys), rowPins, colPins, rows, cols );
String keypadString = "";
    1102:	0c 94 3a 3c 	jmp	0x7874	; 0x7874 <_ZN6StringC1EPKc>

00001106 <_GLOBAL__sub_D_keys>:
    1106:	84 ef       	ldi	r24, 0xF4	; 244
    1108:	93 e0       	ldi	r25, 0x03	; 3
    110a:	0c 94 d0 3b 	jmp	0x77a0	; 0x77a0 <_ZN6StringD1Ev>

0000110e <_Z15ButtonInterruptv>:
{
	WriteToOLED(GetSensorHumid(),60,50);
}
void ButtonInterrupt()// Interrupt Door Lock
{ 
	if (digitalRead(BUTTONPIN) == LOW && !doorState)
    110e:	83 e1       	ldi	r24, 0x13	; 19
    1110:	0e 94 68 3b 	call	0x76d0	; 0x76d0 <digitalRead>
    1114:	89 2b       	or	r24, r25
    1116:	51 f4       	brne	.+20     	; 0x112c <_Z15ButtonInterruptv+0x1e>
    1118:	80 91 e8 04 	lds	r24, 0x04E8	; 0x8004e8 <doorState>
    111c:	81 11       	cpse	r24, r1
    111e:	06 c0       	rjmp	.+12     	; 0x112c <_Z15ButtonInterruptv+0x1e>
	{
		doorLocked = !doorLocked;
    1120:	90 91 e9 04 	lds	r25, 0x04E9	; 0x8004e9 <doorLocked>
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	89 27       	eor	r24, r25
    1128:	80 93 e9 04 	sts	0x04E9, r24	; 0x8004e9 <doorLocked>
    112c:	08 95       	ret

0000112e <setup>:

#pragma endregion 


void setup() 
{
    112e:	0f 93       	push	r16
    1130:	cf 93       	push	r28
    1132:	df 93       	push	r29
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    1134:	26 e0       	ldi	r18, 0x06	; 6
    1136:	40 e8       	ldi	r20, 0x80	; 128
    1138:	55 e2       	ldi	r21, 0x25	; 37
    113a:	60 e0       	ldi	r22, 0x00	; 0
    113c:	70 e0       	ldi	r23, 0x00	; 0
    113e:	83 e9       	ldi	r24, 0x93	; 147
    1140:	96 e0       	ldi	r25, 0x06	; 6
    1142:	0e 94 8f 35 	call	0x6b1e	; 0x6b1e <_ZN14HardwareSerial5beginEmh>
    1146:	c5 e2       	ldi	r28, 0x25	; 37
    1148:	d2 e0       	ldi	r29, 0x02	; 2
	Serial.begin(9600);
	//LED lights
	for (int i = 0; i < sizeof(allLEDs);i++)
    114a:	82 e0       	ldi	r24, 0x02	; 2
    114c:	c1 34       	cpi	r28, 0x41	; 65
    114e:	d8 07       	cpc	r29, r24
    1150:	31 f0       	breq	.+12     	; 0x115e <setup+0x30>
	{
		pinMode(allLEDs[i],OUTPUT);
    1152:	88 81       	ld	r24, Y
    1154:	22 96       	adiw	r28, 0x02	; 2
    1156:	61 e0       	ldi	r22, 0x01	; 1
    1158:	0e 94 fe 3a 	call	0x75fc	; 0x75fc <pinMode>

void setup() 
{
	Serial.begin(9600);
	//LED lights
	for (int i = 0; i < sizeof(allLEDs);i++)
    115c:	f6 cf       	rjmp	.-20     	; 0x114a <setup+0x1c>
	{
		pinMode(allLEDs[i],OUTPUT);
	}
	//LCD Crystal display.
	lcd.begin(16,2);
    115e:	20 e0       	ldi	r18, 0x00	; 0
    1160:	42 e0       	ldi	r20, 0x02	; 2
    1162:	60 e1       	ldi	r22, 0x10	; 16
    1164:	88 ec       	ldi	r24, 0xC8	; 200
    1166:	94 e0       	ldi	r25, 0x04	; 4
    1168:	0e 94 f2 24 	call	0x49e4	; 0x49e4 <_ZN13LiquidCrystal5beginEhhh>
	lcd.createChar(0,customOpenDoor);
    116c:	4b e5       	ldi	r20, 0x5B	; 91
    116e:	52 e0       	ldi	r21, 0x02	; 2
    1170:	60 e0       	ldi	r22, 0x00	; 0
    1172:	88 ec       	ldi	r24, 0xC8	; 200
    1174:	94 e0       	ldi	r25, 0x04	; 4
    1176:	0e 94 ab 25 	call	0x4b56	; 0x4b56 <_ZN13LiquidCrystal10createCharEhPh>
	lcd.createChar(1,customClosedDoor);
    117a:	43 e5       	ldi	r20, 0x53	; 83
    117c:	52 e0       	ldi	r21, 0x02	; 2
    117e:	61 e0       	ldi	r22, 0x01	; 1
    1180:	88 ec       	ldi	r24, 0xC8	; 200
    1182:	94 e0       	ldi	r25, 0x04	; 4
    1184:	0e 94 ab 25 	call	0x4b56	; 0x4b56 <_ZN13LiquidCrystal10createCharEhPh>
	lcd.createChar(2,customCharSpin1);
    1188:	4b e4       	ldi	r20, 0x4B	; 75
    118a:	52 e0       	ldi	r21, 0x02	; 2
    118c:	62 e0       	ldi	r22, 0x02	; 2
    118e:	88 ec       	ldi	r24, 0xC8	; 200
    1190:	94 e0       	ldi	r25, 0x04	; 4
    1192:	0e 94 ab 25 	call	0x4b56	; 0x4b56 <_ZN13LiquidCrystal10createCharEhPh>
	lcd.createChar(3,customCharSpin2);
    1196:	43 e4       	ldi	r20, 0x43	; 67
    1198:	52 e0       	ldi	r21, 0x02	; 2
    119a:	63 e0       	ldi	r22, 0x03	; 3
    119c:	88 ec       	ldi	r24, 0xC8	; 200
    119e:	94 e0       	ldi	r25, 0x04	; 4
    11a0:	0e 94 ab 25 	call	0x4b56	; 0x4b56 <_ZN13LiquidCrystal10createCharEhPh>
	lcd.createChar(4,customCharSpin3);
    11a4:	4b e3       	ldi	r20, 0x3B	; 59
    11a6:	52 e0       	ldi	r21, 0x02	; 2
    11a8:	64 e0       	ldi	r22, 0x04	; 4
    11aa:	88 ec       	ldi	r24, 0xC8	; 200
    11ac:	94 e0       	ldi	r25, 0x04	; 4
    11ae:	0e 94 ab 25 	call	0x4b56	; 0x4b56 <_ZN13LiquidCrystal10createCharEhPh>
	lcd.createChar(5,customCharSpin4);
    11b2:	43 e3       	ldi	r20, 0x33	; 51
    11b4:	52 e0       	ldi	r21, 0x02	; 2
    11b6:	65 e0       	ldi	r22, 0x05	; 5
    11b8:	88 ec       	ldi	r24, 0xC8	; 200
    11ba:	94 e0       	ldi	r25, 0x04	; 4
    11bc:	0e 94 ab 25 	call	0x4b56	; 0x4b56 <_ZN13LiquidCrystal10createCharEhPh>
	//PutMeter
	pinMode(PUTMETER,INPUT);
    11c0:	60 e0       	ldi	r22, 0x00	; 0
    11c2:	86 e3       	ldi	r24, 0x36	; 54
    11c4:	0e 94 fe 3a 	call	0x75fc	; 0x75fc <pinMode>
	//Servo
	pinMode(ServoControl,OUTPUT);
    11c8:	61 e0       	ldi	r22, 0x01	; 1
    11ca:	8c e2       	ldi	r24, 0x2C	; 44
    11cc:	0e 94 fe 3a 	call	0x75fc	; 0x75fc <pinMode>
	myservo.attach(ServoControl);
    11d0:	6c e2       	ldi	r22, 0x2C	; 44
    11d2:	70 e0       	ldi	r23, 0x00	; 0
    11d4:	80 ee       	ldi	r24, 0xE0	; 224
    11d6:	94 e0       	ldi	r25, 0x04	; 4
    11d8:	0e 94 e8 2c 	call	0x59d0	; 0x59d0 <_ZN5Servo6attachEi>
	//I2C OLED and Clock
	Wire.begin();
    11dc:	8d e3       	ldi	r24, 0x3D	; 61
    11de:	96 e0       	ldi	r25, 0x06	; 6
    11e0:	0e 94 71 32 	call	0x64e2	; 0x64e2 <_ZN7TwoWire5beginEv>
	//OLED
	display.begin(SSD1306_SWITCHCAPVCC,0x3C);
    11e4:	01 e0       	ldi	r16, 0x01	; 1
    11e6:	21 e0       	ldi	r18, 0x01	; 1
    11e8:	4c e3       	ldi	r20, 0x3C	; 60
    11ea:	62 e0       	ldi	r22, 0x02	; 2
    11ec:	86 e6       	ldi	r24, 0x66	; 102
    11ee:	94 e0       	ldi	r25, 0x04	; 4
    11f0:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <_ZN16Adafruit_SSD13065beginEhhbb>
	//DHT11 weather control
	dht.begin();
    11f4:	8a ee       	ldi	r24, 0xEA	; 234
    11f6:	94 e0       	ldi	r25, 0x04	; 4
    11f8:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <_ZN11DHT_Unified5beginEv>
	//RFC scanner
	SPI.begin();
    11fc:	0e 94 7e 2d 	call	0x5afc	; 0x5afc <_ZN8SPIClass5beginEv>
	mfrc522.PCD_Init();
    1200:	86 eb       	ldi	r24, 0xB6	; 182
    1202:	94 e0       	ldi	r25, 0x04	; 4
    1204:	0e 94 5b 27 	call	0x4eb6	; 0x4eb6 <_ZN7MFRC5228PCD_InitEv>
	// Key creation
	for (byte i = 0; i < 6; i++)
	{
		key.keyByte[i] = 0xFF;
    1208:	8f ef       	ldi	r24, 0xFF	; 255
    120a:	80 93 aa 04 	sts	0x04AA, r24	; 0x8004aa <key>
    120e:	80 93 ab 04 	sts	0x04AB, r24	; 0x8004ab <key+0x1>
    1212:	80 93 ac 04 	sts	0x04AC, r24	; 0x8004ac <key+0x2>
    1216:	80 93 ad 04 	sts	0x04AD, r24	; 0x8004ad <key+0x3>
    121a:	80 93 ae 04 	sts	0x04AE, r24	; 0x8004ae <key+0x4>
    121e:	80 93 af 04 	sts	0x04AF, r24	; 0x8004af <key+0x5>
	}
	//Button(Interrupt)
	pinMode(BUTTONPIN,INPUT_PULLUP);
    1222:	62 e0       	ldi	r22, 0x02	; 2
    1224:	83 e1       	ldi	r24, 0x13	; 19
    1226:	0e 94 fe 3a 	call	0x75fc	; 0x75fc <pinMode>
	//Interrupt function
	attachInterrupt(digitalPinToInterrupt(BUTTONPIN),ButtonInterrupt,CHANGE);
    122a:	41 e0       	ldi	r20, 0x01	; 1
    122c:	50 e0       	ldi	r21, 0x00	; 0
    122e:	67 e8       	ldi	r22, 0x87	; 135
    1230:	78 e0       	ldi	r23, 0x08	; 8
    1232:	84 e0       	ldi	r24, 0x04	; 4
}
    1234:	df 91       	pop	r29
    1236:	cf 91       	pop	r28
    1238:	0f 91       	pop	r16
		key.keyByte[i] = 0xFF;
	}
	//Button(Interrupt)
	pinMode(BUTTONPIN,INPUT_PULLUP);
	//Interrupt function
	attachInterrupt(digitalPinToInterrupt(BUTTONPIN),ButtonInterrupt,CHANGE);
    123a:	0c 94 d2 36 	jmp	0x6da4	; 0x6da4 <attachInterrupt>

0000123e <_Z8OpenDoorv>:
		lastDoorState = millis();
	}
}
void OpenDoor()//Opens the door
{
	doorState = true;
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	80 93 e8 04 	sts	0x04E8, r24	; 0x8004e8 <doorState>
	lastDoorState = millis();
    1244:	0e 94 e7 38 	call	0x71ce	; 0x71ce <millis>
    1248:	60 93 e3 04 	sts	0x04E3, r22	; 0x8004e3 <lastDoorState>
    124c:	70 93 e4 04 	sts	0x04E4, r23	; 0x8004e4 <lastDoorState+0x1>
    1250:	80 93 e5 04 	sts	0x04E5, r24	; 0x8004e5 <lastDoorState+0x2>
    1254:	90 93 e6 04 	sts	0x04E6, r25	; 0x8004e6 <lastDoorState+0x3>
    1258:	08 95       	ret

0000125a <_Z9CloseDoorv>:
}
void CloseDoor()//Closes the door
{	
    125a:	0f 93       	push	r16
    125c:	1f 93       	push	r17
	if (millis() >= lastDoorState + doorDelay && doorState )
    125e:	0e 94 e7 38 	call	0x71ce	; 0x71ce <millis>
    1262:	00 91 e3 04 	lds	r16, 0x04E3	; 0x8004e3 <lastDoorState>
    1266:	10 91 e4 04 	lds	r17, 0x04E4	; 0x8004e4 <lastDoorState+0x1>
    126a:	20 91 e5 04 	lds	r18, 0x04E5	; 0x8004e5 <lastDoorState+0x2>
    126e:	30 91 e6 04 	lds	r19, 0x04E6	; 0x8004e6 <lastDoorState+0x3>
    1272:	08 57       	subi	r16, 0x78	; 120
    1274:	1c 4e       	sbci	r17, 0xEC	; 236
    1276:	2f 4f       	sbci	r18, 0xFF	; 255
    1278:	3f 4f       	sbci	r19, 0xFF	; 255
    127a:	60 17       	cp	r22, r16
    127c:	71 07       	cpc	r23, r17
    127e:	82 07       	cpc	r24, r18
    1280:	93 07       	cpc	r25, r19
    1282:	48 f0       	brcs	.+18     	; 0x1296 <_Z9CloseDoorv+0x3c>
    1284:	80 91 e8 04 	lds	r24, 0x04E8	; 0x8004e8 <doorState>
    1288:	88 23       	and	r24, r24
    128a:	29 f0       	breq	.+10     	; 0x1296 <_Z9CloseDoorv+0x3c>
	{
		doorState = false;
    128c:	10 92 e8 04 	sts	0x04E8, r1	; 0x8004e8 <doorState>
		isDoorClosed = true;
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	80 93 e7 04 	sts	0x04E7, r24	; 0x8004e7 <isDoorClosed>
	}
}
    1296:	1f 91       	pop	r17
    1298:	0f 91       	pop	r16
    129a:	08 95       	ret

0000129c <_Z13OpenCloseDoorv>:
	
	
	display.display(); // displays everything that should be displayed.
}
void OpenCloseDoor()// Door Control
{
    129c:	0f 93       	push	r16
    129e:	1f 93       	push	r17
    12a0:	cf 93       	push	r28
    12a2:	df 93       	push	r29
    12a4:	00 d0       	rcall	.+0      	; 0x12a6 <_Z13OpenCloseDoorv+0xa>
    12a6:	00 d0       	rcall	.+0      	; 0x12a8 <_Z13OpenCloseDoorv+0xc>
    12a8:	cd b7       	in	r28, 0x3d	; 61
    12aa:	de b7       	in	r29, 0x3e	; 62
	if (CardReader() == AprovedCard && !doorLocked)
    12ac:	ce 01       	movw	r24, r28
    12ae:	01 96       	adiw	r24, 0x01	; 1
    12b0:	1a d5       	rcall	.+2612   	; 0x1ce6 <_Z10CardReaderv>
	// comparison (only works w/ Strings and "strings")
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
    12b2:	60 eb       	ldi	r22, 0xB0	; 176
    12b4:	74 e0       	ldi	r23, 0x04	; 4
    12b6:	ce 01       	movw	r24, r28
    12b8:	01 96       	adiw	r24, 0x01	; 1
    12ba:	0e 94 3b 3e 	call	0x7c76	; 0x7c76 <_ZNK6String6equalsERKS_>
    12be:	88 23       	and	r24, r24
    12c0:	29 f0       	breq	.+10     	; 0x12cc <_Z13OpenCloseDoorv+0x30>
    12c2:	10 91 e9 04 	lds	r17, 0x04E9	; 0x8004e9 <doorLocked>
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	18 27       	eor	r17, r24
    12ca:	01 c0       	rjmp	.+2      	; 0x12ce <_Z13OpenCloseDoorv+0x32>
    12cc:	10 e0       	ldi	r17, 0x00	; 0
    12ce:	ce 01       	movw	r24, r28
    12d0:	01 96       	adiw	r24, 0x01	; 1
    12d2:	0e 94 d0 3b 	call	0x77a0	; 0x77a0 <_ZN6StringD1Ev>
	{
		OpenDoor();	
    12d6:	11 11       	cpse	r17, r1
    12d8:	b2 df       	rcall	.-156    	; 0x123e <_Z8OpenDoorv>
	}
	if (!isDoorClosed)
    12da:	80 91 e7 04 	lds	r24, 0x04E7	; 0x8004e7 <isDoorClosed>
    12de:	81 11       	cpse	r24, r1
	{
		CloseDoor();
    12e0:	01 c0       	rjmp	.+2      	; 0x12e4 <_Z13OpenCloseDoorv+0x48>
    12e2:	bb df       	rcall	.-138    	; 0x125a <_Z9CloseDoorv>
	}
	if (doorState)
    12e4:	80 91 e8 04 	lds	r24, 0x04E8	; 0x8004e8 <doorState>
    12e8:	88 23       	and	r24, r24
    12ea:	39 f0       	breq	.+14     	; 0x12fa <_Z13OpenCloseDoorv+0x5e>
	{
		LED_Lock_Level = 0;
    12ec:	10 92 c7 04 	sts	0x04C7, r1	; 0x8004c7 <LED_Lock_Level+0x1>
    12f0:	10 92 c6 04 	sts	0x04C6, r1	; 0x8004c6 <LED_Lock_Level>
		WriteToOLED("Open",0,0);
    12f4:	62 e8       	ldi	r22, 0x82	; 130
    12f6:	72 e0       	ldi	r23, 0x02	; 2
    12f8:	0c c0       	rjmp	.+24     	; 0x1312 <_Z13OpenCloseDoorv+0x76>
	}
	else
	{
		if (!doorLocked)
    12fa:	80 91 e9 04 	lds	r24, 0x04E9	; 0x8004e9 <doorLocked>
    12fe:	81 11       	cpse	r24, r1
    1300:	06 c0       	rjmp	.+12     	; 0x130e <_Z13OpenCloseDoorv+0x72>
		{
			LED_Lock_Level = 100;
    1302:	84 e6       	ldi	r24, 0x64	; 100
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	90 93 c7 04 	sts	0x04C7, r25	; 0x8004c7 <LED_Lock_Level+0x1>
    130a:	80 93 c6 04 	sts	0x04C6, r24	; 0x8004c6 <LED_Lock_Level>
		}
		WriteToOLED("Closed",0,0);
    130e:	67 e8       	ldi	r22, 0x87	; 135
    1310:	72 e0       	ldi	r23, 0x02	; 2
    1312:	ce 01       	movw	r24, r28
    1314:	01 96       	adiw	r24, 0x01	; 1
    1316:	0e 94 3a 3c 	call	0x7874	; 0x7874 <_ZN6StringC1EPKc>
    131a:	21 e0       	ldi	r18, 0x01	; 1
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	40 e0       	ldi	r20, 0x00	; 0
    1320:	50 e0       	ldi	r21, 0x00	; 0
    1322:	60 e0       	ldi	r22, 0x00	; 0
    1324:	70 e0       	ldi	r23, 0x00	; 0
    1326:	ce 01       	movw	r24, r28
    1328:	01 96       	adiw	r24, 0x01	; 1
    132a:	cd d4       	rcall	.+2458   	; 0x1cc6 <_Z11WriteToOLED6Stringiii>
    132c:	ce 01       	movw	r24, r28
    132e:	01 96       	adiw	r24, 0x01	; 1
    1330:	0e 94 d0 3b 	call	0x77a0	; 0x77a0 <_ZN6StringD1Ev>
	}
	if (millis() >= lastDoorState + doorDelay)
    1334:	0e 94 e7 38 	call	0x71ce	; 0x71ce <millis>
    1338:	00 91 e3 04 	lds	r16, 0x04E3	; 0x8004e3 <lastDoorState>
    133c:	10 91 e4 04 	lds	r17, 0x04E4	; 0x8004e4 <lastDoorState+0x1>
    1340:	20 91 e5 04 	lds	r18, 0x04E5	; 0x8004e5 <lastDoorState+0x2>
    1344:	30 91 e6 04 	lds	r19, 0x04E6	; 0x8004e6 <lastDoorState+0x3>
    1348:	08 57       	subi	r16, 0x78	; 120
    134a:	1c 4e       	sbci	r17, 0xEC	; 236
    134c:	2f 4f       	sbci	r18, 0xFF	; 255
    134e:	3f 4f       	sbci	r19, 0xFF	; 255
    1350:	60 17       	cp	r22, r16
    1352:	71 07       	cpc	r23, r17
    1354:	82 07       	cpc	r24, r18
    1356:	93 07       	cpc	r25, r19
    1358:	60 f0       	brcs	.+24     	; 0x1372 <_Z13OpenCloseDoorv+0xd6>
	{
		isDoorClosed = false;
    135a:	10 92 e7 04 	sts	0x04E7, r1	; 0x8004e7 <isDoorClosed>
		lastDoorState = millis();
    135e:	0e 94 e7 38 	call	0x71ce	; 0x71ce <millis>
    1362:	60 93 e3 04 	sts	0x04E3, r22	; 0x8004e3 <lastDoorState>
    1366:	70 93 e4 04 	sts	0x04E4, r23	; 0x8004e4 <lastDoorState+0x1>
    136a:	80 93 e5 04 	sts	0x04E5, r24	; 0x8004e5 <lastDoorState+0x2>
    136e:	90 93 e6 04 	sts	0x04E6, r25	; 0x8004e6 <lastDoorState+0x3>
	}
}
    1372:	26 96       	adiw	r28, 0x06	; 6
    1374:	0f b6       	in	r0, 0x3f	; 63
    1376:	f8 94       	cli
    1378:	de bf       	out	0x3e, r29	; 62
    137a:	0f be       	out	0x3f, r0	; 63
    137c:	cd bf       	out	0x3d, r28	; 61
    137e:	df 91       	pop	r29
    1380:	cf 91       	pop	r28
    1382:	1f 91       	pop	r17
    1384:	0f 91       	pop	r16
    1386:	08 95       	ret

00001388 <_Z9MoveServoi>:
		isDoorClosed = true;
	}
}
void MoveServo(int angle)//Moves the Servo(door);
{
	myservo.write(angle);
    1388:	bc 01       	movw	r22, r24
    138a:	80 ee       	ldi	r24, 0xE0	; 224
    138c:	94 e0       	ldi	r25, 0x04	; 4
    138e:	0c 94 23 2d 	jmp	0x5a46	; 0x5a46 <_ZN5Servo5writeEi>

00001392 <_Z7SetTimev>:
{
	SetTemprature();
	SetHumid();
}
void SetTime()// Writes the time to the OLED display.
{
    1392:	cf 93       	push	r28
    1394:	df 93       	push	r29
    1396:	cd b7       	in	r28, 0x3d	; 61
    1398:	de b7       	in	r29, 0x3e	; 62
    139a:	2c 97       	sbiw	r28, 0x0c	; 12
    139c:	0f b6       	in	r0, 0x3f	; 63
    139e:	f8 94       	cli
    13a0:	de bf       	out	0x3e, r29	; 62
    13a2:	0f be       	out	0x3f, r0	; 63
    13a4:	cd bf       	out	0x3d, r28	; 61
	WriteToOLED(GetTimeString(ReadClock()),0,OLED_Line6);
    13a6:	f4 dc       	rcall	.-1560   	; 0xd90 <_Z9ReadClockv>
    13a8:	ce 01       	movw	r24, r28
    13aa:	07 96       	adiw	r24, 0x07	; 7
    13ac:	04 dd       	rcall	.-1528   	; 0xdb6 <_Z13GetTimeString8DateTime>
    13ae:	21 e0       	ldi	r18, 0x01	; 1
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	47 e3       	ldi	r20, 0x37	; 55
    13b4:	50 e0       	ldi	r21, 0x00	; 0
    13b6:	60 e0       	ldi	r22, 0x00	; 0
    13b8:	70 e0       	ldi	r23, 0x00	; 0
    13ba:	ce 01       	movw	r24, r28
    13bc:	07 96       	adiw	r24, 0x07	; 7
    13be:	83 d4       	rcall	.+2310   	; 0x1cc6 <_Z11WriteToOLED6Stringiii>
    13c0:	ce 01       	movw	r24, r28
    13c2:	07 96       	adiw	r24, 0x07	; 7
    13c4:	0e 94 d0 3b 	call	0x77a0	; 0x77a0 <_ZN6StringD1Ev>
}
    13c8:	2c 96       	adiw	r28, 0x0c	; 12
    13ca:	0f b6       	in	r0, 0x3f	; 63
    13cc:	f8 94       	cli
    13ce:	de bf       	out	0x3e, r29	; 62
    13d0:	0f be       	out	0x3f, r0	; 63
    13d2:	cd bf       	out	0x3d, r28	; 61
    13d4:	df 91       	pop	r29
    13d6:	cf 91       	pop	r28
    13d8:	08 95       	ret

000013da <_Z7SetDatev>:
void SetDate()// Writes the date on the OLED display.
{
    13da:	cf 93       	push	r28
    13dc:	df 93       	push	r29
    13de:	cd b7       	in	r28, 0x3d	; 61
    13e0:	de b7       	in	r29, 0x3e	; 62
    13e2:	2c 97       	sbiw	r28, 0x0c	; 12
    13e4:	0f b6       	in	r0, 0x3f	; 63
    13e6:	f8 94       	cli
    13e8:	de bf       	out	0x3e, r29	; 62
    13ea:	0f be       	out	0x3f, r0	; 63
    13ec:	cd bf       	out	0x3d, r28	; 61
	WriteToOLED(GetDataString(ReadClock()),60,OLED_Line6);
    13ee:	d0 dc       	rcall	.-1632   	; 0xd90 <_Z9ReadClockv>
    13f0:	ce 01       	movw	r24, r28
    13f2:	07 96       	adiw	r24, 0x07	; 7
    13f4:	33 dd       	rcall	.-1434   	; 0xe5c <_Z13GetDataString8DateTime>
    13f6:	21 e0       	ldi	r18, 0x01	; 1
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	47 e3       	ldi	r20, 0x37	; 55
    13fc:	50 e0       	ldi	r21, 0x00	; 0
    13fe:	6c e3       	ldi	r22, 0x3C	; 60
    1400:	70 e0       	ldi	r23, 0x00	; 0
    1402:	ce 01       	movw	r24, r28
    1404:	07 96       	adiw	r24, 0x07	; 7
    1406:	5f d4       	rcall	.+2238   	; 0x1cc6 <_Z11WriteToOLED6Stringiii>
    1408:	ce 01       	movw	r24, r28
    140a:	07 96       	adiw	r24, 0x07	; 7
    140c:	0e 94 d0 3b 	call	0x77a0	; 0x77a0 <_ZN6StringD1Ev>
}
    1410:	2c 96       	adiw	r28, 0x0c	; 12
    1412:	0f b6       	in	r0, 0x3f	; 63
    1414:	f8 94       	cli
    1416:	de bf       	out	0x3e, r29	; 62
    1418:	0f be       	out	0x3f, r0	; 63
    141a:	cd bf       	out	0x3d, r28	; 61
    141c:	df 91       	pop	r29
    141e:	cf 91       	pop	r28
    1420:	08 95       	ret

00001422 <_Z13SetTempraturev>:
void SetTemprature()// Writes the temperature on the OLED display.
{
    1422:	cf 93       	push	r28
    1424:	df 93       	push	r29
    1426:	00 d0       	rcall	.+0      	; 0x1428 <_Z13SetTempraturev+0x6>
    1428:	00 d0       	rcall	.+0      	; 0x142a <_Z13SetTempraturev+0x8>
    142a:	cd b7       	in	r28, 0x3d	; 61
    142c:	de b7       	in	r29, 0x3e	; 62
	WriteToOLED(GetSensorTemp(),0,OLED_Line6);
    142e:	ce 01       	movw	r24, r28
    1430:	01 96       	adiw	r24, 0x01	; 1
    1432:	60 dd       	rcall	.-1344   	; 0xef4 <_Z13GetSensorTempv>
    1434:	21 e0       	ldi	r18, 0x01	; 1
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	47 e3       	ldi	r20, 0x37	; 55
    143a:	50 e0       	ldi	r21, 0x00	; 0
    143c:	60 e0       	ldi	r22, 0x00	; 0
    143e:	70 e0       	ldi	r23, 0x00	; 0
    1440:	ce 01       	movw	r24, r28
    1442:	01 96       	adiw	r24, 0x01	; 1
    1444:	40 d4       	rcall	.+2176   	; 0x1cc6 <_Z11WriteToOLED6Stringiii>
    1446:	ce 01       	movw	r24, r28
    1448:	01 96       	adiw	r24, 0x01	; 1
    144a:	0e 94 d0 3b 	call	0x77a0	; 0x77a0 <_ZN6StringD1Ev>
}
    144e:	26 96       	adiw	r28, 0x06	; 6
    1450:	0f b6       	in	r0, 0x3f	; 63
    1452:	f8 94       	cli
    1454:	de bf       	out	0x3e, r29	; 62
    1456:	0f be       	out	0x3f, r0	; 63
    1458:	cd bf       	out	0x3d, r28	; 61
    145a:	df 91       	pop	r29
    145c:	cf 91       	pop	r28
    145e:	08 95       	ret

00001460 <_Z8SetHumidv>:
void SetHumid()// Writes the humidity on the OLED display.
{
    1460:	cf 93       	push	r28
    1462:	df 93       	push	r29
    1464:	00 d0       	rcall	.+0      	; 0x1466 <_Z8SetHumidv+0x6>
    1466:	00 d0       	rcall	.+0      	; 0x1468 <_Z8SetHumidv+0x8>
    1468:	cd b7       	in	r28, 0x3d	; 61
    146a:	de b7       	in	r29, 0x3e	; 62
	WriteToOLED(GetSensorHumid(),60,50);
    146c:	ce 01       	movw	r24, r28
    146e:	01 96       	adiw	r24, 0x01	; 1
    1470:	ae dd       	rcall	.-1188   	; 0xfce <_Z14GetSensorHumidv>
    1472:	21 e0       	ldi	r18, 0x01	; 1
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	42 e3       	ldi	r20, 0x32	; 50
    1478:	50 e0       	ldi	r21, 0x00	; 0
    147a:	6c e3       	ldi	r22, 0x3C	; 60
    147c:	70 e0       	ldi	r23, 0x00	; 0
    147e:	ce 01       	movw	r24, r28
    1480:	01 96       	adiw	r24, 0x01	; 1
    1482:	21 d4       	rcall	.+2114   	; 0x1cc6 <_Z11WriteToOLED6Stringiii>
    1484:	ce 01       	movw	r24, r28
    1486:	01 96       	adiw	r24, 0x01	; 1
    1488:	0e 94 d0 3b 	call	0x77a0	; 0x77a0 <_ZN6StringD1Ev>
}
    148c:	26 96       	adiw	r28, 0x06	; 6
    148e:	0f b6       	in	r0, 0x3f	; 63
    1490:	f8 94       	cli
    1492:	de bf       	out	0x3e, r29	; 62
    1494:	0f be       	out	0x3f, r0	; 63
    1496:	cd bf       	out	0x3d, r28	; 61
    1498:	df 91       	pop	r29
    149a:	cf 91       	pop	r28
    149c:	08 95       	ret

0000149e <_Z10SetWeatherv>:
		SetWeather();
	}
}
void SetWeather()// Writes the weather information on the OLED display.
{
	SetTemprature();
    149e:	c1 df       	rcall	.-126    	; 0x1422 <_Z13SetTempraturev>
	SetHumid();
    14a0:	df cf       	rjmp	.-66     	; 0x1460 <_Z8SetHumidv>

000014a2 <_Z13SetInfomationv>:
    14a2:	0f 93       	push	r16
void MoveServo(int angle)//Moves the Servo(door);
{
	myservo.write(angle);
}
void SetInfomation()//Main loop for the time display and weather display.
{
    14a4:	1f 93       	push	r17
	analogWrite(LED12,LED_Lock_Level);
    14a6:	60 91 c6 04 	lds	r22, 0x04C6	; 0x8004c6 <LED_Lock_Level>
    14aa:	70 91 c7 04 	lds	r23, 0x04C7	; 0x8004c7 <LED_Lock_Level+0x1>
    14ae:	8c e0       	ldi	r24, 0x0C	; 12
    14b0:	0e 94 e3 39 	call	0x73c6	; 0x73c6 <analogWrite>
	if (millis() >= showClockDelay + 10000)
    14b4:	0e 94 e7 38 	call	0x71ce	; 0x71ce <millis>
    14b8:	00 91 a6 04 	lds	r16, 0x04A6	; 0x8004a6 <showClockDelay>
    14bc:	10 91 a7 04 	lds	r17, 0x04A7	; 0x8004a7 <showClockDelay+0x1>
    14c0:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <showClockDelay+0x2>
    14c4:	30 91 a9 04 	lds	r19, 0x04A9	; 0x8004a9 <showClockDelay+0x3>
    14c8:	00 5f       	subi	r16, 0xF0	; 240
    14ca:	18 4d       	sbci	r17, 0xD8	; 216
    14cc:	2f 4f       	sbci	r18, 0xFF	; 255
    14ce:	3f 4f       	sbci	r19, 0xFF	; 255
    14d0:	60 17       	cp	r22, r16
    14d2:	71 07       	cpc	r23, r17
    14d4:	82 07       	cpc	r24, r18
    14d6:	93 07       	cpc	r25, r19
    14d8:	80 f0       	brcs	.+32     	; 0x14fa <_Z13SetInfomationv+0x58>
	{
		showClock = !showClock;
    14da:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <showClock>
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	89 27       	eor	r24, r25
    14e2:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <showClock>
		showClockDelay = millis();
    14e6:	0e 94 e7 38 	call	0x71ce	; 0x71ce <millis>
    14ea:	60 93 a6 04 	sts	0x04A6, r22	; 0x8004a6 <showClockDelay>
    14ee:	70 93 a7 04 	sts	0x04A7, r23	; 0x8004a7 <showClockDelay+0x1>
    14f2:	80 93 a8 04 	sts	0x04A8, r24	; 0x8004a8 <showClockDelay+0x2>
    14f6:	90 93 a9 04 	sts	0x04A9, r25	; 0x8004a9 <showClockDelay+0x3>
	}
	if (showClock)
    14fa:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <showClock>
    14fe:	88 23       	and	r24, r24
    1500:	21 f0       	breq	.+8      	; 0x150a <_Z13SetInfomationv+0x68>
	{
		SetTime();
    1502:	47 df       	rcall	.-370    	; 0x1392 <_Z7SetTimev>
	}
	else
	{
		SetWeather();
	}
}
    1504:	1f 91       	pop	r17
		showClockDelay = millis();
	}
	if (showClock)
	{
		SetTime();
		SetDate();
    1506:	0f 91       	pop	r16
    1508:	68 cf       	rjmp	.-304    	; 0x13da <_Z7SetDatev>
	}
	else
	{
		SetWeather();
	}
}
    150a:	1f 91       	pop	r17
		SetTime();
		SetDate();
	}
	else
	{
		SetWeather();
    150c:	0f 91       	pop	r16
    150e:	c7 cf       	rjmp	.-114    	; 0x149e <_Z10SetWeatherv>

00001510 <_Z10DoorLockerv>:
	{
		doorLocked = !doorLocked;
	}
}
void DoorLocker()// Locks the door
{
    1510:	cf 93       	push	r28
    1512:	df 93       	push	r29
    1514:	00 d0       	rcall	.+0      	; 0x1516 <_Z10DoorLockerv+0x6>
    1516:	00 d0       	rcall	.+0      	; 0x1518 <_Z10DoorLockerv+0x8>
    1518:	cd b7       	in	r28, 0x3d	; 61
    151a:	de b7       	in	r29, 0x3e	; 62
	if (doorLocked)
    151c:	80 91 e9 04 	lds	r24, 0x04E9	; 0x8004e9 <doorLocked>
    1520:	88 23       	and	r24, r24
    1522:	d1 f0       	breq	.+52     	; 0x1558 <_Z10DoorLockerv+0x48>
	{
		WriteToOLED("Locked",0,OLED_Line2);
    1524:	6e e8       	ldi	r22, 0x8E	; 142
    1526:	72 e0       	ldi	r23, 0x02	; 2
    1528:	ce 01       	movw	r24, r28
    152a:	01 96       	adiw	r24, 0x01	; 1
    152c:	0e 94 3a 3c 	call	0x7874	; 0x7874 <_ZN6StringC1EPKc>
    1530:	21 e0       	ldi	r18, 0x01	; 1
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	4b e0       	ldi	r20, 0x0B	; 11
    1536:	50 e0       	ldi	r21, 0x00	; 0
    1538:	60 e0       	ldi	r22, 0x00	; 0
    153a:	70 e0       	ldi	r23, 0x00	; 0
    153c:	ce 01       	movw	r24, r28
    153e:	01 96       	adiw	r24, 0x01	; 1
    1540:	c2 d3       	rcall	.+1924   	; 0x1cc6 <_Z11WriteToOLED6Stringiii>
    1542:	ce 01       	movw	r24, r28
    1544:	01 96       	adiw	r24, 0x01	; 1
    1546:	0e 94 d0 3b 	call	0x77a0	; 0x77a0 <_ZN6StringD1Ev>
		LED_Lock_Level = 255;
    154a:	8f ef       	ldi	r24, 0xFF	; 255
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	90 93 c7 04 	sts	0x04C7, r25	; 0x8004c7 <LED_Lock_Level+0x1>
    1552:	80 93 c6 04 	sts	0x04C6, r24	; 0x8004c6 <LED_Lock_Level>
    1556:	13 c0       	rjmp	.+38     	; 0x157e <_Z10DoorLockerv+0x6e>
	}else
	{
		WriteToOLED("      ",0,OLED_Line2);
    1558:	66 eb       	ldi	r22, 0xB6	; 182
    155a:	72 e0       	ldi	r23, 0x02	; 2
    155c:	ce 01       	movw	r24, r28
    155e:	01 96       	adiw	r24, 0x01	; 1
    1560:	0e 94 3a 3c 	call	0x7874	; 0x7874 <_ZN6StringC1EPKc>
    1564:	21 e0       	ldi	r18, 0x01	; 1
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	4b e0       	ldi	r20, 0x0B	; 11
    156a:	50 e0       	ldi	r21, 0x00	; 0
    156c:	60 e0       	ldi	r22, 0x00	; 0
    156e:	70 e0       	ldi	r23, 0x00	; 0
    1570:	ce 01       	movw	r24, r28
    1572:	01 96       	adiw	r24, 0x01	; 1
    1574:	a8 d3       	rcall	.+1872   	; 0x1cc6 <_Z11WriteToOLED6Stringiii>
    1576:	ce 01       	movw	r24, r28
    1578:	01 96       	adiw	r24, 0x01	; 1
    157a:	0e 94 d0 3b 	call	0x77a0	; 0x77a0 <_ZN6StringD1Ev>
	}
}
    157e:	26 96       	adiw	r28, 0x06	; 6
    1580:	0f b6       	in	r0, 0x3f	; 63
    1582:	f8 94       	cli
    1584:	de bf       	out	0x3e, r29	; 62
    1586:	0f be       	out	0x3f, r0	; 63
    1588:	cd bf       	out	0x3d, r28	; 61
    158a:	df 91       	pop	r29
    158c:	cf 91       	pop	r28
    158e:	08 95       	ret

00001590 <_Z9SetBlindsv>:
void SetBlinds()// moves the "blinds" according to the Light level
{
    1590:	af 92       	push	r10
    1592:	bf 92       	push	r11
    1594:	cf 92       	push	r12
    1596:	df 92       	push	r13
    1598:	ef 92       	push	r14
    159a:	ff 92       	push	r15
    159c:	0f 93       	push	r16
    159e:	1f 93       	push	r17
    15a0:	cf 93       	push	r28
    15a2:	df 93       	push	r29
    15a4:	cd b7       	in	r28, 0x3d	; 61
    15a6:	de b7       	in	r29, 0x3e	; 62
    15a8:	2c 97       	sbiw	r28, 0x0c	; 12
    15aa:	0f b6       	in	r0, 0x3f	; 63
    15ac:	f8 94       	cli
    15ae:	de bf       	out	0x3e, r29	; 62
    15b0:	0f be       	out	0x3f, r0	; 63
    15b2:	cd bf       	out	0x3d, r28	; 61
	if (!doorLocked && millis() >= lastBlindsMove + blindsDelay)
    15b4:	80 91 e9 04 	lds	r24, 0x04E9	; 0x8004e9 <doorLocked>
    15b8:	81 11       	cpse	r24, r1
    15ba:	14 c0       	rjmp	.+40     	; 0x15e4 <_Z9SetBlindsv+0x54>
    15bc:	0e 94 e7 38 	call	0x71ce	; 0x71ce <millis>
    15c0:	00 91 62 04 	lds	r16, 0x0462	; 0x800462 <lastBlindsMove>
    15c4:	10 91 63 04 	lds	r17, 0x0463	; 0x800463 <lastBlindsMove+0x1>
    15c8:	20 91 64 04 	lds	r18, 0x0464	; 0x800464 <lastBlindsMove+0x2>
    15cc:	30 91 65 04 	lds	r19, 0x0465	; 0x800465 <lastBlindsMove+0x3>
    15d0:	08 57       	subi	r16, 0x78	; 120
    15d2:	1c 4e       	sbci	r17, 0xEC	; 236
    15d4:	2f 4f       	sbci	r18, 0xFF	; 255
    15d6:	3f 4f       	sbci	r19, 0xFF	; 255
    15d8:	60 17       	cp	r22, r16
    15da:	71 07       	cpc	r23, r17
    15dc:	82 07       	cpc	r24, r18
    15de:	93 07       	cpc	r25, r19
    15e0:	08 f0       	brcs	.+2      	; 0x15e4 <_Z9SetBlindsv+0x54>
    15e2:	8d c0       	rjmp	.+282    	; 0x16fe <_Z9SetBlindsv+0x16e>
	{
		blindsTarget = map(analogRead(LIGHTSENSOR),0,1024,0,blindsMaxDown);
		
		lastBlindsMove = millis();
	}
	if (millis() >= blindsMover + blindsDelayMover)
    15e4:	0e 94 e7 38 	call	0x71ce	; 0x71ce <millis>
    15e8:	00 91 5e 04 	lds	r16, 0x045E	; 0x80045e <blindsMover>
    15ec:	10 91 5f 04 	lds	r17, 0x045F	; 0x80045f <blindsMover+0x1>
    15f0:	20 91 60 04 	lds	r18, 0x0460	; 0x800460 <blindsMover+0x2>
    15f4:	30 91 61 04 	lds	r19, 0x0461	; 0x800461 <blindsMover+0x3>
    15f8:	0c 59       	subi	r16, 0x9C	; 156
    15fa:	1f 4f       	sbci	r17, 0xFF	; 255
    15fc:	2f 4f       	sbci	r18, 0xFF	; 255
    15fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1600:	60 17       	cp	r22, r16
    1602:	71 07       	cpc	r23, r17
    1604:	82 07       	cpc	r24, r18
    1606:	93 07       	cpc	r25, r19
    1608:	48 f1       	brcs	.+82     	; 0x165c <_Z9SetBlindsv+0xcc>
	{
		if (blindsAt < blindsTarget)
    160a:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <blindsAt>
    160e:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <blindsAt+0x1>
    1612:	20 91 22 02 	lds	r18, 0x0222	; 0x800222 <blindsTarget>
    1616:	30 91 23 02 	lds	r19, 0x0223	; 0x800223 <blindsTarget+0x1>
    161a:	82 17       	cp	r24, r18
    161c:	93 07       	cpc	r25, r19
    161e:	2c f4       	brge	.+10     	; 0x162a <_Z9SetBlindsv+0x9a>
		{
			blindsAt++;
    1620:	01 96       	adiw	r24, 0x01	; 1
    1622:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <blindsAt+0x1>
    1626:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <blindsAt>
		}
		if (blindsAt > blindsTarget)
    162a:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <blindsAt>
    162e:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <blindsAt+0x1>
    1632:	28 17       	cp	r18, r24
    1634:	39 07       	cpc	r19, r25
    1636:	2c f4       	brge	.+10     	; 0x1642 <_Z9SetBlindsv+0xb2>
		{
			blindsAt--;
    1638:	01 97       	sbiw	r24, 0x01	; 1
    163a:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <blindsAt+0x1>
    163e:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <blindsAt>
		}
		if (blindsAt <= blindsMaxDown && blindsAt >= 0)
    1642:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <blindsAt>
    1646:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <blindsAt+0x1>
    164a:	20 91 1e 02 	lds	r18, 0x021E	; 0x80021e <blindsMaxDown>
    164e:	30 91 1f 02 	lds	r19, 0x021F	; 0x80021f <blindsMaxDown+0x1>
    1652:	28 17       	cp	r18, r24
    1654:	39 07       	cpc	r19, r25
    1656:	14 f0       	brlt	.+4      	; 0x165c <_Z9SetBlindsv+0xcc>
    1658:	97 ff       	sbrs	r25, 7
		{
			MoveServo(blindsAt);
    165a:	96 de       	rcall	.-724    	; 0x1388 <_Z9MoveServoi>
		}
	}
	String disTarget = (String)map(blindsAt,0,blindsMaxDown,0,99);
    165c:	e0 90 1e 02 	lds	r14, 0x021E	; 0x80021e <blindsMaxDown>
    1660:	f0 90 1f 02 	lds	r15, 0x021F	; 0x80021f <blindsMaxDown+0x1>
    1664:	0f 2c       	mov	r0, r15
    1666:	00 0c       	add	r0, r0
    1668:	00 0b       	sbc	r16, r16
    166a:	11 0b       	sbc	r17, r17
    166c:	60 91 20 02 	lds	r22, 0x0220	; 0x800220 <blindsAt>
    1670:	70 91 21 02 	lds	r23, 0x0221	; 0x800221 <blindsAt+0x1>
    1674:	07 2e       	mov	r0, r23
    1676:	00 0c       	add	r0, r0
    1678:	88 0b       	sbc	r24, r24
    167a:	99 0b       	sbc	r25, r25
    167c:	1f 92       	push	r1
    167e:	1f 92       	push	r1
    1680:	1f 92       	push	r1
    1682:	23 e6       	ldi	r18, 0x63	; 99
    1684:	2f 93       	push	r18
    1686:	a1 2c       	mov	r10, r1
    1688:	b1 2c       	mov	r11, r1
    168a:	65 01       	movw	r12, r10
    168c:	20 e0       	ldi	r18, 0x00	; 0
    168e:	30 e0       	ldi	r19, 0x00	; 0
    1690:	a9 01       	movw	r20, r18
    1692:	0e 94 90 3b 	call	0x7720	; 0x7720 <_Z3maplllll>
    1696:	ab 01       	movw	r20, r22
    1698:	bc 01       	movw	r22, r24
    169a:	2a e0       	ldi	r18, 0x0A	; 10
    169c:	ce 01       	movw	r24, r28
    169e:	07 96       	adiw	r24, 0x07	; 7
    16a0:	0e 94 ee 3c 	call	0x79dc	; 0x79dc <_ZN6StringC1Elh>
	WriteToOLED(disTarget,0,OLED_Line3);
    16a4:	be 01       	movw	r22, r28
    16a6:	69 5f       	subi	r22, 0xF9	; 249
    16a8:	7f 4f       	sbci	r23, 0xFF	; 255
    16aa:	ce 01       	movw	r24, r28
    16ac:	01 96       	adiw	r24, 0x01	; 1
    16ae:	0e 94 a6 3c 	call	0x794c	; 0x794c <_ZN6StringC1ERKS_>
    16b2:	21 e0       	ldi	r18, 0x01	; 1
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	46 e1       	ldi	r20, 0x16	; 22
    16b8:	50 e0       	ldi	r21, 0x00	; 0
    16ba:	60 e0       	ldi	r22, 0x00	; 0
    16bc:	70 e0       	ldi	r23, 0x00	; 0
    16be:	ce 01       	movw	r24, r28
    16c0:	01 96       	adiw	r24, 0x01	; 1
    16c2:	01 d3       	rcall	.+1538   	; 0x1cc6 <_Z11WriteToOLED6Stringiii>
    16c4:	ce 01       	movw	r24, r28
    16c6:	01 96       	adiw	r24, 0x01	; 1
    16c8:	0e 94 d0 3b 	call	0x77a0	; 0x77a0 <_ZN6StringD1Ev>
		if (blindsAt <= blindsMaxDown && blindsAt >= 0)
		{
			MoveServo(blindsAt);
		}
	}
	String disTarget = (String)map(blindsAt,0,blindsMaxDown,0,99);
    16cc:	ce 01       	movw	r24, r28
    16ce:	07 96       	adiw	r24, 0x07	; 7
    16d0:	0e 94 d0 3b 	call	0x77a0	; 0x77a0 <_ZN6StringD1Ev>
	WriteToOLED(disTarget,0,OLED_Line3);
}
    16d4:	0f 90       	pop	r0
    16d6:	0f 90       	pop	r0
    16d8:	0f 90       	pop	r0
    16da:	0f 90       	pop	r0
    16dc:	2c 96       	adiw	r28, 0x0c	; 12
    16de:	0f b6       	in	r0, 0x3f	; 63
    16e0:	f8 94       	cli
    16e2:	de bf       	out	0x3e, r29	; 62
    16e4:	0f be       	out	0x3f, r0	; 63
    16e6:	cd bf       	out	0x3d, r28	; 61
    16e8:	df 91       	pop	r29
    16ea:	cf 91       	pop	r28
    16ec:	1f 91       	pop	r17
    16ee:	0f 91       	pop	r16
    16f0:	ff 90       	pop	r15
    16f2:	ef 90       	pop	r14
    16f4:	df 90       	pop	r13
    16f6:	cf 90       	pop	r12
    16f8:	bf 90       	pop	r11
    16fa:	af 90       	pop	r10
    16fc:	08 95       	ret
}
void SetBlinds()// moves the "blinds" according to the Light level
{
	if (!doorLocked && millis() >= lastBlindsMove + blindsDelay)
	{
		blindsTarget = map(analogRead(LIGHTSENSOR),0,1024,0,blindsMaxDown);
    16fe:	c0 90 1e 02 	lds	r12, 0x021E	; 0x80021e <blindsMaxDown>
    1702:	d0 90 1f 02 	lds	r13, 0x021F	; 0x80021f <blindsMaxDown+0x1>
    1706:	0d 2c       	mov	r0, r13
    1708:	00 0c       	add	r0, r0
    170a:	ee 08       	sbc	r14, r14
    170c:	ff 08       	sbc	r15, r15
    170e:	87 e3       	ldi	r24, 0x37	; 55
    1710:	0e 94 be 39 	call	0x737c	; 0x737c <analogRead>
    1714:	bc 01       	movw	r22, r24
    1716:	99 0f       	add	r25, r25
    1718:	88 0b       	sbc	r24, r24
    171a:	99 0b       	sbc	r25, r25
    171c:	ff 92       	push	r15
    171e:	ef 92       	push	r14
    1720:	df 92       	push	r13
    1722:	cf 92       	push	r12
    1724:	a1 2c       	mov	r10, r1
    1726:	b1 2c       	mov	r11, r1
    1728:	65 01       	movw	r12, r10
    172a:	e1 2c       	mov	r14, r1
    172c:	14 e0       	ldi	r17, 0x04	; 4
    172e:	f1 2e       	mov	r15, r17
    1730:	00 e0       	ldi	r16, 0x00	; 0
    1732:	10 e0       	ldi	r17, 0x00	; 0
    1734:	20 e0       	ldi	r18, 0x00	; 0
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	a9 01       	movw	r20, r18
    173a:	0e 94 90 3b 	call	0x7720	; 0x7720 <_Z3maplllll>
    173e:	70 93 23 02 	sts	0x0223, r23	; 0x800223 <blindsTarget+0x1>
    1742:	60 93 22 02 	sts	0x0222, r22	; 0x800222 <blindsTarget>
		
		lastBlindsMove = millis();
    1746:	0e 94 e7 38 	call	0x71ce	; 0x71ce <millis>
    174a:	60 93 62 04 	sts	0x0462, r22	; 0x800462 <lastBlindsMove>
    174e:	70 93 63 04 	sts	0x0463, r23	; 0x800463 <lastBlindsMove+0x1>
    1752:	80 93 64 04 	sts	0x0464, r24	; 0x800464 <lastBlindsMove+0x2>
    1756:	90 93 65 04 	sts	0x0465, r25	; 0x800465 <lastBlindsMove+0x3>
    175a:	0f 90       	pop	r0
    175c:	0f 90       	pop	r0
    175e:	0f 90       	pop	r0
    1760:	0f 90       	pop	r0
    1762:	40 cf       	rjmp	.-384    	; 0x15e4 <_Z9SetBlindsv+0x54>

00001764 <_Z4Modev>:
	}
	String disTarget = (String)map(blindsAt,0,blindsMaxDown,0,99);
	WriteToOLED(disTarget,0,OLED_Line3);
}
void Mode()
{
    1764:	0f 93       	push	r16
    1766:	1f 93       	push	r17
    1768:	cf 93       	push	r28
    176a:	df 93       	push	r29
    176c:	00 d0       	rcall	.+0      	; 0x176e <_Z4Modev+0xa>
    176e:	00 d0       	rcall	.+0      	; 0x1770 <_Z4Modev+0xc>
    1770:	cd b7       	in	r28, 0x3d	; 61
    1772:	de b7       	in	r29, 0x3e	; 62
	bool party = GetMode();
    1774:	d3 d0       	rcall	.+422    	; 0x191c <_Z7GetModev>
	if (party)
    1776:	88 23       	and	r24, r24
    1778:	b9 f1       	breq	.+110    	; 0x17e8 <_Z4Modev+0x84>
	{
		WriteToOLED(" * ! P A R T Y ! * ",0,OLED_Line4);
    177a:	65 e9       	ldi	r22, 0x95	; 149
    177c:	72 e0       	ldi	r23, 0x02	; 2
    177e:	ce 01       	movw	r24, r28
    1780:	01 96       	adiw	r24, 0x01	; 1
    1782:	0e 94 3a 3c 	call	0x7874	; 0x7874 <_ZN6StringC1EPKc>
    1786:	21 e0       	ldi	r18, 0x01	; 1
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	41 e2       	ldi	r20, 0x21	; 33
    178c:	50 e0       	ldi	r21, 0x00	; 0
    178e:	60 e0       	ldi	r22, 0x00	; 0
    1790:	70 e0       	ldi	r23, 0x00	; 0
    1792:	ce 01       	movw	r24, r28
    1794:	01 96       	adiw	r24, 0x01	; 1
    1796:	97 d2       	rcall	.+1326   	; 0x1cc6 <_Z11WriteToOLED6Stringiii>
    1798:	ce 01       	movw	r24, r28
    179a:	01 96       	adiw	r24, 0x01	; 1
    179c:	0e 94 d0 3b 	call	0x77a0	; 0x77a0 <_ZN6StringD1Ev>
		if (millis() >= lastParty + lastPartyDelay)
    17a0:	0e 94 e7 38 	call	0x71ce	; 0x71ce <millis>
    17a4:	20 91 10 05 	lds	r18, 0x0510	; 0x800510 <lastParty>
    17a8:	30 91 11 05 	lds	r19, 0x0511	; 0x800511 <lastParty+0x1>
    17ac:	28 53       	subi	r18, 0x38	; 56
    17ae:	3f 4f       	sbci	r19, 0xFF	; 255
    17b0:	89 01       	movw	r16, r18
    17b2:	33 0f       	add	r19, r19
    17b4:	22 0b       	sbc	r18, r18
    17b6:	33 0b       	sbc	r19, r19
    17b8:	60 17       	cp	r22, r16
    17ba:	71 07       	cpc	r23, r17
    17bc:	82 07       	cpc	r24, r18
    17be:	93 07       	cpc	r25, r19
    17c0:	30 f1       	brcs	.+76     	; 0x180e <_Z4Modev+0xaa>
		{
			lastParty = millis();
    17c2:	0e 94 e7 38 	call	0x71ce	; 0x71ce <millis>
    17c6:	70 93 11 05 	sts	0x0511, r23	; 0x800511 <lastParty+0x1>
    17ca:	60 93 10 05 	sts	0x0510, r22	; 0x800510 <lastParty>
			analogWrite(LED11,180);
    17ce:	64 eb       	ldi	r22, 0xB4	; 180
    17d0:	70 e0       	ldi	r23, 0x00	; 0
    17d2:	8b e0       	ldi	r24, 0x0B	; 11
    17d4:	0e 94 e3 39 	call	0x73c6	; 0x73c6 <analogWrite>
			analogWrite(LED10,180);
    17d8:	64 eb       	ldi	r22, 0xB4	; 180
    17da:	70 e0       	ldi	r23, 0x00	; 0
    17dc:	8a e0       	ldi	r24, 0x0A	; 10
    17de:	0e 94 e3 39 	call	0x73c6	; 0x73c6 <analogWrite>
			analogWrite(LED9,180);
    17e2:	64 eb       	ldi	r22, 0xB4	; 180
    17e4:	70 e0       	ldi	r23, 0x00	; 0
    17e6:	1f c0       	rjmp	.+62     	; 0x1826 <_Z4Modev+0xc2>
			analogWrite(LED9,0);
		}
	}
	else
	{
		WriteToOLED("                   ",0,OLED_Line4);
    17e8:	69 ea       	ldi	r22, 0xA9	; 169
    17ea:	72 e0       	ldi	r23, 0x02	; 2
    17ec:	ce 01       	movw	r24, r28
    17ee:	01 96       	adiw	r24, 0x01	; 1
    17f0:	0e 94 3a 3c 	call	0x7874	; 0x7874 <_ZN6StringC1EPKc>
    17f4:	21 e0       	ldi	r18, 0x01	; 1
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	41 e2       	ldi	r20, 0x21	; 33
    17fa:	50 e0       	ldi	r21, 0x00	; 0
    17fc:	60 e0       	ldi	r22, 0x00	; 0
    17fe:	70 e0       	ldi	r23, 0x00	; 0
    1800:	ce 01       	movw	r24, r28
    1802:	01 96       	adiw	r24, 0x01	; 1
    1804:	60 d2       	rcall	.+1216   	; 0x1cc6 <_Z11WriteToOLED6Stringiii>
    1806:	ce 01       	movw	r24, r28
    1808:	01 96       	adiw	r24, 0x01	; 1
    180a:	0e 94 d0 3b 	call	0x77a0	; 0x77a0 <_ZN6StringD1Ev>
		analogWrite(LED11,0);
    180e:	60 e0       	ldi	r22, 0x00	; 0
    1810:	70 e0       	ldi	r23, 0x00	; 0
    1812:	8b e0       	ldi	r24, 0x0B	; 11
    1814:	0e 94 e3 39 	call	0x73c6	; 0x73c6 <analogWrite>
		analogWrite(LED10,0);
    1818:	60 e0       	ldi	r22, 0x00	; 0
    181a:	70 e0       	ldi	r23, 0x00	; 0
    181c:	8a e0       	ldi	r24, 0x0A	; 10
    181e:	0e 94 e3 39 	call	0x73c6	; 0x73c6 <analogWrite>
		analogWrite(LED9,0);
    1822:	60 e0       	ldi	r22, 0x00	; 0
    1824:	70 e0       	ldi	r23, 0x00	; 0
    1826:	89 e0       	ldi	r24, 0x09	; 9
    1828:	0e 94 e3 39 	call	0x73c6	; 0x73c6 <analogWrite>
	}
}
    182c:	26 96       	adiw	r28, 0x06	; 6
    182e:	0f b6       	in	r0, 0x3f	; 63
    1830:	f8 94       	cli
    1832:	de bf       	out	0x3e, r29	; 62
    1834:	0f be       	out	0x3f, r0	; 63
    1836:	cd bf       	out	0x3d, r28	; 61
    1838:	df 91       	pop	r29
    183a:	cf 91       	pop	r28
    183c:	1f 91       	pop	r17
    183e:	0f 91       	pop	r16
    1840:	08 95       	ret

00001842 <loop>:
	attachInterrupt(digitalPinToInterrupt(BUTTONPIN),ButtonInterrupt,CHANGE);
}

void loop() 
{
	display.clearDisplay(); // Clears the OLED display, This is done to have a clean display.
    1842:	86 e6       	ldi	r24, 0x66	; 102
    1844:	94 e0       	ldi	r25, 0x04	; 4
    1846:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <_ZN16Adafruit_SSD130612clearDisplayEv>
	
	OpenCloseDoor(); // Controls if the door should be open or closed.
    184a:	28 dd       	rcall	.-1456   	; 0x129c <_Z13OpenCloseDoorv>
	SetInfomation(); // Set the information of time and weather information on the OLED.
    184c:	2a de       	rcall	.-940    	; 0x14a2 <_Z13SetInfomationv>
	DoorLocker(); // Locks the door and Closes everything that is open.
    184e:	60 de       	rcall	.-832    	; 0x1510 <_Z10DoorLockerv>
	SetBlinds(); // Controls the Blinds in the house according to the Light level.
    1850:	9f de       	rcall	.-706    	; 0x1590 <_Z9SetBlindsv>
    1852:	c5 d1       	rcall	.+906    	; 0x1bde <_Z10MenuSystemv>
	MenuSystem(); // The in house menu control system
    1854:	87 df       	rcall	.-242    	; 0x1764 <_Z4Modev>
    1856:	86 e6       	ldi	r24, 0x66	; 102
	Mode();
    1858:	94 e0       	ldi	r25, 0x04	; 4
    185a:	0c 94 49 1b 	jmp	0x3692	; 0x3692 <_ZN16Adafruit_SSD13067displayEv>

0000185e <_GLOBAL__sub_I_lastParty>:
	
	
	display.display(); // displays everything that should be displayed.
    185e:	8f 92       	push	r8
    1860:	9f 92       	push	r9
    1862:	af 92       	push	r10
		WriteToOLED("                   ",0,OLED_Line4);
		analogWrite(LED11,0);
		analogWrite(LED10,0);
		analogWrite(LED9,0);
	}
}
    1864:	bf 92       	push	r11
    1866:	cf 92       	push	r12
    1868:	df 92       	push	r13
    186a:	ef 92       	push	r14
    186c:	ff 92       	push	r15
    186e:	0f 93       	push	r16
    1870:	1f 93       	push	r17

//Mode
int lastParty = 0;

//DHT11
DHT_Unified dht(DHTPIN, DHTTYPE);	// DHT object
    1872:	aa 24       	eor	r10, r10
    1874:	aa 94       	dec	r10
    1876:	ba 2c       	mov	r11, r10
    1878:	65 01       	movw	r12, r10
    187a:	ee 24       	eor	r14, r14
    187c:	ea 94       	dec	r14
    187e:	fe 2c       	mov	r15, r14
    1880:	87 01       	movw	r16, r14
    1882:	26 e0       	ldi	r18, 0x06	; 6
    1884:	4b e0       	ldi	r20, 0x0B	; 11
    1886:	6a e2       	ldi	r22, 0x2A	; 42
    1888:	8a ee       	ldi	r24, 0xEA	; 234
    188a:	94 e0       	ldi	r25, 0x04	; 4
    188c:	0e 94 00 1f 	call	0x3e00	; 0x3e00 <_ZN11DHT_UnifiedC1Ehhhll>
bool doorState = false;				// What state the door is in. open = "true".
bool isDoorClosed = false;			// Is the door open or closed, used when the door is open.
unsigned long lastDoorState = 0;	// When were the door opened last.

// Servo control
Servo myservo;						// The Servo Object.
    1890:	80 ee       	ldi	r24, 0xE0	; 224
    1892:	94 e0       	ldi	r25, 0x04	; 4
    1894:	0e 94 20 2c 	call	0x5840	; 0x5840 <_ZN5ServoC1Ev>

//LiquidCrystal
const int rs = 49, en = 47, d4 = 45, d5 = 43, d6 = 41, d7 = 39;
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);
    1898:	27 e2       	ldi	r18, 0x27	; 39
    189a:	c2 2e       	mov	r12, r18
    189c:	39 e2       	ldi	r19, 0x29	; 41
    189e:	e3 2e       	mov	r14, r19
    18a0:	0b e2       	ldi	r16, 0x2B	; 43
    18a2:	2d e2       	ldi	r18, 0x2D	; 45
    18a4:	4f e2       	ldi	r20, 0x2F	; 47
    18a6:	61 e3       	ldi	r22, 0x31	; 49
    18a8:	88 ec       	ldi	r24, 0xC8	; 200
    18aa:	94 e0       	ldi	r25, 0x04	; 4
    18ac:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <_ZN13LiquidCrystalC1Ehhhhhh>
//LED's
int LED_Lock_Level = 0;
int allLEDs[] = {LED12 , LED11 , LED10 , LED9 , LED8 , LED7 , LED6 }; // All LED's

//Scanner
MFRC522 mfrc522(SS_PIN,RST_PIN);
    18b0:	45 e0       	ldi	r20, 0x05	; 5
    18b2:	6e e2       	ldi	r22, 0x2E	; 46
    18b4:	86 eb       	ldi	r24, 0xB6	; 182
    18b6:	94 e0       	ldi	r25, 0x04	; 4
    18b8:	0e 94 3c 26 	call	0x4c78	; 0x4c78 <_ZN7MFRC522C1Ehh>
String AprovedCard = "305571a5";
    18bc:	6d eb       	ldi	r22, 0xBD	; 189
    18be:	72 e0       	ldi	r23, 0x02	; 2
    18c0:	80 eb       	ldi	r24, 0xB0	; 176
    18c2:	94 e0       	ldi	r25, 0x04	; 4
    18c4:	0e 94 3a 3c 	call	0x7874	; 0x7874 <_ZN6StringC1EPKc>
RTClib myClock;
bool showClock = true;
unsigned long showClockDelay = 0;

//OLED
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
    18c8:	40 ea       	ldi	r20, 0xA0	; 160
    18ca:	84 2e       	mov	r8, r20
    18cc:	46 e8       	ldi	r20, 0x86	; 134
    18ce:	94 2e       	mov	r9, r20
    18d0:	aa 24       	eor	r10, r10
    18d2:	a3 94       	inc	r10
    18d4:	b1 2c       	mov	r11, r1
    18d6:	50 e8       	ldi	r21, 0x80	; 128
    18d8:	c5 2e       	mov	r12, r21
    18da:	5a e1       	ldi	r21, 0x1A	; 26
    18dc:	d5 2e       	mov	r13, r21
    18de:	56 e0       	ldi	r21, 0x06	; 6
    18e0:	e5 2e       	mov	r14, r21
    18e2:	f1 2c       	mov	r15, r1
    18e4:	04 e0       	ldi	r16, 0x04	; 4
    18e6:	2d e3       	ldi	r18, 0x3D	; 61
    18e8:	36 e0       	ldi	r19, 0x06	; 6
    18ea:	40 e4       	ldi	r20, 0x40	; 64
    18ec:	60 e8       	ldi	r22, 0x80	; 128
    18ee:	86 e6       	ldi	r24, 0x66	; 102
    18f0:	94 e0       	ldi	r25, 0x04	; 4
    18f2:	0e 94 21 16 	call	0x2c42	; 0x2c42 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
		WriteToOLED("                   ",0,OLED_Line4);
		analogWrite(LED11,0);
		analogWrite(LED10,0);
		analogWrite(LED9,0);
	}
}
    18f6:	1f 91       	pop	r17
    18f8:	0f 91       	pop	r16
    18fa:	ff 90       	pop	r15
    18fc:	ef 90       	pop	r14
    18fe:	df 90       	pop	r13
    1900:	cf 90       	pop	r12
    1902:	bf 90       	pop	r11
    1904:	af 90       	pop	r10
    1906:	9f 90       	pop	r9
    1908:	8f 90       	pop	r8
    190a:	08 95       	ret

0000190c <_GLOBAL__sub_D_lastParty>:
RTClib myClock;
bool showClock = true;
unsigned long showClockDelay = 0;

//OLED
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
    190c:	86 e6       	ldi	r24, 0x66	; 102
    190e:	94 e0       	ldi	r25, 0x04	; 4
    1910:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <_ZN16Adafruit_SSD1306D1Ev>
int LED_Lock_Level = 0;
int allLEDs[] = {LED12 , LED11 , LED10 , LED9 , LED8 , LED7 , LED6 }; // All LED's

//Scanner
MFRC522 mfrc522(SS_PIN,RST_PIN);
String AprovedCard = "305571a5";
    1914:	80 eb       	ldi	r24, 0xB0	; 176
    1916:	94 e0       	ldi	r25, 0x04	; 4
    1918:	0c 94 d0 3b 	jmp	0x77a0	; 0x77a0 <_ZN6StringD1Ev>

0000191c <_Z7GetModev>:
bool Party = false;

bool GetMode()
{
	return Party;
}
    191c:	80 91 12 05 	lds	r24, 0x0512	; 0x800512 <Party>
    1920:	08 95       	ret

00001922 <_Z11MenuChooseri>:
		WriteToLiquidCrystal(menuItems[3],1,0);
		MenuChooser(1);
	}
}
void MenuChooser(int _pos)
{
    1922:	0f 93       	push	r16
    1924:	1f 93       	push	r17
    1926:	cf 93       	push	r28
    1928:	df 93       	push	r29
    192a:	00 d0       	rcall	.+0      	; 0x192c <_Z11MenuChooseri+0xa>
    192c:	00 d0       	rcall	.+0      	; 0x192e <_Z11MenuChooseri+0xc>
    192e:	cd b7       	in	r28, 0x3d	; 61
    1930:	de b7       	in	r29, 0x3e	; 62
    1932:	8c 01       	movw	r16, r24
	if (_pos == 1)
    1934:	01 97       	sbiw	r24, 0x01	; 1
    1936:	e1 f4       	brne	.+56     	; 0x1970 <_Z11MenuChooseri+0x4e>
	{
		WriteToLiquidCrystal(" ",_pos - 1,15);
    1938:	6b eb       	ldi	r22, 0xBB	; 187
    193a:	72 e0       	ldi	r23, 0x02	; 2
    193c:	ce 01       	movw	r24, r28
    193e:	01 96       	adiw	r24, 0x01	; 1
    1940:	0e 94 3a 3c 	call	0x7874	; 0x7874 <_ZN6StringC1EPKc>
    1944:	4f e0       	ldi	r20, 0x0F	; 15
    1946:	50 e0       	ldi	r21, 0x00	; 0
    1948:	60 e0       	ldi	r22, 0x00	; 0
    194a:	70 e0       	ldi	r23, 0x00	; 0
    194c:	ce 01       	movw	r24, r28
    194e:	01 96       	adiw	r24, 0x01	; 1
    1950:	ab db       	rcall	.-2218   	; 0x10a8 <_Z20WriteToLiquidCrystal6Stringii>
    1952:	ce 01       	movw	r24, r28
    1954:	01 96       	adiw	r24, 0x01	; 1
    1956:	0e 94 d0 3b 	call	0x77a0	; 0x77a0 <_ZN6StringD1Ev>
		WriteToLiquidCrystal("X",_pos,15);
    195a:	66 ec       	ldi	r22, 0xC6	; 198
    195c:	72 e0       	ldi	r23, 0x02	; 2
    195e:	ce 01       	movw	r24, r28
    1960:	01 96       	adiw	r24, 0x01	; 1
    1962:	0e 94 3a 3c 	call	0x7874	; 0x7874 <_ZN6StringC1EPKc>
    1966:	4f e0       	ldi	r20, 0x0F	; 15
    1968:	50 e0       	ldi	r21, 0x00	; 0
    196a:	61 e0       	ldi	r22, 0x01	; 1
    196c:	70 e0       	ldi	r23, 0x00	; 0
    196e:	1b c0       	rjmp	.+54     	; 0x19a6 <_Z11MenuChooseri+0x84>
	}
	else
	{
		WriteToLiquidCrystal("X",_pos,15);
    1970:	66 ec       	ldi	r22, 0xC6	; 198
    1972:	72 e0       	ldi	r23, 0x02	; 2
    1974:	ce 01       	movw	r24, r28
    1976:	01 96       	adiw	r24, 0x01	; 1
    1978:	0e 94 3a 3c 	call	0x7874	; 0x7874 <_ZN6StringC1EPKc>
    197c:	4f e0       	ldi	r20, 0x0F	; 15
    197e:	50 e0       	ldi	r21, 0x00	; 0
    1980:	b8 01       	movw	r22, r16
    1982:	ce 01       	movw	r24, r28
    1984:	01 96       	adiw	r24, 0x01	; 1
    1986:	90 db       	rcall	.-2272   	; 0x10a8 <_Z20WriteToLiquidCrystal6Stringii>
    1988:	ce 01       	movw	r24, r28
    198a:	01 96       	adiw	r24, 0x01	; 1
    198c:	0e 94 d0 3b 	call	0x77a0	; 0x77a0 <_ZN6StringD1Ev>
		WriteToLiquidCrystal(" ",_pos + 1,15);
    1990:	6b eb       	ldi	r22, 0xBB	; 187
    1992:	72 e0       	ldi	r23, 0x02	; 2
    1994:	ce 01       	movw	r24, r28
    1996:	01 96       	adiw	r24, 0x01	; 1
    1998:	0e 94 3a 3c 	call	0x7874	; 0x7874 <_ZN6StringC1EPKc>
    199c:	b8 01       	movw	r22, r16
    199e:	6f 5f       	subi	r22, 0xFF	; 255
    19a0:	7f 4f       	sbci	r23, 0xFF	; 255
    19a2:	4f e0       	ldi	r20, 0x0F	; 15
    19a4:	50 e0       	ldi	r21, 0x00	; 0
    19a6:	ce 01       	movw	r24, r28
    19a8:	01 96       	adiw	r24, 0x01	; 1
    19aa:	7e db       	rcall	.-2308   	; 0x10a8 <_Z20WriteToLiquidCrystal6Stringii>
    19ac:	ce 01       	movw	r24, r28
    19ae:	01 96       	adiw	r24, 0x01	; 1
    19b0:	0e 94 d0 3b 	call	0x77a0	; 0x77a0 <_ZN6StringD1Ev>
	}
	if (ReadKeypad() == '*')
    19b4:	8a db       	rcall	.-2284   	; 0x10ca <_Z10ReadKeypadv>
    19b6:	8a 32       	cpi	r24, 0x2A	; 42
    19b8:	19 f4       	brne	.+6      	; 0x19c0 <_Z11MenuChooseri+0x9e>
	{
		InMenuItem = true;
    19ba:	81 e0       	ldi	r24, 0x01	; 1
    19bc:	80 93 13 05 	sts	0x0513, r24	; 0x800513 <InMenuItem>
	}
}
    19c0:	26 96       	adiw	r28, 0x06	; 6
    19c2:	0f b6       	in	r0, 0x3f	; 63
    19c4:	f8 94       	cli
    19c6:	de bf       	out	0x3e, r29	; 62
    19c8:	0f be       	out	0x3f, r0	; 63
    19ca:	cd bf       	out	0x3d, r28	; 61
    19cc:	df 91       	pop	r29
    19ce:	cf 91       	pop	r28
    19d0:	1f 91       	pop	r17
    19d2:	0f 91       	pop	r16
    19d4:	08 95       	ret

000019d6 <_Z10MenuScrollv>:
		menuItemChosen = -1;
		MenuScroll();
	}
}
void MenuScroll()
{
    19d6:	cf 93       	push	r28
    19d8:	df 93       	push	r29
    19da:	00 d0       	rcall	.+0      	; 0x19dc <_Z10MenuScrollv+0x6>
    19dc:	00 d0       	rcall	.+0      	; 0x19de <_Z10MenuScrollv+0x8>
    19de:	cd b7       	in	r28, 0x3d	; 61
    19e0:	de b7       	in	r29, 0x3e	; 62
	if (menuItemAtIndex == 0)
    19e2:	80 91 14 05 	lds	r24, 0x0514	; 0x800514 <menuItemAtIndex>
    19e6:	90 91 15 05 	lds	r25, 0x0515	; 0x800515 <menuItemAtIndex+0x1>
    19ea:	00 97       	sbiw	r24, 0x00	; 0
    19ec:	29 f5       	brne	.+74     	; 0x1a38 <_Z10MenuScrollv+0x62>
	{
		WriteToLiquidCrystal(menuItems[0],0,0);
    19ee:	66 e1       	ldi	r22, 0x16	; 22
    19f0:	75 e0       	ldi	r23, 0x05	; 5
    19f2:	ce 01       	movw	r24, r28
    19f4:	01 96       	adiw	r24, 0x01	; 1
    19f6:	0e 94 a6 3c 	call	0x794c	; 0x794c <_ZN6StringC1ERKS_>
    19fa:	40 e0       	ldi	r20, 0x00	; 0
    19fc:	50 e0       	ldi	r21, 0x00	; 0
    19fe:	60 e0       	ldi	r22, 0x00	; 0
    1a00:	70 e0       	ldi	r23, 0x00	; 0
    1a02:	ce 01       	movw	r24, r28
    1a04:	01 96       	adiw	r24, 0x01	; 1
    1a06:	50 db       	rcall	.-2400   	; 0x10a8 <_Z20WriteToLiquidCrystal6Stringii>
    1a08:	ce 01       	movw	r24, r28
    1a0a:	01 96       	adiw	r24, 0x01	; 1
    1a0c:	0e 94 d0 3b 	call	0x77a0	; 0x77a0 <_ZN6StringD1Ev>
		WriteToLiquidCrystal(menuItems[1],1,0);
    1a10:	6c e1       	ldi	r22, 0x1C	; 28
    1a12:	75 e0       	ldi	r23, 0x05	; 5
    1a14:	ce 01       	movw	r24, r28
    1a16:	01 96       	adiw	r24, 0x01	; 1
    1a18:	0e 94 a6 3c 	call	0x794c	; 0x794c <_ZN6StringC1ERKS_>
    1a1c:	40 e0       	ldi	r20, 0x00	; 0
    1a1e:	50 e0       	ldi	r21, 0x00	; 0
    1a20:	61 e0       	ldi	r22, 0x01	; 1
    1a22:	70 e0       	ldi	r23, 0x00	; 0
    1a24:	ce 01       	movw	r24, r28
    1a26:	01 96       	adiw	r24, 0x01	; 1
    1a28:	3f db       	rcall	.-2434   	; 0x10a8 <_Z20WriteToLiquidCrystal6Stringii>
    1a2a:	ce 01       	movw	r24, r28
    1a2c:	01 96       	adiw	r24, 0x01	; 1
    1a2e:	0e 94 d0 3b 	call	0x77a0	; 0x77a0 <_ZN6StringD1Ev>
		MenuChooser(0);
    1a32:	80 e0       	ldi	r24, 0x00	; 0
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	54 c0       	rjmp	.+168    	; 0x1ae0 <_Z10MenuScrollv+0x10a>
	}
	else if (menuItemAtIndex == 1)
    1a38:	81 30       	cpi	r24, 0x01	; 1
    1a3a:	91 05       	cpc	r25, r1
    1a3c:	a1 f4       	brne	.+40     	; 0x1a66 <_Z10MenuScrollv+0x90>
	{
		WriteToLiquidCrystal(menuItems[0],0,0);
    1a3e:	66 e1       	ldi	r22, 0x16	; 22
    1a40:	75 e0       	ldi	r23, 0x05	; 5
    1a42:	ce 01       	movw	r24, r28
    1a44:	01 96       	adiw	r24, 0x01	; 1
    1a46:	0e 94 a6 3c 	call	0x794c	; 0x794c <_ZN6StringC1ERKS_>
    1a4a:	40 e0       	ldi	r20, 0x00	; 0
    1a4c:	50 e0       	ldi	r21, 0x00	; 0
    1a4e:	60 e0       	ldi	r22, 0x00	; 0
    1a50:	70 e0       	ldi	r23, 0x00	; 0
    1a52:	ce 01       	movw	r24, r28
    1a54:	01 96       	adiw	r24, 0x01	; 1
    1a56:	28 db       	rcall	.-2480   	; 0x10a8 <_Z20WriteToLiquidCrystal6Stringii>
    1a58:	ce 01       	movw	r24, r28
    1a5a:	01 96       	adiw	r24, 0x01	; 1
    1a5c:	0e 94 d0 3b 	call	0x77a0	; 0x77a0 <_ZN6StringD1Ev>
		WriteToLiquidCrystal(menuItems[1],1,0);
    1a60:	6c e1       	ldi	r22, 0x1C	; 28
    1a62:	75 e0       	ldi	r23, 0x05	; 5
    1a64:	2c c0       	rjmp	.+88     	; 0x1abe <_Z10MenuScrollv+0xe8>
		MenuChooser(1);
	}
	else if (menuItemAtIndex == 2)
    1a66:	82 30       	cpi	r24, 0x02	; 2
    1a68:	91 05       	cpc	r25, r1
    1a6a:	a1 f4       	brne	.+40     	; 0x1a94 <_Z10MenuScrollv+0xbe>
	{
		WriteToLiquidCrystal(menuItems[1],0,0);
    1a6c:	6c e1       	ldi	r22, 0x1C	; 28
    1a6e:	75 e0       	ldi	r23, 0x05	; 5
    1a70:	ce 01       	movw	r24, r28
    1a72:	01 96       	adiw	r24, 0x01	; 1
    1a74:	0e 94 a6 3c 	call	0x794c	; 0x794c <_ZN6StringC1ERKS_>
    1a78:	40 e0       	ldi	r20, 0x00	; 0
    1a7a:	50 e0       	ldi	r21, 0x00	; 0
    1a7c:	60 e0       	ldi	r22, 0x00	; 0
    1a7e:	70 e0       	ldi	r23, 0x00	; 0
    1a80:	ce 01       	movw	r24, r28
    1a82:	01 96       	adiw	r24, 0x01	; 1
    1a84:	11 db       	rcall	.-2526   	; 0x10a8 <_Z20WriteToLiquidCrystal6Stringii>
    1a86:	ce 01       	movw	r24, r28
    1a88:	01 96       	adiw	r24, 0x01	; 1
    1a8a:	0e 94 d0 3b 	call	0x77a0	; 0x77a0 <_ZN6StringD1Ev>
		WriteToLiquidCrystal(menuItems[2],1,0);
    1a8e:	62 e2       	ldi	r22, 0x22	; 34
    1a90:	75 e0       	ldi	r23, 0x05	; 5
    1a92:	15 c0       	rjmp	.+42     	; 0x1abe <_Z10MenuScrollv+0xe8>
		MenuChooser(1);
	}
	else if (menuItemAtIndex == 3)
    1a94:	03 97       	sbiw	r24, 0x03	; 3
    1a96:	29 f5       	brne	.+74     	; 0x1ae2 <_Z10MenuScrollv+0x10c>
	{
		WriteToLiquidCrystal(menuItems[2],0,0);
    1a98:	62 e2       	ldi	r22, 0x22	; 34
    1a9a:	75 e0       	ldi	r23, 0x05	; 5
    1a9c:	ce 01       	movw	r24, r28
    1a9e:	01 96       	adiw	r24, 0x01	; 1
    1aa0:	0e 94 a6 3c 	call	0x794c	; 0x794c <_ZN6StringC1ERKS_>
    1aa4:	40 e0       	ldi	r20, 0x00	; 0
    1aa6:	50 e0       	ldi	r21, 0x00	; 0
    1aa8:	60 e0       	ldi	r22, 0x00	; 0
    1aaa:	70 e0       	ldi	r23, 0x00	; 0
    1aac:	ce 01       	movw	r24, r28
    1aae:	01 96       	adiw	r24, 0x01	; 1
    1ab0:	fb da       	rcall	.-2570   	; 0x10a8 <_Z20WriteToLiquidCrystal6Stringii>
    1ab2:	ce 01       	movw	r24, r28
    1ab4:	01 96       	adiw	r24, 0x01	; 1
    1ab6:	0e 94 d0 3b 	call	0x77a0	; 0x77a0 <_ZN6StringD1Ev>
		WriteToLiquidCrystal(menuItems[3],1,0);
    1aba:	68 e2       	ldi	r22, 0x28	; 40
    1abc:	75 e0       	ldi	r23, 0x05	; 5
    1abe:	ce 01       	movw	r24, r28
    1ac0:	01 96       	adiw	r24, 0x01	; 1
    1ac2:	0e 94 a6 3c 	call	0x794c	; 0x794c <_ZN6StringC1ERKS_>
    1ac6:	40 e0       	ldi	r20, 0x00	; 0
    1ac8:	50 e0       	ldi	r21, 0x00	; 0
    1aca:	61 e0       	ldi	r22, 0x01	; 1
    1acc:	70 e0       	ldi	r23, 0x00	; 0
    1ace:	ce 01       	movw	r24, r28
    1ad0:	01 96       	adiw	r24, 0x01	; 1
    1ad2:	ea da       	rcall	.-2604   	; 0x10a8 <_Z20WriteToLiquidCrystal6Stringii>
    1ad4:	ce 01       	movw	r24, r28
    1ad6:	01 96       	adiw	r24, 0x01	; 1
    1ad8:	0e 94 d0 3b 	call	0x77a0	; 0x77a0 <_ZN6StringD1Ev>
		MenuChooser(1);
    1adc:	81 e0       	ldi	r24, 0x01	; 1
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	20 df       	rcall	.-448    	; 0x1922 <_Z11MenuChooseri>
	}
}
    1ae2:	26 96       	adiw	r28, 0x06	; 6
    1ae4:	0f b6       	in	r0, 0x3f	; 63
    1ae6:	f8 94       	cli
    1ae8:	de bf       	out	0x3e, r29	; 62
    1aea:	0f be       	out	0x3f, r0	; 63
    1aec:	cd bf       	out	0x3d, r28	; 61
    1aee:	df 91       	pop	r29
    1af0:	cf 91       	pop	r28
    1af2:	08 95       	ret

00001af4 <_Z8MenuItemv>:
	{
		InMenuItem = true;
	}
}
void MenuItem()
{
    1af4:	cf 93       	push	r28
    1af6:	df 93       	push	r29
    1af8:	00 d0       	rcall	.+0      	; 0x1afa <_Z8MenuItemv+0x6>
    1afa:	00 d0       	rcall	.+0      	; 0x1afc <_Z8MenuItemv+0x8>
    1afc:	cd b7       	in	r28, 0x3d	; 61
    1afe:	de b7       	in	r29, 0x3e	; 62
	switch (menuItemAtIndex)
    1b00:	80 91 14 05 	lds	r24, 0x0514	; 0x800514 <menuItemAtIndex>
    1b04:	90 91 15 05 	lds	r25, 0x0515	; 0x800515 <menuItemAtIndex+0x1>
    1b08:	81 30       	cpi	r24, 0x01	; 1
    1b0a:	91 05       	cpc	r25, r1
    1b0c:	c1 f1       	breq	.+112    	; 0x1b7e <_Z8MenuItemv+0x8a>
    1b0e:	1c f4       	brge	.+6      	; 0x1b16 <_Z8MenuItemv+0x22>
    1b10:	89 2b       	or	r24, r25
    1b12:	39 f0       	breq	.+14     	; 0x1b22 <_Z8MenuItemv+0x2e>
    1b14:	56 c0       	rjmp	.+172    	; 0x1bc2 <_Z8MenuItemv+0xce>
    1b16:	82 30       	cpi	r24, 0x02	; 2
    1b18:	91 05       	cpc	r25, r1
    1b1a:	89 f1       	breq	.+98     	; 0x1b7e <_Z8MenuItemv+0x8a>
    1b1c:	03 97       	sbiw	r24, 0x03	; 3
    1b1e:	79 f1       	breq	.+94     	; 0x1b7e <_Z8MenuItemv+0x8a>
    1b20:	50 c0       	rjmp	.+160    	; 0x1bc2 <_Z8MenuItemv+0xce>
	{
		case 0:
			{
				WriteToLiquidCrystal("Change Mode?",0,0);
    1b22:	68 ec       	ldi	r22, 0xC8	; 200
    1b24:	72 e0       	ldi	r23, 0x02	; 2
    1b26:	ce 01       	movw	r24, r28
    1b28:	01 96       	adiw	r24, 0x01	; 1
    1b2a:	0e 94 3a 3c 	call	0x7874	; 0x7874 <_ZN6StringC1EPKc>
    1b2e:	40 e0       	ldi	r20, 0x00	; 0
    1b30:	50 e0       	ldi	r21, 0x00	; 0
    1b32:	60 e0       	ldi	r22, 0x00	; 0
    1b34:	70 e0       	ldi	r23, 0x00	; 0
    1b36:	ce 01       	movw	r24, r28
    1b38:	01 96       	adiw	r24, 0x01	; 1
    1b3a:	b6 da       	rcall	.-2708   	; 0x10a8 <_Z20WriteToLiquidCrystal6Stringii>
    1b3c:	ce 01       	movw	r24, r28
    1b3e:	01 96       	adiw	r24, 0x01	; 1
    1b40:	0e 94 d0 3b 	call	0x77a0	; 0x77a0 <_ZN6StringD1Ev>
				WriteToLiquidCrystal(" * to change",1,0);
    1b44:	65 ed       	ldi	r22, 0xD5	; 213
    1b46:	72 e0       	ldi	r23, 0x02	; 2
    1b48:	ce 01       	movw	r24, r28
    1b4a:	01 96       	adiw	r24, 0x01	; 1
    1b4c:	0e 94 3a 3c 	call	0x7874	; 0x7874 <_ZN6StringC1EPKc>
    1b50:	40 e0       	ldi	r20, 0x00	; 0
    1b52:	50 e0       	ldi	r21, 0x00	; 0
    1b54:	61 e0       	ldi	r22, 0x01	; 1
    1b56:	70 e0       	ldi	r23, 0x00	; 0
    1b58:	ce 01       	movw	r24, r28
    1b5a:	01 96       	adiw	r24, 0x01	; 1
    1b5c:	a5 da       	rcall	.-2742   	; 0x10a8 <_Z20WriteToLiquidCrystal6Stringii>
    1b5e:	ce 01       	movw	r24, r28
    1b60:	01 96       	adiw	r24, 0x01	; 1
    1b62:	0e 94 d0 3b 	call	0x77a0	; 0x77a0 <_ZN6StringD1Ev>
				char value = ReadKeypad();
    1b66:	b1 da       	rcall	.-2718   	; 0x10ca <_Z10ReadKeypadv>
				if (value == '*')
    1b68:	8a 32       	cpi	r24, 0x2A	; 42
    1b6a:	59 f5       	brne	.+86     	; 0x1bc2 <_Z8MenuItemv+0xce>
				{
					Party = !Party;
    1b6c:	90 91 12 05 	lds	r25, 0x0512	; 0x800512 <Party>
    1b70:	81 e0       	ldi	r24, 0x01	; 1
    1b72:	89 27       	eor	r24, r25
    1b74:	80 93 12 05 	sts	0x0512, r24	; 0x800512 <Party>
					InMenuItem = false;
    1b78:	10 92 13 05 	sts	0x0513, r1	; 0x800513 <InMenuItem>
    1b7c:	22 c0       	rjmp	.+68     	; 0x1bc2 <_Z8MenuItemv+0xce>
		case 2:
			WriteToLiquidCrystal("nothing",0,0);
			WriteToLiquidCrystal("nothing",1,0);
		break;
		case 3:
			WriteToLiquidCrystal("nothing",0,0);
    1b7e:	62 ee       	ldi	r22, 0xE2	; 226
    1b80:	72 e0       	ldi	r23, 0x02	; 2
    1b82:	ce 01       	movw	r24, r28
    1b84:	01 96       	adiw	r24, 0x01	; 1
    1b86:	0e 94 3a 3c 	call	0x7874	; 0x7874 <_ZN6StringC1EPKc>
    1b8a:	40 e0       	ldi	r20, 0x00	; 0
    1b8c:	50 e0       	ldi	r21, 0x00	; 0
    1b8e:	60 e0       	ldi	r22, 0x00	; 0
    1b90:	70 e0       	ldi	r23, 0x00	; 0
    1b92:	ce 01       	movw	r24, r28
    1b94:	01 96       	adiw	r24, 0x01	; 1
    1b96:	88 da       	rcall	.-2800   	; 0x10a8 <_Z20WriteToLiquidCrystal6Stringii>
    1b98:	ce 01       	movw	r24, r28
    1b9a:	01 96       	adiw	r24, 0x01	; 1
    1b9c:	0e 94 d0 3b 	call	0x77a0	; 0x77a0 <_ZN6StringD1Ev>
			WriteToLiquidCrystal("nothing",1,0);
    1ba0:	62 ee       	ldi	r22, 0xE2	; 226
    1ba2:	72 e0       	ldi	r23, 0x02	; 2
    1ba4:	ce 01       	movw	r24, r28
    1ba6:	01 96       	adiw	r24, 0x01	; 1
    1ba8:	0e 94 3a 3c 	call	0x7874	; 0x7874 <_ZN6StringC1EPKc>
    1bac:	40 e0       	ldi	r20, 0x00	; 0
    1bae:	50 e0       	ldi	r21, 0x00	; 0
    1bb0:	61 e0       	ldi	r22, 0x01	; 1
    1bb2:	70 e0       	ldi	r23, 0x00	; 0
    1bb4:	ce 01       	movw	r24, r28
    1bb6:	01 96       	adiw	r24, 0x01	; 1
    1bb8:	77 da       	rcall	.-2834   	; 0x10a8 <_Z20WriteToLiquidCrystal6Stringii>
    1bba:	ce 01       	movw	r24, r28
    1bbc:	01 96       	adiw	r24, 0x01	; 1
    1bbe:	0e 94 d0 3b 	call	0x77a0	; 0x77a0 <_ZN6StringD1Ev>
		break;
	}
	if (ReadKeypad() == '#')
    1bc2:	83 da       	rcall	.-2810   	; 0x10ca <_Z10ReadKeypadv>
    1bc4:	83 32       	cpi	r24, 0x23	; 35
    1bc6:	11 f4       	brne	.+4      	; 0x1bcc <_Z8MenuItemv+0xd8>
	{
		InMenuItem = false;
    1bc8:	10 92 13 05 	sts	0x0513, r1	; 0x800513 <InMenuItem>
	}
    1bcc:	26 96       	adiw	r28, 0x06	; 6
    1bce:	0f b6       	in	r0, 0x3f	; 63
    1bd0:	f8 94       	cli
    1bd2:	de bf       	out	0x3e, r29	; 62
    1bd4:	0f be       	out	0x3f, r0	; 63
    1bd6:	cd bf       	out	0x3d, r28	; 61
    1bd8:	df 91       	pop	r29
    1bda:	cf 91       	pop	r28
    1bdc:	08 95       	ret

00001bde <_Z10MenuSystemv>:
{
	return Party;
}

void MenuSystem()
{
    1bde:	af 92       	push	r10
    1be0:	bf 92       	push	r11
    1be2:	cf 92       	push	r12
    1be4:	df 92       	push	r13
    1be6:	ef 92       	push	r14
    1be8:	ff 92       	push	r15
    1bea:	0f 93       	push	r16
    1bec:	1f 93       	push	r17
	menuItemAtIndex = map(analogRead(PUTMETER),0,1024,0,numberOfItems);
    1bee:	c0 90 65 02 	lds	r12, 0x0265	; 0x800265 <numberOfItems>
    1bf2:	d0 90 66 02 	lds	r13, 0x0266	; 0x800266 <numberOfItems+0x1>
    1bf6:	0d 2c       	mov	r0, r13
    1bf8:	00 0c       	add	r0, r0
    1bfa:	ee 08       	sbc	r14, r14
    1bfc:	ff 08       	sbc	r15, r15
    1bfe:	86 e3       	ldi	r24, 0x36	; 54
    1c00:	0e 94 be 39 	call	0x737c	; 0x737c <analogRead>
    1c04:	bc 01       	movw	r22, r24
    1c06:	99 0f       	add	r25, r25
    1c08:	88 0b       	sbc	r24, r24
    1c0a:	99 0b       	sbc	r25, r25
    1c0c:	ff 92       	push	r15
    1c0e:	ef 92       	push	r14
    1c10:	df 92       	push	r13
    1c12:	cf 92       	push	r12
    1c14:	a1 2c       	mov	r10, r1
    1c16:	b1 2c       	mov	r11, r1
    1c18:	65 01       	movw	r12, r10
    1c1a:	e1 2c       	mov	r14, r1
    1c1c:	14 e0       	ldi	r17, 0x04	; 4
    1c1e:	f1 2e       	mov	r15, r17
    1c20:	00 e0       	ldi	r16, 0x00	; 0
    1c22:	10 e0       	ldi	r17, 0x00	; 0
    1c24:	20 e0       	ldi	r18, 0x00	; 0
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	a9 01       	movw	r20, r18
    1c2a:	0e 94 90 3b 	call	0x7720	; 0x7720 <_Z3maplllll>
    1c2e:	70 93 15 05 	sts	0x0515, r23	; 0x800515 <menuItemAtIndex+0x1>
    1c32:	60 93 14 05 	sts	0x0514, r22	; 0x800514 <menuItemAtIndex>
	if (InMenuItem)
    1c36:	0f 90       	pop	r0
    1c38:	0f 90       	pop	r0
    1c3a:	0f 90       	pop	r0
    1c3c:	0f 90       	pop	r0
    1c3e:	80 91 13 05 	lds	r24, 0x0513	; 0x800513 <InMenuItem>
    1c42:	88 23       	and	r24, r24
    1c44:	49 f0       	breq	.+18     	; 0x1c58 <_Z10MenuSystemv+0x7a>
	else
	{
		menuItemChosen = -1;
		MenuScroll();
	}
}
    1c46:	1f 91       	pop	r17
    1c48:	0f 91       	pop	r16
    1c4a:	ff 90       	pop	r15
    1c4c:	ef 90       	pop	r14
    1c4e:	df 90       	pop	r13
    1c50:	cf 90       	pop	r12
    1c52:	bf 90       	pop	r11
    1c54:	af 90       	pop	r10
void MenuSystem()
{
	menuItemAtIndex = map(analogRead(PUTMETER),0,1024,0,numberOfItems);
	if (InMenuItem)
	{
		MenuItem();
    1c56:	4e cf       	rjmp	.-356    	; 0x1af4 <_Z8MenuItemv>
	}
	else
	{
		menuItemChosen = -1;
    1c58:	8f ef       	ldi	r24, 0xFF	; 255
    1c5a:	9f ef       	ldi	r25, 0xFF	; 255
    1c5c:	90 93 64 02 	sts	0x0264, r25	; 0x800264 <menuItemChosen+0x1>
    1c60:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <menuItemChosen>
		MenuScroll();
	}
}
    1c64:	1f 91       	pop	r17
    1c66:	0f 91       	pop	r16
    1c68:	ff 90       	pop	r15
    1c6a:	ef 90       	pop	r14
    1c6c:	df 90       	pop	r13
    1c6e:	cf 90       	pop	r12
    1c70:	bf 90       	pop	r11
		MenuItem();
	}
	else
	{
		menuItemChosen = -1;
		MenuScroll();
    1c72:	af 90       	pop	r10
    1c74:	b0 ce       	rjmp	.-672    	; 0x19d6 <_Z10MenuScrollv>

00001c76 <_GLOBAL__sub_I_numberOfItems>:
#include "MenuSystem.h"


int numberOfItems = 4;
String menuItems[] = {"Mode        ","Blinds      ","Temperature ","Alarm       " };
    1c76:	6a ee       	ldi	r22, 0xEA	; 234
    1c78:	72 e0       	ldi	r23, 0x02	; 2
    1c7a:	86 e1       	ldi	r24, 0x16	; 22
    1c7c:	95 e0       	ldi	r25, 0x05	; 5
    1c7e:	0e 94 3a 3c 	call	0x7874	; 0x7874 <_ZN6StringC1EPKc>
    1c82:	67 ef       	ldi	r22, 0xF7	; 247
    1c84:	72 e0       	ldi	r23, 0x02	; 2
    1c86:	8c e1       	ldi	r24, 0x1C	; 28
    1c88:	95 e0       	ldi	r25, 0x05	; 5
    1c8a:	0e 94 3a 3c 	call	0x7874	; 0x7874 <_ZN6StringC1EPKc>
    1c8e:	64 e0       	ldi	r22, 0x04	; 4
    1c90:	73 e0       	ldi	r23, 0x03	; 3
    1c92:	82 e2       	ldi	r24, 0x22	; 34
    1c94:	95 e0       	ldi	r25, 0x05	; 5
    1c96:	0e 94 3a 3c 	call	0x7874	; 0x7874 <_ZN6StringC1EPKc>
    1c9a:	61 e1       	ldi	r22, 0x11	; 17
    1c9c:	73 e0       	ldi	r23, 0x03	; 3
    1c9e:	88 e2       	ldi	r24, 0x28	; 40
    1ca0:	95 e0       	ldi	r25, 0x05	; 5
    1ca2:	0c 94 3a 3c 	jmp	0x7874	; 0x7874 <_ZN6StringC1EPKc>

00001ca6 <_GLOBAL__sub_D_numberOfItems>:
    1ca6:	88 e2       	ldi	r24, 0x28	; 40
    1ca8:	95 e0       	ldi	r25, 0x05	; 5
    1caa:	0e 94 d0 3b 	call	0x77a0	; 0x77a0 <_ZN6StringD1Ev>
    1cae:	82 e2       	ldi	r24, 0x22	; 34
    1cb0:	95 e0       	ldi	r25, 0x05	; 5
    1cb2:	0e 94 d0 3b 	call	0x77a0	; 0x77a0 <_ZN6StringD1Ev>
    1cb6:	8c e1       	ldi	r24, 0x1C	; 28
    1cb8:	95 e0       	ldi	r25, 0x05	; 5
    1cba:	0e 94 d0 3b 	call	0x77a0	; 0x77a0 <_ZN6StringD1Ev>
    1cbe:	86 e1       	ldi	r24, 0x16	; 22
    1cc0:	95 e0       	ldi	r25, 0x05	; 5
    1cc2:	0c 94 d0 3b 	jmp	0x77a0	; 0x77a0 <_ZN6StringD1Ev>

00001cc6 <_Z11WriteToOLED6Stringiii>:
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
    1cc6:	e6 e6       	ldi	r30, 0x66	; 102
    1cc8:	f4 e0       	ldi	r31, 0x04	; 4
    1cca:	21 e0       	ldi	r18, 0x01	; 1
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	33 8b       	std	Z+19, r19	; 0x13
    1cd0:	22 8b       	std	Z+18, r18	; 0x12
    1cd2:	31 8b       	std	Z+17, r19	; 0x11
    1cd4:	20 8b       	std	Z+16, r18	; 0x10
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    1cd6:	75 87       	std	Z+13, r23	; 0x0d
    1cd8:	64 87       	std	Z+12, r22	; 0x0c
    cursor_y = y;
    1cda:	57 87       	std	Z+15, r21	; 0x0f
    1cdc:	46 87       	std	Z+14, r20	; 0x0e

void WriteToOLED(String _input, int _row, int _col, int size )// What should be written to the OLED display and where.
{
	display.setTextColor(WHITE);
	display.setCursor( _row , _col );
	display.print(_input);
    1cde:	bc 01       	movw	r22, r24
    1ce0:	cf 01       	movw	r24, r30
    1ce2:	0c 94 c3 36 	jmp	0x6d86	; 0x6d86 <_ZN5Print5printERK6String>

00001ce6 <_Z10CardReaderv>:
extern MFRC522 mfrc522;
extern MFRC522::MIFARE_Key key;


String CardReader()// Card reader
{
    1ce6:	ef 92       	push	r14
    1ce8:	ff 92       	push	r15
    1cea:	1f 93       	push	r17
    1cec:	cf 93       	push	r28
    1cee:	df 93       	push	r29
    1cf0:	cd b7       	in	r28, 0x3d	; 61
    1cf2:	de b7       	in	r29, 0x3e	; 62
    1cf4:	2c 97       	sbiw	r28, 0x0c	; 12
    1cf6:	0f b6       	in	r0, 0x3f	; 63
    1cf8:	f8 94       	cli
    1cfa:	de bf       	out	0x3e, r29	; 62
    1cfc:	0f be       	out	0x3f, r0	; 63
    1cfe:	cd bf       	out	0x3d, r28	; 61
    1d00:	7c 01       	movw	r14, r24
	
	// Look for new cards, and select one if present
	if ( ! mfrc522.PICC_IsNewCardPresent() || ! mfrc522.PICC_ReadCardSerial() ) {
    1d02:	86 eb       	ldi	r24, 0xB6	; 182
    1d04:	94 e0       	ldi	r25, 0x04	; 4
    1d06:	0e 94 7b 2a 	call	0x54f6	; 0x54f6 <_ZN7MFRC52221PICC_IsNewCardPresentEv>
    1d0a:	88 23       	and	r24, r24
    1d0c:	99 f1       	breq	.+102    	; 0x1d74 <_Z10CardReaderv+0x8e>
    1d0e:	86 eb       	ldi	r24, 0xB6	; 182
    1d10:	94 e0       	ldi	r25, 0x04	; 4
    1d12:	0e 94 d7 25 	call	0x4bae	; 0x4bae <_ZN7MFRC52219PICC_ReadCardSerialEv>
    1d16:	88 23       	and	r24, r24
    1d18:	69 f1       	breq	.+90     	; 0x1d74 <_Z10CardReaderv+0x8e>
		return "";
	}
	
	// Dump UID
	String result = "";
    1d1a:	6c eb       	ldi	r22, 0xBC	; 188
    1d1c:	72 e0       	ldi	r23, 0x02	; 2
    1d1e:	ce 01       	movw	r24, r28
    1d20:	07 96       	adiw	r24, 0x07	; 7
    1d22:	0e 94 3a 3c 	call	0x7874	; 0x7874 <_ZN6StringC1EPKc>
	for (byte i = 0; i < mfrc522.uid.size; i++) {
    1d26:	10 e0       	ldi	r17, 0x00	; 0
    1d28:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <mfrc522+0x2>
    1d2c:	18 17       	cp	r17, r24
    1d2e:	b8 f4       	brcc	.+46     	; 0x1d5e <_Z10CardReaderv+0x78>
		result += String(mfrc522.uid.uidByte[i], HEX);
    1d30:	e1 2f       	mov	r30, r17
    1d32:	f0 e0       	ldi	r31, 0x00	; 0
    1d34:	ea 54       	subi	r30, 0x4A	; 74
    1d36:	fb 4f       	sbci	r31, 0xFB	; 251
    1d38:	40 e1       	ldi	r20, 0x10	; 16
    1d3a:	63 81       	ldd	r22, Z+3	; 0x03
    1d3c:	ce 01       	movw	r24, r28
    1d3e:	01 96       	adiw	r24, 0x01	; 1
    1d40:	0e 94 c3 3c 	call	0x7986	; 0x7986 <_ZN6StringC1Ehh>
	unsigned char concat(double num);
	unsigned char concat(const __FlashStringHelper * str);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    1d44:	be 01       	movw	r22, r28
    1d46:	6f 5f       	subi	r22, 0xFF	; 255
    1d48:	7f 4f       	sbci	r23, 0xFF	; 255
    1d4a:	ce 01       	movw	r24, r28
    1d4c:	07 96       	adiw	r24, 0x07	; 7
    1d4e:	0e 94 73 3d 	call	0x7ae6	; 0x7ae6 <_ZN6String6concatERKS_>
    1d52:	ce 01       	movw	r24, r28
    1d54:	01 96       	adiw	r24, 0x01	; 1
    1d56:	0e 94 d0 3b 	call	0x77a0	; 0x77a0 <_ZN6StringD1Ev>
		return "";
	}
	
	// Dump UID
	String result = "";
	for (byte i = 0; i < mfrc522.uid.size; i++) {
    1d5a:	1f 5f       	subi	r17, 0xFF	; 255
    1d5c:	e5 cf       	rjmp	.-54     	; 0x1d28 <_Z10CardReaderv+0x42>
		result += String(mfrc522.uid.uidByte[i], HEX);
	}
	return result;
    1d5e:	be 01       	movw	r22, r28
    1d60:	69 5f       	subi	r22, 0xF9	; 249
    1d62:	7f 4f       	sbci	r23, 0xFF	; 255
    1d64:	c7 01       	movw	r24, r14
    1d66:	0e 94 89 3c 	call	0x7912	; 0x7912 <_ZN6StringC1EOS_>
	if ( ! mfrc522.PICC_IsNewCardPresent() || ! mfrc522.PICC_ReadCardSerial() ) {
		return "";
	}
	
	// Dump UID
	String result = "";
    1d6a:	ce 01       	movw	r24, r28
    1d6c:	07 96       	adiw	r24, 0x07	; 7
    1d6e:	0e 94 d0 3b 	call	0x77a0	; 0x77a0 <_ZN6StringD1Ev>
    1d72:	05 c0       	rjmp	.+10     	; 0x1d7e <_Z10CardReaderv+0x98>
String CardReader()// Card reader
{
	
	// Look for new cards, and select one if present
	if ( ! mfrc522.PICC_IsNewCardPresent() || ! mfrc522.PICC_ReadCardSerial() ) {
		return "";
    1d74:	6c eb       	ldi	r22, 0xBC	; 188
    1d76:	72 e0       	ldi	r23, 0x02	; 2
    1d78:	c7 01       	movw	r24, r14
    1d7a:	0e 94 3a 3c 	call	0x7874	; 0x7874 <_ZN6StringC1EPKc>
	String result = "";
	for (byte i = 0; i < mfrc522.uid.size; i++) {
		result += String(mfrc522.uid.uidByte[i], HEX);
	}
	return result;
}
    1d7e:	c7 01       	movw	r24, r14
    1d80:	2c 96       	adiw	r28, 0x0c	; 12
    1d82:	0f b6       	in	r0, 0x3f	; 63
    1d84:	f8 94       	cli
    1d86:	de bf       	out	0x3e, r29	; 62
    1d88:	0f be       	out	0x3f, r0	; 63
    1d8a:	cd bf       	out	0x3d, r28	; 61
    1d8c:	df 91       	pop	r29
    1d8e:	cf 91       	pop	r28
    1d90:	1f 91       	pop	r17
    1d92:	ff 90       	pop	r15
    1d94:	ef 90       	pop	r14
    1d96:	08 95       	ret

00001d98 <_ZN8SPIClass16beginTransactionE11SPISettings>:

  // Before using SPI.transfer() or asserting chip select pins,
  // this function is used to gain exclusive access to the SPI bus
  // and configure the correct settings.
  inline static void beginTransaction(SPISettings settings) {
    if (interruptMode > 0) {
    1d98:	20 91 c5 05 	lds	r18, 0x05C5	; 0x8005c5 <_ZN8SPIClass13interruptModeE>
    1d9c:	22 23       	and	r18, r18
    1d9e:	99 f0       	breq	.+38     	; 0x1dc6 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
      uint8_t sreg = SREG;
    1da0:	4f b7       	in	r20, 0x3f	; 63
      noInterrupts();
    1da2:	f8 94       	cli

      #ifdef SPI_AVR_EIMSK
      if (interruptMode == 1) {
    1da4:	20 91 c5 05 	lds	r18, 0x05C5	; 0x8005c5 <_ZN8SPIClass13interruptModeE>
    1da8:	21 30       	cpi	r18, 0x01	; 1
    1daa:	59 f4       	brne	.+22     	; 0x1dc2 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
        interruptSave = SPI_AVR_EIMSK;
    1dac:	2d b3       	in	r18, 0x1d	; 29
    1dae:	20 93 c3 05 	sts	0x05C3, r18	; 0x8005c3 <_ZN8SPIClass13interruptSaveE>
        SPI_AVR_EIMSK &= ~interruptMask;
    1db2:	3d b3       	in	r19, 0x1d	; 29
    1db4:	20 91 c4 05 	lds	r18, 0x05C4	; 0x8005c4 <_ZN8SPIClass13interruptMaskE>
    1db8:	20 95       	com	r18
    1dba:	23 23       	and	r18, r19
    1dbc:	2d bb       	out	0x1d, r18	; 29
        SREG = sreg;
    1dbe:	4f bf       	out	0x3f, r20	; 63
    1dc0:	02 c0       	rjmp	.+4      	; 0x1dc6 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
      } else
      #endif
      {
        interruptSave = sreg;
    1dc2:	40 93 c3 05 	sts	0x05C3, r20	; 0x8005c3 <_ZN8SPIClass13interruptSaveE>
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 1;
    #endif

    SPCR = settings.spcr;
    1dc6:	8c bd       	out	0x2c, r24	; 44
    SPSR = settings.spsr;
    1dc8:	9d bd       	out	0x2d, r25	; 45
    1dca:	08 95       	ret

00001dcc <_ZN8SPIClass14endTransactionEv>:
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 0;
    #endif

    if (interruptMode > 0) {
    1dcc:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <_ZN8SPIClass13interruptModeE>
    1dd0:	88 23       	and	r24, r24
    1dd2:	61 f0       	breq	.+24     	; 0x1dec <_ZN8SPIClass14endTransactionEv+0x20>
      #ifdef SPI_AVR_EIMSK
      uint8_t sreg = SREG;
    1dd4:	9f b7       	in	r25, 0x3f	; 63
      #endif
      noInterrupts();
    1dd6:	f8 94       	cli
      #ifdef SPI_AVR_EIMSK
      if (interruptMode == 1) {
    1dd8:	20 91 c5 05 	lds	r18, 0x05C5	; 0x8005c5 <_ZN8SPIClass13interruptModeE>
    1ddc:	80 91 c3 05 	lds	r24, 0x05C3	; 0x8005c3 <_ZN8SPIClass13interruptSaveE>
    1de0:	21 30       	cpi	r18, 0x01	; 1
    1de2:	19 f4       	brne	.+6      	; 0x1dea <_ZN8SPIClass14endTransactionEv+0x1e>
        SPI_AVR_EIMSK = interruptSave;
    1de4:	8d bb       	out	0x1d, r24	; 29
        SREG = sreg;
    1de6:	9f bf       	out	0x3f, r25	; 63
    1de8:	08 95       	ret
      } else
      #endif
      {
        SREG = interruptSave;
    1dea:	8f bf       	out	0x3f, r24	; 63
    1dec:	08 95       	ret

00001dee <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    1dee:	80 e0       	ldi	r24, 0x00	; 0
    1df0:	90 e0       	ldi	r25, 0x00	; 0
    1df2:	08 95       	ret

00001df4 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    1df4:	08 95       	ret

00001df6 <_ZN12Adafruit_GFX9writeLineEiiiij>:
*/
/**************************************************************************/
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
                            uint16_t color, uint16_t bg, uint8_t size) {
  drawChar(x, y, c, color, bg, size, size);
}
    1df6:	2f 92       	push	r2
    1df8:	3f 92       	push	r3
    1dfa:	4f 92       	push	r4
    1dfc:	5f 92       	push	r5
    1dfe:	6f 92       	push	r6
    1e00:	7f 92       	push	r7
    1e02:	8f 92       	push	r8
    1e04:	9f 92       	push	r9
    1e06:	af 92       	push	r10
    1e08:	bf 92       	push	r11
    1e0a:	cf 92       	push	r12
    1e0c:	df 92       	push	r13
    1e0e:	ef 92       	push	r14
    1e10:	ff 92       	push	r15
    1e12:	0f 93       	push	r16
    1e14:	1f 93       	push	r17
    1e16:	cf 93       	push	r28
    1e18:	df 93       	push	r29
    1e1a:	00 d0       	rcall	.+0      	; 0x1e1c <_ZN12Adafruit_GFX9writeLineEiiiij+0x26>
    1e1c:	00 d0       	rcall	.+0      	; 0x1e1e <_ZN12Adafruit_GFX9writeLineEiiiij+0x28>
    1e1e:	cd b7       	in	r28, 0x3d	; 61
    1e20:	de b7       	in	r29, 0x3e	; 62
    1e22:	2c 01       	movw	r4, r24
    1e24:	7e 83       	std	Y+6, r23	; 0x06
    1e26:	6d 83       	std	Y+5, r22	; 0x05
    1e28:	6a 01       	movw	r12, r20
    1e2a:	59 01       	movw	r10, r18
    1e2c:	c8 01       	movw	r24, r16
    1e2e:	fc 82       	std	Y+4, r15	; 0x04
    1e30:	eb 82       	std	Y+3, r14	; 0x03
    1e32:	48 01       	movw	r8, r16
    1e34:	84 1a       	sub	r8, r20
    1e36:	95 0a       	sbc	r9, r21
    1e38:	97 fe       	sbrs	r9, 7
    1e3a:	03 c0       	rjmp	.+6      	; 0x1e42 <_ZN12Adafruit_GFX9writeLineEiiiij+0x4c>
    1e3c:	91 94       	neg	r9
    1e3e:	81 94       	neg	r8
    1e40:	91 08       	sbc	r9, r1
    1e42:	35 01       	movw	r6, r10
    1e44:	2d 81       	ldd	r18, Y+5	; 0x05
    1e46:	3e 81       	ldd	r19, Y+6	; 0x06
    1e48:	62 1a       	sub	r6, r18
    1e4a:	73 0a       	sbc	r7, r19
    1e4c:	77 fe       	sbrs	r7, 7
    1e4e:	03 c0       	rjmp	.+6      	; 0x1e56 <_ZN12Adafruit_GFX9writeLineEiiiij+0x60>
    1e50:	71 94       	neg	r7
    1e52:	61 94       	neg	r6
    1e54:	71 08       	sbc	r7, r1
    1e56:	68 14       	cp	r6, r8
    1e58:	79 04       	cpc	r7, r9
    1e5a:	5c f4       	brge	.+22     	; 0x1e72 <_ZN12Adafruit_GFX9writeLineEiiiij+0x7c>
    1e5c:	3a 2d       	mov	r19, r10
    1e5e:	2b 2d       	mov	r18, r11
    1e60:	5c 01       	movw	r10, r24
    1e62:	83 2f       	mov	r24, r19
    1e64:	92 2f       	mov	r25, r18
    1e66:	3d 81       	ldd	r19, Y+5	; 0x05
    1e68:	2e 81       	ldd	r18, Y+6	; 0x06
    1e6a:	de 82       	std	Y+6, r13	; 0x06
    1e6c:	cd 82       	std	Y+5, r12	; 0x05
    1e6e:	c3 2e       	mov	r12, r19
    1e70:	d2 2e       	mov	r13, r18
    1e72:	ad 81       	ldd	r26, Y+5	; 0x05
    1e74:	be 81       	ldd	r27, Y+6	; 0x06
    1e76:	aa 16       	cp	r10, r26
    1e78:	bb 06       	cpc	r11, r27
    1e7a:	5c f4       	brge	.+22     	; 0x1e92 <_ZN12Adafruit_GFX9writeLineEiiiij+0x9c>
    1e7c:	3c 2d       	mov	r19, r12
    1e7e:	2d 2d       	mov	r18, r13
    1e80:	6c 01       	movw	r12, r24
    1e82:	83 2f       	mov	r24, r19
    1e84:	92 2f       	mov	r25, r18
    1e86:	3d 81       	ldd	r19, Y+5	; 0x05
    1e88:	2e 81       	ldd	r18, Y+6	; 0x06
    1e8a:	be 82       	std	Y+6, r11	; 0x06
    1e8c:	ad 82       	std	Y+5, r10	; 0x05
    1e8e:	a3 2e       	mov	r10, r19
    1e90:	b2 2e       	mov	r11, r18
    1e92:	85 01       	movw	r16, r10
    1e94:	2d 81       	ldd	r18, Y+5	; 0x05
    1e96:	3e 81       	ldd	r19, Y+6	; 0x06
    1e98:	02 1b       	sub	r16, r18
    1e9a:	13 0b       	sbc	r17, r19
    1e9c:	1c 01       	movw	r2, r24
    1e9e:	2c 18       	sub	r2, r12
    1ea0:	3d 08       	sbc	r3, r13
    1ea2:	37 fe       	sbrs	r3, 7
    1ea4:	03 c0       	rjmp	.+6      	; 0x1eac <_ZN12Adafruit_GFX9writeLineEiiiij+0xb6>
    1ea6:	31 94       	neg	r3
    1ea8:	21 94       	neg	r2
    1eaa:	31 08       	sbc	r3, r1
    1eac:	78 01       	movw	r14, r16
    1eae:	17 ff       	sbrs	r17, 7
    1eb0:	03 c0       	rjmp	.+6      	; 0x1eb8 <_ZN12Adafruit_GFX9writeLineEiiiij+0xc2>
    1eb2:	3f ef       	ldi	r19, 0xFF	; 255
    1eb4:	e3 1a       	sub	r14, r19
    1eb6:	f3 0a       	sbc	r15, r19
    1eb8:	f5 94       	asr	r15
    1eba:	e7 94       	ror	r14
    1ebc:	c8 16       	cp	r12, r24
    1ebe:	d9 06       	cpc	r13, r25
    1ec0:	2c f0       	brlt	.+10     	; 0x1ecc <_ZN12Adafruit_GFX9writeLineEiiiij+0xd6>
    1ec2:	8f ef       	ldi	r24, 0xFF	; 255
    1ec4:	9f ef       	ldi	r25, 0xFF	; 255
    1ec6:	9a 83       	std	Y+2, r25	; 0x02
    1ec8:	89 83       	std	Y+1, r24	; 0x01
    1eca:	04 c0       	rjmp	.+8      	; 0x1ed4 <_ZN12Adafruit_GFX9writeLineEiiiij+0xde>
    1ecc:	a1 e0       	ldi	r26, 0x01	; 1
    1ece:	b0 e0       	ldi	r27, 0x00	; 0
    1ed0:	ba 83       	std	Y+2, r27	; 0x02
    1ed2:	a9 83       	std	Y+1, r26	; 0x01
    1ed4:	2d 81       	ldd	r18, Y+5	; 0x05
    1ed6:	3e 81       	ldd	r19, Y+6	; 0x06
    1ed8:	a2 16       	cp	r10, r18
    1eda:	b3 06       	cpc	r11, r19
    1edc:	24 f1       	brlt	.+72     	; 0x1f26 <_ZN12Adafruit_GFX9writeLineEiiiij+0x130>
    1ede:	d2 01       	movw	r26, r4
    1ee0:	ed 91       	ld	r30, X+
    1ee2:	fc 91       	ld	r31, X
    1ee4:	04 84       	ldd	r0, Z+12	; 0x0c
    1ee6:	f5 85       	ldd	r31, Z+13	; 0x0d
    1ee8:	e0 2d       	mov	r30, r0
    1eea:	2b 81       	ldd	r18, Y+3	; 0x03
    1eec:	3c 81       	ldd	r19, Y+4	; 0x04
    1eee:	68 14       	cp	r6, r8
    1ef0:	79 04       	cpc	r7, r9
    1ef2:	24 f4       	brge	.+8      	; 0x1efc <_ZN12Adafruit_GFX9writeLineEiiiij+0x106>
    1ef4:	4d 81       	ldd	r20, Y+5	; 0x05
    1ef6:	5e 81       	ldd	r21, Y+6	; 0x06
    1ef8:	b6 01       	movw	r22, r12
    1efa:	03 c0       	rjmp	.+6      	; 0x1f02 <_ZN12Adafruit_GFX9writeLineEiiiij+0x10c>
    1efc:	a6 01       	movw	r20, r12
    1efe:	6d 81       	ldd	r22, Y+5	; 0x05
    1f00:	7e 81       	ldd	r23, Y+6	; 0x06
    1f02:	c2 01       	movw	r24, r4
    1f04:	19 95       	eicall
    1f06:	e2 18       	sub	r14, r2
    1f08:	f3 08       	sbc	r15, r3
    1f0a:	f7 fe       	sbrs	r15, 7
    1f0c:	06 c0       	rjmp	.+12     	; 0x1f1a <_ZN12Adafruit_GFX9writeLineEiiiij+0x124>
    1f0e:	29 81       	ldd	r18, Y+1	; 0x01
    1f10:	3a 81       	ldd	r19, Y+2	; 0x02
    1f12:	c2 0e       	add	r12, r18
    1f14:	d3 1e       	adc	r13, r19
    1f16:	e0 0e       	add	r14, r16
    1f18:	f1 1e       	adc	r15, r17
    1f1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f1e:	01 96       	adiw	r24, 0x01	; 1
    1f20:	9e 83       	std	Y+6, r25	; 0x06
    1f22:	8d 83       	std	Y+5, r24	; 0x05
    1f24:	d7 cf       	rjmp	.-82     	; 0x1ed4 <_ZN12Adafruit_GFX9writeLineEiiiij+0xde>
    1f26:	26 96       	adiw	r28, 0x06	; 6
    1f28:	0f b6       	in	r0, 0x3f	; 63
    1f2a:	f8 94       	cli
    1f2c:	de bf       	out	0x3e, r29	; 62
    1f2e:	0f be       	out	0x3f, r0	; 63
    1f30:	cd bf       	out	0x3d, r28	; 61
    1f32:	df 91       	pop	r29
    1f34:	cf 91       	pop	r28
    1f36:	1f 91       	pop	r17
    1f38:	0f 91       	pop	r16
    1f3a:	ff 90       	pop	r15
    1f3c:	ef 90       	pop	r14
    1f3e:	df 90       	pop	r13
    1f40:	cf 90       	pop	r12
    1f42:	bf 90       	pop	r11
    1f44:	af 90       	pop	r10
    1f46:	9f 90       	pop	r9
    1f48:	8f 90       	pop	r8
    1f4a:	7f 90       	pop	r7
    1f4c:	6f 90       	pop	r6
    1f4e:	5f 90       	pop	r5
    1f50:	4f 90       	pop	r4
    1f52:	3f 90       	pop	r3
    1f54:	2f 90       	pop	r2
    1f56:	08 95       	ret

00001f58 <_ZN12Adafruit_GFX10writePixelEiij>:
    1f58:	dc 01       	movw	r26, r24
    1f5a:	ed 91       	ld	r30, X+
    1f5c:	fc 91       	ld	r31, X
    1f5e:	00 84       	ldd	r0, Z+8	; 0x08
    1f60:	f1 85       	ldd	r31, Z+9	; 0x09
    1f62:	e0 2d       	mov	r30, r0
    1f64:	19 94       	eijmp

00001f66 <_ZN12Adafruit_GFX14writeFastVLineEiiij>:
    1f66:	0f 93       	push	r16
    1f68:	1f 93       	push	r17
    1f6a:	dc 01       	movw	r26, r24
    1f6c:	ed 91       	ld	r30, X+
    1f6e:	fc 91       	ld	r31, X
    1f70:	04 8c       	ldd	r0, Z+28	; 0x1c
    1f72:	f5 8d       	ldd	r31, Z+29	; 0x1d
    1f74:	e0 2d       	mov	r30, r0
    1f76:	19 95       	eicall
    1f78:	1f 91       	pop	r17
    1f7a:	0f 91       	pop	r16
    1f7c:	08 95       	ret

00001f7e <_ZN12Adafruit_GFX14writeFastHLineEiiij>:
    1f7e:	0f 93       	push	r16
    1f80:	1f 93       	push	r17
    1f82:	dc 01       	movw	r26, r24
    1f84:	ed 91       	ld	r30, X+
    1f86:	fc 91       	ld	r31, X
    1f88:	06 8c       	ldd	r0, Z+30	; 0x1e
    1f8a:	f7 8d       	ldd	r31, Z+31	; 0x1f
    1f8c:	e0 2d       	mov	r30, r0
    1f8e:	19 95       	eicall
    1f90:	1f 91       	pop	r17
    1f92:	0f 91       	pop	r16
    1f94:	08 95       	ret

00001f96 <_ZN12Adafruit_GFX13writeFillRectEiiiij>:
    1f96:	ef 92       	push	r14
    1f98:	ff 92       	push	r15
    1f9a:	0f 93       	push	r16
    1f9c:	1f 93       	push	r17
    1f9e:	dc 01       	movw	r26, r24
    1fa0:	ed 91       	ld	r30, X+
    1fa2:	fc 91       	ld	r31, X
    1fa4:	00 a0       	ldd	r0, Z+32	; 0x20
    1fa6:	f1 a1       	ldd	r31, Z+33	; 0x21
    1fa8:	e0 2d       	mov	r30, r0
    1faa:	19 95       	eicall
    1fac:	1f 91       	pop	r17
    1fae:	0f 91       	pop	r16
    1fb0:	ff 90       	pop	r15
    1fb2:	ef 90       	pop	r14
    1fb4:	08 95       	ret

00001fb6 <_ZN12Adafruit_GFX10startWriteEv>:
    1fb6:	08 95       	ret

00001fb8 <_ZN12Adafruit_GFX13drawFastVLineEiiij>:
    1fb8:	8f 92       	push	r8
    1fba:	9f 92       	push	r9
    1fbc:	af 92       	push	r10
    1fbe:	bf 92       	push	r11
    1fc0:	cf 92       	push	r12
    1fc2:	df 92       	push	r13
    1fc4:	ef 92       	push	r14
    1fc6:	ff 92       	push	r15
    1fc8:	0f 93       	push	r16
    1fca:	1f 93       	push	r17
    1fcc:	cf 93       	push	r28
    1fce:	df 93       	push	r29
    1fd0:	ec 01       	movw	r28, r24
    1fd2:	5b 01       	movw	r10, r22
    1fd4:	4a 01       	movw	r8, r20
    1fd6:	69 01       	movw	r12, r18
    1fd8:	78 01       	movw	r14, r16
    1fda:	e8 81       	ld	r30, Y
    1fdc:	f9 81       	ldd	r31, Y+1	; 0x01
    1fde:	02 84       	ldd	r0, Z+10	; 0x0a
    1fe0:	f3 85       	ldd	r31, Z+11	; 0x0b
    1fe2:	e0 2d       	mov	r30, r0
    1fe4:	19 95       	eicall
    1fe6:	c8 0c       	add	r12, r8
    1fe8:	d9 1c       	adc	r13, r9
    1fea:	86 01       	movw	r16, r12
    1fec:	01 50       	subi	r16, 0x01	; 1
    1fee:	11 09       	sbc	r17, r1
    1ff0:	e8 81       	ld	r30, Y
    1ff2:	f9 81       	ldd	r31, Y+1	; 0x01
    1ff4:	04 88       	ldd	r0, Z+20	; 0x14
    1ff6:	f5 89       	ldd	r31, Z+21	; 0x15
    1ff8:	e0 2d       	mov	r30, r0
    1ffa:	95 01       	movw	r18, r10
    1ffc:	a4 01       	movw	r20, r8
    1ffe:	b5 01       	movw	r22, r10
    2000:	ce 01       	movw	r24, r28
    2002:	19 95       	eicall
    2004:	e8 81       	ld	r30, Y
    2006:	f9 81       	ldd	r31, Y+1	; 0x01
    2008:	06 88       	ldd	r0, Z+22	; 0x16
    200a:	f7 89       	ldd	r31, Z+23	; 0x17
    200c:	e0 2d       	mov	r30, r0
    200e:	ce 01       	movw	r24, r28
    2010:	df 91       	pop	r29
    2012:	cf 91       	pop	r28
    2014:	1f 91       	pop	r17
    2016:	0f 91       	pop	r16
    2018:	ff 90       	pop	r15
    201a:	ef 90       	pop	r14
    201c:	df 90       	pop	r13
    201e:	cf 90       	pop	r12
    2020:	bf 90       	pop	r11
    2022:	af 90       	pop	r10
    2024:	9f 90       	pop	r9
    2026:	8f 90       	pop	r8
    2028:	19 94       	eijmp

0000202a <_ZN12Adafruit_GFX13drawFastHLineEiiij>:
    202a:	8f 92       	push	r8
    202c:	9f 92       	push	r9
    202e:	af 92       	push	r10
    2030:	bf 92       	push	r11
    2032:	cf 92       	push	r12
    2034:	df 92       	push	r13
    2036:	ef 92       	push	r14
    2038:	ff 92       	push	r15
    203a:	0f 93       	push	r16
    203c:	1f 93       	push	r17
    203e:	cf 93       	push	r28
    2040:	df 93       	push	r29
    2042:	ec 01       	movw	r28, r24
    2044:	5b 01       	movw	r10, r22
    2046:	4a 01       	movw	r8, r20
    2048:	69 01       	movw	r12, r18
    204a:	e8 81       	ld	r30, Y
    204c:	f9 81       	ldd	r31, Y+1	; 0x01
    204e:	02 84       	ldd	r0, Z+10	; 0x0a
    2050:	f3 85       	ldd	r31, Z+11	; 0x0b
    2052:	e0 2d       	mov	r30, r0
    2054:	19 95       	eicall
    2056:	95 01       	movw	r18, r10
    2058:	2c 0d       	add	r18, r12
    205a:	3d 1d       	adc	r19, r13
    205c:	21 50       	subi	r18, 0x01	; 1
    205e:	31 09       	sbc	r19, r1
    2060:	e8 81       	ld	r30, Y
    2062:	f9 81       	ldd	r31, Y+1	; 0x01
    2064:	04 88       	ldd	r0, Z+20	; 0x14
    2066:	f5 89       	ldd	r31, Z+21	; 0x15
    2068:	e0 2d       	mov	r30, r0
    206a:	78 01       	movw	r14, r16
    206c:	84 01       	movw	r16, r8
    206e:	a4 01       	movw	r20, r8
    2070:	b5 01       	movw	r22, r10
    2072:	ce 01       	movw	r24, r28
    2074:	19 95       	eicall
    2076:	e8 81       	ld	r30, Y
    2078:	f9 81       	ldd	r31, Y+1	; 0x01
    207a:	06 88       	ldd	r0, Z+22	; 0x16
    207c:	f7 89       	ldd	r31, Z+23	; 0x17
    207e:	e0 2d       	mov	r30, r0
    2080:	ce 01       	movw	r24, r28
    2082:	df 91       	pop	r29
    2084:	cf 91       	pop	r28
    2086:	1f 91       	pop	r17
    2088:	0f 91       	pop	r16
    208a:	ff 90       	pop	r15
    208c:	ef 90       	pop	r14
    208e:	df 90       	pop	r13
    2090:	cf 90       	pop	r12
    2092:	bf 90       	pop	r11
    2094:	af 90       	pop	r10
    2096:	9f 90       	pop	r9
    2098:	8f 90       	pop	r8
    209a:	19 94       	eijmp

0000209c <_ZN12Adafruit_GFX8fillRectEiiiij>:
    209c:	4f 92       	push	r4
    209e:	5f 92       	push	r5
    20a0:	6f 92       	push	r6
    20a2:	7f 92       	push	r7
    20a4:	8f 92       	push	r8
    20a6:	9f 92       	push	r9
    20a8:	af 92       	push	r10
    20aa:	bf 92       	push	r11
    20ac:	cf 92       	push	r12
    20ae:	df 92       	push	r13
    20b0:	ef 92       	push	r14
    20b2:	ff 92       	push	r15
    20b4:	0f 93       	push	r16
    20b6:	1f 93       	push	r17
    20b8:	cf 93       	push	r28
    20ba:	df 93       	push	r29
    20bc:	6c 01       	movw	r12, r24
    20be:	2b 01       	movw	r4, r22
    20c0:	5a 01       	movw	r10, r20
    20c2:	39 01       	movw	r6, r18
    20c4:	48 01       	movw	r8, r16
    20c6:	dc 01       	movw	r26, r24
    20c8:	ed 91       	ld	r30, X+
    20ca:	fc 91       	ld	r31, X
    20cc:	02 84       	ldd	r0, Z+10	; 0x0a
    20ce:	f3 85       	ldd	r31, Z+11	; 0x0b
    20d0:	e0 2d       	mov	r30, r0
    20d2:	19 95       	eicall
    20d4:	e2 01       	movw	r28, r4
    20d6:	64 0c       	add	r6, r4
    20d8:	75 1c       	adc	r7, r5
    20da:	d6 01       	movw	r26, r12
    20dc:	ed 91       	ld	r30, X+
    20de:	fc 91       	ld	r31, X
    20e0:	c6 15       	cp	r28, r6
    20e2:	d7 05       	cpc	r29, r7
    20e4:	5c f4       	brge	.+22     	; 0x20fc <_ZN12Adafruit_GFX8fillRectEiiiij+0x60>
    20e6:	00 88       	ldd	r0, Z+16	; 0x10
    20e8:	f1 89       	ldd	r31, Z+17	; 0x11
    20ea:	e0 2d       	mov	r30, r0
    20ec:	87 01       	movw	r16, r14
    20ee:	94 01       	movw	r18, r8
    20f0:	a5 01       	movw	r20, r10
    20f2:	be 01       	movw	r22, r28
    20f4:	c6 01       	movw	r24, r12
    20f6:	19 95       	eicall
    20f8:	21 96       	adiw	r28, 0x01	; 1
    20fa:	ef cf       	rjmp	.-34     	; 0x20da <_ZN12Adafruit_GFX8fillRectEiiiij+0x3e>
    20fc:	06 88       	ldd	r0, Z+22	; 0x16
    20fe:	f7 89       	ldd	r31, Z+23	; 0x17
    2100:	e0 2d       	mov	r30, r0
    2102:	c6 01       	movw	r24, r12
    2104:	df 91       	pop	r29
    2106:	cf 91       	pop	r28
    2108:	1f 91       	pop	r17
    210a:	0f 91       	pop	r16
    210c:	ff 90       	pop	r15
    210e:	ef 90       	pop	r14
    2110:	df 90       	pop	r13
    2112:	cf 90       	pop	r12
    2114:	bf 90       	pop	r11
    2116:	af 90       	pop	r10
    2118:	9f 90       	pop	r9
    211a:	8f 90       	pop	r8
    211c:	7f 90       	pop	r7
    211e:	6f 90       	pop	r6
    2120:	5f 90       	pop	r5
    2122:	4f 90       	pop	r4
    2124:	19 94       	eijmp

00002126 <_ZN12Adafruit_GFX10fillScreenEj>:
    2126:	ef 92       	push	r14
    2128:	ff 92       	push	r15
    212a:	0f 93       	push	r16
    212c:	1f 93       	push	r17
    212e:	dc 01       	movw	r26, r24
    2130:	1a 96       	adiw	r26, 0x0a	; 10
    2132:	0d 91       	ld	r16, X+
    2134:	1c 91       	ld	r17, X
    2136:	1b 97       	sbiw	r26, 0x0b	; 11
    2138:	18 96       	adiw	r26, 0x08	; 8
    213a:	2d 91       	ld	r18, X+
    213c:	3c 91       	ld	r19, X
    213e:	19 97       	sbiw	r26, 0x09	; 9
    2140:	ed 91       	ld	r30, X+
    2142:	fc 91       	ld	r31, X
    2144:	00 a0       	ldd	r0, Z+32	; 0x20
    2146:	f1 a1       	ldd	r31, Z+33	; 0x21
    2148:	e0 2d       	mov	r30, r0
    214a:	7b 01       	movw	r14, r22
    214c:	40 e0       	ldi	r20, 0x00	; 0
    214e:	50 e0       	ldi	r21, 0x00	; 0
    2150:	60 e0       	ldi	r22, 0x00	; 0
    2152:	70 e0       	ldi	r23, 0x00	; 0
    2154:	19 95       	eicall
    2156:	1f 91       	pop	r17
    2158:	0f 91       	pop	r16
    215a:	ff 90       	pop	r15
    215c:	ef 90       	pop	r14
    215e:	08 95       	ret

00002160 <_ZN12Adafruit_GFX8drawLineEiiiij>:
    2160:	8f 92       	push	r8
    2162:	9f 92       	push	r9
    2164:	af 92       	push	r10
    2166:	bf 92       	push	r11
    2168:	cf 92       	push	r12
    216a:	df 92       	push	r13
    216c:	ef 92       	push	r14
    216e:	ff 92       	push	r15
    2170:	0f 93       	push	r16
    2172:	1f 93       	push	r17
    2174:	cf 93       	push	r28
    2176:	df 93       	push	r29
    2178:	4c 01       	movw	r8, r24
    217a:	6b 01       	movw	r12, r22
    217c:	5a 01       	movw	r10, r20
    217e:	e9 01       	movw	r28, r18
    2180:	dc 01       	movw	r26, r24
    2182:	ed 91       	ld	r30, X+
    2184:	fc 91       	ld	r31, X
    2186:	62 17       	cp	r22, r18
    2188:	73 07       	cpc	r23, r19
    218a:	81 f4       	brne	.+32     	; 0x21ac <_ZN12Adafruit_GFX8drawLineEiiiij+0x4c>
    218c:	04 17       	cp	r16, r20
    218e:	15 07       	cpc	r17, r21
    2190:	24 f4       	brge	.+8      	; 0x219a <_ZN12Adafruit_GFX8drawLineEiiiij+0x3a>
    2192:	8b 2d       	mov	r24, r11
    2194:	58 01       	movw	r10, r16
    2196:	04 2f       	mov	r16, r20
    2198:	18 2f       	mov	r17, r24
    219a:	0a 19       	sub	r16, r10
    219c:	1b 09       	sbc	r17, r11
    219e:	98 01       	movw	r18, r16
    21a0:	2f 5f       	subi	r18, 0xFF	; 255
    21a2:	3f 4f       	sbci	r19, 0xFF	; 255
    21a4:	04 8c       	ldd	r0, Z+28	; 0x1c
    21a6:	f5 8d       	ldd	r31, Z+29	; 0x1d
    21a8:	e0 2d       	mov	r30, r0
    21aa:	12 c0       	rjmp	.+36     	; 0x21d0 <_ZN12Adafruit_GFX8drawLineEiiiij+0x70>
    21ac:	40 17       	cp	r20, r16
    21ae:	51 07       	cpc	r21, r17
    21b0:	09 f5       	brne	.+66     	; 0x21f4 <_ZN12Adafruit_GFX8drawLineEiiiij+0x94>
    21b2:	26 17       	cp	r18, r22
    21b4:	37 07       	cpc	r19, r23
    21b6:	24 f4       	brge	.+8      	; 0x21c0 <_ZN12Adafruit_GFX8drawLineEiiiij+0x60>
    21b8:	8d 2d       	mov	r24, r13
    21ba:	69 01       	movw	r12, r18
    21bc:	c6 2f       	mov	r28, r22
    21be:	d8 2f       	mov	r29, r24
    21c0:	9e 01       	movw	r18, r28
    21c2:	2c 19       	sub	r18, r12
    21c4:	3d 09       	sbc	r19, r13
    21c6:	2f 5f       	subi	r18, 0xFF	; 255
    21c8:	3f 4f       	sbci	r19, 0xFF	; 255
    21ca:	06 8c       	ldd	r0, Z+30	; 0x1e
    21cc:	f7 8d       	ldd	r31, Z+31	; 0x1f
    21ce:	e0 2d       	mov	r30, r0
    21d0:	87 01       	movw	r16, r14
    21d2:	a5 01       	movw	r20, r10
    21d4:	b6 01       	movw	r22, r12
    21d6:	c4 01       	movw	r24, r8
    21d8:	19 95       	eicall
    21da:	df 91       	pop	r29
    21dc:	cf 91       	pop	r28
    21de:	1f 91       	pop	r17
    21e0:	0f 91       	pop	r16
    21e2:	ff 90       	pop	r15
    21e4:	ef 90       	pop	r14
    21e6:	df 90       	pop	r13
    21e8:	cf 90       	pop	r12
    21ea:	bf 90       	pop	r11
    21ec:	af 90       	pop	r10
    21ee:	9f 90       	pop	r9
    21f0:	8f 90       	pop	r8
    21f2:	08 95       	ret
    21f4:	02 84       	ldd	r0, Z+10	; 0x0a
    21f6:	f3 85       	ldd	r31, Z+11	; 0x0b
    21f8:	e0 2d       	mov	r30, r0
    21fa:	19 95       	eicall
    21fc:	d4 01       	movw	r26, r8
    21fe:	ed 91       	ld	r30, X+
    2200:	fc 91       	ld	r31, X
    2202:	04 88       	ldd	r0, Z+20	; 0x14
    2204:	f5 89       	ldd	r31, Z+21	; 0x15
    2206:	e0 2d       	mov	r30, r0
    2208:	9e 01       	movw	r18, r28
    220a:	a5 01       	movw	r20, r10
    220c:	b6 01       	movw	r22, r12
    220e:	c4 01       	movw	r24, r8
    2210:	19 95       	eicall
    2212:	d4 01       	movw	r26, r8
    2214:	ed 91       	ld	r30, X+
    2216:	fc 91       	ld	r31, X
    2218:	06 88       	ldd	r0, Z+22	; 0x16
    221a:	f7 89       	ldd	r31, Z+23	; 0x17
    221c:	e0 2d       	mov	r30, r0
    221e:	c4 01       	movw	r24, r8
    2220:	df 91       	pop	r29
    2222:	cf 91       	pop	r28
    2224:	1f 91       	pop	r17
    2226:	0f 91       	pop	r16
    2228:	ff 90       	pop	r15
    222a:	ef 90       	pop	r14
    222c:	df 90       	pop	r13
    222e:	cf 90       	pop	r12
    2230:	bf 90       	pop	r11
    2232:	af 90       	pop	r10
    2234:	9f 90       	pop	r9
    2236:	8f 90       	pop	r8
    2238:	19 94       	eijmp

0000223a <_ZN12Adafruit_GFX8drawRectEiiiij>:
    223a:	6f 92       	push	r6
    223c:	7f 92       	push	r7
    223e:	8f 92       	push	r8
    2240:	9f 92       	push	r9
    2242:	af 92       	push	r10
    2244:	bf 92       	push	r11
    2246:	cf 92       	push	r12
    2248:	df 92       	push	r13
    224a:	ef 92       	push	r14
    224c:	ff 92       	push	r15
    224e:	0f 93       	push	r16
    2250:	1f 93       	push	r17
    2252:	cf 93       	push	r28
    2254:	df 93       	push	r29
    2256:	ec 01       	movw	r28, r24
    2258:	4b 01       	movw	r8, r22
    225a:	5a 01       	movw	r10, r20
    225c:	69 01       	movw	r12, r18
    225e:	38 01       	movw	r6, r16
    2260:	e8 81       	ld	r30, Y
    2262:	f9 81       	ldd	r31, Y+1	; 0x01
    2264:	02 84       	ldd	r0, Z+10	; 0x0a
    2266:	f3 85       	ldd	r31, Z+11	; 0x0b
    2268:	e0 2d       	mov	r30, r0
    226a:	19 95       	eicall
    226c:	e8 81       	ld	r30, Y
    226e:	f9 81       	ldd	r31, Y+1	; 0x01
    2270:	02 88       	ldd	r0, Z+18	; 0x12
    2272:	f3 89       	ldd	r31, Z+19	; 0x13
    2274:	e0 2d       	mov	r30, r0
    2276:	87 01       	movw	r16, r14
    2278:	96 01       	movw	r18, r12
    227a:	a5 01       	movw	r20, r10
    227c:	b4 01       	movw	r22, r8
    227e:	ce 01       	movw	r24, r28
    2280:	19 95       	eicall
    2282:	a5 01       	movw	r20, r10
    2284:	46 0d       	add	r20, r6
    2286:	57 1d       	adc	r21, r7
    2288:	41 50       	subi	r20, 0x01	; 1
    228a:	51 09       	sbc	r21, r1
    228c:	e8 81       	ld	r30, Y
    228e:	f9 81       	ldd	r31, Y+1	; 0x01
    2290:	02 88       	ldd	r0, Z+18	; 0x12
    2292:	f3 89       	ldd	r31, Z+19	; 0x13
    2294:	e0 2d       	mov	r30, r0
    2296:	96 01       	movw	r18, r12
    2298:	b4 01       	movw	r22, r8
    229a:	ce 01       	movw	r24, r28
    229c:	19 95       	eicall
    229e:	e8 81       	ld	r30, Y
    22a0:	f9 81       	ldd	r31, Y+1	; 0x01
    22a2:	00 88       	ldd	r0, Z+16	; 0x10
    22a4:	f1 89       	ldd	r31, Z+17	; 0x11
    22a6:	e0 2d       	mov	r30, r0
    22a8:	93 01       	movw	r18, r6
    22aa:	a5 01       	movw	r20, r10
    22ac:	b4 01       	movw	r22, r8
    22ae:	ce 01       	movw	r24, r28
    22b0:	19 95       	eicall
    22b2:	c8 0c       	add	r12, r8
    22b4:	d9 1c       	adc	r13, r9
    22b6:	b6 01       	movw	r22, r12
    22b8:	61 50       	subi	r22, 0x01	; 1
    22ba:	71 09       	sbc	r23, r1
    22bc:	e8 81       	ld	r30, Y
    22be:	f9 81       	ldd	r31, Y+1	; 0x01
    22c0:	00 88       	ldd	r0, Z+16	; 0x10
    22c2:	f1 89       	ldd	r31, Z+17	; 0x11
    22c4:	e0 2d       	mov	r30, r0
    22c6:	93 01       	movw	r18, r6
    22c8:	a5 01       	movw	r20, r10
    22ca:	ce 01       	movw	r24, r28
    22cc:	19 95       	eicall
    22ce:	e8 81       	ld	r30, Y
    22d0:	f9 81       	ldd	r31, Y+1	; 0x01
    22d2:	06 88       	ldd	r0, Z+22	; 0x16
    22d4:	f7 89       	ldd	r31, Z+23	; 0x17
    22d6:	e0 2d       	mov	r30, r0
    22d8:	ce 01       	movw	r24, r28
    22da:	df 91       	pop	r29
    22dc:	cf 91       	pop	r28
    22de:	1f 91       	pop	r17
    22e0:	0f 91       	pop	r16
    22e2:	ff 90       	pop	r15
    22e4:	ef 90       	pop	r14
    22e6:	df 90       	pop	r13
    22e8:	cf 90       	pop	r12
    22ea:	bf 90       	pop	r11
    22ec:	af 90       	pop	r10
    22ee:	9f 90       	pop	r9
    22f0:	8f 90       	pop	r8
    22f2:	7f 90       	pop	r7
    22f4:	6f 90       	pop	r6
    22f6:	19 94       	eijmp

000022f8 <_ZN12Adafruit_GFX13invertDisplayEb>:
    22f8:	08 95       	ret

000022fa <_ZN12Adafruit_GFX11setRotationEh>:
    22fa:	fc 01       	movw	r30, r24
    22fc:	63 70       	andi	r22, 0x03	; 3
    22fe:	66 8b       	std	Z+22, r22	; 0x16
    2300:	84 81       	ldd	r24, Z+4	; 0x04
    2302:	95 81       	ldd	r25, Z+5	; 0x05
    2304:	26 81       	ldd	r18, Z+6	; 0x06
    2306:	37 81       	ldd	r19, Z+7	; 0x07
    2308:	61 30       	cpi	r22, 0x01	; 1
    230a:	39 f0       	breq	.+14     	; 0x231a <_ZN12Adafruit_GFX11setRotationEh+0x20>
    230c:	63 30       	cpi	r22, 0x03	; 3
    230e:	29 f0       	breq	.+10     	; 0x231a <_ZN12Adafruit_GFX11setRotationEh+0x20>
    2310:	91 87       	std	Z+9, r25	; 0x09
    2312:	80 87       	std	Z+8, r24	; 0x08
    2314:	33 87       	std	Z+11, r19	; 0x0b
    2316:	22 87       	std	Z+10, r18	; 0x0a
    2318:	08 95       	ret
    231a:	31 87       	std	Z+9, r19	; 0x09
    231c:	20 87       	std	Z+8, r18	; 0x08
    231e:	93 87       	std	Z+11, r25	; 0x0b
    2320:	82 87       	std	Z+10, r24	; 0x0a
    2322:	08 95       	ret

00002324 <_ZN12Adafruit_GFXC1Eii>:
    2324:	fc 01       	movw	r30, r24
    2326:	13 82       	std	Z+3, r1	; 0x03
    2328:	12 82       	std	Z+2, r1	; 0x02
    232a:	82 e2       	ldi	r24, 0x22	; 34
    232c:	93 e0       	ldi	r25, 0x03	; 3
    232e:	91 83       	std	Z+1, r25	; 0x01
    2330:	80 83       	st	Z, r24
    2332:	75 83       	std	Z+5, r23	; 0x05
    2334:	64 83       	std	Z+4, r22	; 0x04
    2336:	57 83       	std	Z+7, r21	; 0x07
    2338:	46 83       	std	Z+6, r20	; 0x06
    233a:	71 87       	std	Z+9, r23	; 0x09
    233c:	60 87       	std	Z+8, r22	; 0x08
    233e:	53 87       	std	Z+11, r21	; 0x0b
    2340:	42 87       	std	Z+10, r20	; 0x0a
    2342:	16 8a       	std	Z+22, r1	; 0x16
    2344:	15 86       	std	Z+13, r1	; 0x0d
    2346:	14 86       	std	Z+12, r1	; 0x0c
    2348:	17 86       	std	Z+15, r1	; 0x0f
    234a:	16 86       	std	Z+14, r1	; 0x0e
    234c:	81 e0       	ldi	r24, 0x01	; 1
    234e:	85 8b       	std	Z+21, r24	; 0x15
    2350:	84 8b       	std	Z+20, r24	; 0x14
    2352:	2f ef       	ldi	r18, 0xFF	; 255
    2354:	3f ef       	ldi	r19, 0xFF	; 255
    2356:	33 8b       	std	Z+19, r19	; 0x13
    2358:	22 8b       	std	Z+18, r18	; 0x12
    235a:	31 8b       	std	Z+17, r19	; 0x11
    235c:	20 8b       	std	Z+16, r18	; 0x10
    235e:	87 8b       	std	Z+23, r24	; 0x17
    2360:	10 8e       	std	Z+24, r1	; 0x18
    2362:	12 8e       	std	Z+26, r1	; 0x1a
    2364:	11 8e       	std	Z+25, r1	; 0x19
    2366:	08 95       	ret

00002368 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij>:
    2368:	3f 92       	push	r3
    236a:	4f 92       	push	r4
    236c:	5f 92       	push	r5
    236e:	6f 92       	push	r6
    2370:	7f 92       	push	r7
    2372:	8f 92       	push	r8
    2374:	9f 92       	push	r9
    2376:	af 92       	push	r10
    2378:	bf 92       	push	r11
    237a:	cf 92       	push	r12
    237c:	df 92       	push	r13
    237e:	ef 92       	push	r14
    2380:	ff 92       	push	r15
    2382:	0f 93       	push	r16
    2384:	1f 93       	push	r17
    2386:	cf 93       	push	r28
    2388:	df 93       	push	r29
    238a:	cd b7       	in	r28, 0x3d	; 61
    238c:	de b7       	in	r29, 0x3e	; 62
    238e:	2a 97       	sbiw	r28, 0x0a	; 10
    2390:	0f b6       	in	r0, 0x3f	; 63
    2392:	f8 94       	cli
    2394:	de bf       	out	0x3e, r29	; 62
    2396:	0f be       	out	0x3f, r0	; 63
    2398:	cd bf       	out	0x3d, r28	; 61
    239a:	5c 01       	movw	r10, r24
    239c:	7e 83       	std	Y+6, r23	; 0x06
    239e:	6d 83       	std	Y+5, r22	; 0x05
    23a0:	58 87       	std	Y+8, r21	; 0x08
    23a2:	4f 83       	std	Y+7, r20	; 0x07
    23a4:	29 01       	movw	r4, r18
    23a6:	37 01       	movw	r6, r14
    23a8:	dc 01       	movw	r26, r24
    23aa:	ed 91       	ld	r30, X+
    23ac:	fc 91       	ld	r31, X
    23ae:	02 84       	ldd	r0, Z+10	; 0x0a
    23b0:	f3 85       	ldd	r31, Z+11	; 0x0b
    23b2:	e0 2d       	mov	r30, r0
    23b4:	19 95       	eicall
    23b6:	c8 01       	movw	r24, r16
    23b8:	07 96       	adiw	r24, 0x07	; 7
    23ba:	97 fd       	sbrc	r25, 7
    23bc:	07 96       	adiw	r24, 0x07	; 7
    23be:	9c 01       	movw	r18, r24
    23c0:	93 e0       	ldi	r25, 0x03	; 3
    23c2:	35 95       	asr	r19
    23c4:	27 95       	ror	r18
    23c6:	9a 95       	dec	r25
    23c8:	e1 f7       	brne	.-8      	; 0x23c2 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x5a>
    23ca:	3a 83       	std	Y+2, r19	; 0x02
    23cc:	29 83       	std	Y+1, r18	; 0x01
    23ce:	81 2c       	mov	r8, r1
    23d0:	91 2c       	mov	r9, r1
    23d2:	e1 2c       	mov	r14, r1
    23d4:	f1 2c       	mov	r15, r1
    23d6:	31 2c       	mov	r3, r1
    23d8:	8f 81       	ldd	r24, Y+7	; 0x07
    23da:	98 85       	ldd	r25, Y+8	; 0x08
    23dc:	8e 0d       	add	r24, r14
    23de:	9f 1d       	adc	r25, r15
    23e0:	9c 83       	std	Y+4, r25	; 0x04
    23e2:	8b 83       	std	Y+3, r24	; 0x03
    23e4:	e6 14       	cp	r14, r6
    23e6:	f7 04       	cpc	r15, r7
    23e8:	0c f0       	brlt	.+2      	; 0x23ec <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x84>
    23ea:	3d c0       	rjmp	.+122    	; 0x2466 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xfe>
    23ec:	1a 86       	std	Y+10, r1	; 0x0a
    23ee:	19 86       	std	Y+9, r1	; 0x09
    23f0:	a9 85       	ldd	r26, Y+9	; 0x09
    23f2:	ba 85       	ldd	r27, Y+10	; 0x0a
    23f4:	a0 17       	cp	r26, r16
    23f6:	b1 07       	cpc	r27, r17
    23f8:	74 f5       	brge	.+92     	; 0x2456 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xee>
    23fa:	cd 01       	movw	r24, r26
    23fc:	87 70       	andi	r24, 0x07	; 7
    23fe:	99 27       	eor	r25, r25
    2400:	89 2b       	or	r24, r25
    2402:	11 f0       	breq	.+4      	; 0x2408 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xa0>
    2404:	33 0c       	add	r3, r3
    2406:	0e c0       	rjmp	.+28     	; 0x2424 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xbc>
    2408:	e9 85       	ldd	r30, Y+9	; 0x09
    240a:	fa 85       	ldd	r31, Y+10	; 0x0a
    240c:	f7 fd       	sbrc	r31, 7
    240e:	37 96       	adiw	r30, 0x07	; 7
    2410:	83 e0       	ldi	r24, 0x03	; 3
    2412:	f5 95       	asr	r31
    2414:	e7 95       	ror	r30
    2416:	8a 95       	dec	r24
    2418:	e1 f7       	brne	.-8      	; 0x2412 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xaa>
    241a:	e8 0d       	add	r30, r8
    241c:	f9 1d       	adc	r31, r9
    241e:	e4 0d       	add	r30, r4
    2420:	f5 1d       	adc	r31, r5
    2422:	34 90       	lpm	r3, Z
    2424:	37 fe       	sbrs	r3, 7
    2426:	11 c0       	rjmp	.+34     	; 0x244a <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xe2>
    2428:	d5 01       	movw	r26, r10
    242a:	ed 91       	ld	r30, X+
    242c:	fc 91       	ld	r31, X
    242e:	04 84       	ldd	r0, Z+12	; 0x0c
    2430:	f5 85       	ldd	r31, Z+13	; 0x0d
    2432:	e0 2d       	mov	r30, r0
    2434:	96 01       	movw	r18, r12
    2436:	4b 81       	ldd	r20, Y+3	; 0x03
    2438:	5c 81       	ldd	r21, Y+4	; 0x04
    243a:	6d 81       	ldd	r22, Y+5	; 0x05
    243c:	7e 81       	ldd	r23, Y+6	; 0x06
    243e:	89 85       	ldd	r24, Y+9	; 0x09
    2440:	9a 85       	ldd	r25, Y+10	; 0x0a
    2442:	68 0f       	add	r22, r24
    2444:	79 1f       	adc	r23, r25
    2446:	c5 01       	movw	r24, r10
    2448:	19 95       	eicall
    244a:	a9 85       	ldd	r26, Y+9	; 0x09
    244c:	ba 85       	ldd	r27, Y+10	; 0x0a
    244e:	11 96       	adiw	r26, 0x01	; 1
    2450:	ba 87       	std	Y+10, r27	; 0x0a
    2452:	a9 87       	std	Y+9, r26	; 0x09
    2454:	cd cf       	rjmp	.-102    	; 0x23f0 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x88>
    2456:	bf ef       	ldi	r27, 0xFF	; 255
    2458:	eb 1a       	sub	r14, r27
    245a:	fb 0a       	sbc	r15, r27
    245c:	29 81       	ldd	r18, Y+1	; 0x01
    245e:	3a 81       	ldd	r19, Y+2	; 0x02
    2460:	82 0e       	add	r8, r18
    2462:	93 1e       	adc	r9, r19
    2464:	b9 cf       	rjmp	.-142    	; 0x23d8 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x70>
    2466:	d5 01       	movw	r26, r10
    2468:	ed 91       	ld	r30, X+
    246a:	fc 91       	ld	r31, X
    246c:	06 88       	ldd	r0, Z+22	; 0x16
    246e:	f7 89       	ldd	r31, Z+23	; 0x17
    2470:	e0 2d       	mov	r30, r0
    2472:	c5 01       	movw	r24, r10
    2474:	2a 96       	adiw	r28, 0x0a	; 10
    2476:	0f b6       	in	r0, 0x3f	; 63
    2478:	f8 94       	cli
    247a:	de bf       	out	0x3e, r29	; 62
    247c:	0f be       	out	0x3f, r0	; 63
    247e:	cd bf       	out	0x3d, r28	; 61
    2480:	df 91       	pop	r29
    2482:	cf 91       	pop	r28
    2484:	1f 91       	pop	r17
    2486:	0f 91       	pop	r16
    2488:	ff 90       	pop	r15
    248a:	ef 90       	pop	r14
    248c:	df 90       	pop	r13
    248e:	cf 90       	pop	r12
    2490:	bf 90       	pop	r11
    2492:	af 90       	pop	r10
    2494:	9f 90       	pop	r9
    2496:	8f 90       	pop	r8
    2498:	7f 90       	pop	r7
    249a:	6f 90       	pop	r6
    249c:	5f 90       	pop	r5
    249e:	4f 90       	pop	r4
    24a0:	3f 90       	pop	r3
    24a2:	19 94       	eijmp

000024a4 <_ZN12Adafruit_GFX8drawCharEiihjjhh>:
    24a4:	2f 92       	push	r2
    24a6:	3f 92       	push	r3
    24a8:	4f 92       	push	r4
    24aa:	5f 92       	push	r5
    24ac:	6f 92       	push	r6
    24ae:	7f 92       	push	r7
    24b0:	8f 92       	push	r8
    24b2:	9f 92       	push	r9
    24b4:	af 92       	push	r10
    24b6:	bf 92       	push	r11
    24b8:	cf 92       	push	r12
    24ba:	df 92       	push	r13
    24bc:	ef 92       	push	r14
    24be:	ff 92       	push	r15
    24c0:	0f 93       	push	r16
    24c2:	1f 93       	push	r17
    24c4:	cf 93       	push	r28
    24c6:	df 93       	push	r29
    24c8:	cd b7       	in	r28, 0x3d	; 61
    24ca:	de b7       	in	r29, 0x3e	; 62
    24cc:	6b 97       	sbiw	r28, 0x1b	; 27
    24ce:	0f b6       	in	r0, 0x3f	; 63
    24d0:	f8 94       	cli
    24d2:	de bf       	out	0x3e, r29	; 62
    24d4:	0f be       	out	0x3f, r0	; 63
    24d6:	cd bf       	out	0x3d, r28	; 61
    24d8:	9b 8f       	std	Y+27, r25	; 0x1b
    24da:	8a 8f       	std	Y+26, r24	; 0x1a
    24dc:	2b 01       	movw	r4, r22
    24de:	5a 83       	std	Y+2, r21	; 0x02
    24e0:	49 83       	std	Y+1, r20	; 0x01
    24e2:	d2 2e       	mov	r13, r18
    24e4:	19 87       	std	Y+9, r17	; 0x09
    24e6:	08 87       	std	Y+8, r16	; 0x08
    24e8:	47 01       	movw	r8, r14
    24ea:	ab 82       	std	Y+3, r10	; 0x03
    24ec:	dc 01       	movw	r26, r24
    24ee:	59 96       	adiw	r26, 0x19	; 25
    24f0:	2d 91       	ld	r18, X+
    24f2:	3c 91       	ld	r19, X
    24f4:	5a 97       	sbiw	r26, 0x1a	; 26
    24f6:	21 15       	cp	r18, r1
    24f8:	31 05       	cpc	r19, r1
    24fa:	09 f0       	breq	.+2      	; 0x24fe <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x5a>
    24fc:	00 c1       	rjmp	.+512    	; 0x26fe <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x25a>
    24fe:	18 96       	adiw	r26, 0x08	; 8
    2500:	8d 91       	ld	r24, X+
    2502:	9c 91       	ld	r25, X
    2504:	19 97       	sbiw	r26, 0x09	; 9
    2506:	68 17       	cp	r22, r24
    2508:	79 07       	cpc	r23, r25
    250a:	0c f0       	brlt	.+2      	; 0x250e <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x6a>
    250c:	e7 c1       	rjmp	.+974    	; 0x28dc <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x438>
    250e:	1a 96       	adiw	r26, 0x0a	; 10
    2510:	8d 91       	ld	r24, X+
    2512:	9c 91       	ld	r25, X
    2514:	1b 97       	sbiw	r26, 0x0b	; 11
    2516:	48 17       	cp	r20, r24
    2518:	59 07       	cpc	r21, r25
    251a:	0c f0       	brlt	.+2      	; 0x251e <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x7a>
    251c:	df c1       	rjmp	.+958    	; 0x28dc <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x438>
    251e:	2c 2c       	mov	r2, r12
    2520:	31 2c       	mov	r3, r1
    2522:	fb 01       	movw	r30, r22
    2524:	26 e0       	ldi	r18, 0x06	; 6
    2526:	c2 9e       	mul	r12, r18
    2528:	e0 0d       	add	r30, r0
    252a:	f1 1d       	adc	r31, r1
    252c:	11 24       	eor	r1, r1
    252e:	fd 87       	std	Y+13, r31	; 0x0d
    2530:	ec 87       	std	Y+12, r30	; 0x0c
    2532:	1e 16       	cp	r1, r30
    2534:	1f 06       	cpc	r1, r31
    2536:	0c f0       	brlt	.+2      	; 0x253a <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x96>
    2538:	d1 c1       	rjmp	.+930    	; 0x28dc <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x438>
    253a:	4a 2d       	mov	r20, r10
    253c:	50 e0       	ldi	r21, 0x00	; 0
    253e:	5b 87       	std	Y+11, r21	; 0x0b
    2540:	4a 87       	std	Y+10, r20	; 0x0a
    2542:	83 e0       	ldi	r24, 0x03	; 3
    2544:	44 0f       	add	r20, r20
    2546:	55 1f       	adc	r21, r21
    2548:	8a 95       	dec	r24
    254a:	e1 f7       	brne	.-8      	; 0x2544 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xa0>
    254c:	5f 87       	std	Y+15, r21	; 0x0f
    254e:	4e 87       	std	Y+14, r20	; 0x0e
    2550:	89 81       	ldd	r24, Y+1	; 0x01
    2552:	9a 81       	ldd	r25, Y+2	; 0x02
    2554:	84 0f       	add	r24, r20
    2556:	95 1f       	adc	r25, r21
    2558:	18 16       	cp	r1, r24
    255a:	19 06       	cpc	r1, r25
    255c:	0c f0       	brlt	.+2      	; 0x2560 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xbc>
    255e:	be c1       	rjmp	.+892    	; 0x28dc <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x438>
    2560:	58 96       	adiw	r26, 0x18	; 24
    2562:	8c 91       	ld	r24, X
    2564:	81 11       	cpse	r24, r1
    2566:	04 c0       	rjmp	.+8      	; 0x2570 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xcc>
    2568:	6f ea       	ldi	r22, 0xAF	; 175
    256a:	6d 15       	cp	r22, r13
    256c:	08 f4       	brcc	.+2      	; 0x2570 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xcc>
    256e:	d3 94       	inc	r13
    2570:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2572:	bb 8d       	ldd	r27, Y+27	; 0x1b
    2574:	ed 91       	ld	r30, X+
    2576:	fc 91       	ld	r31, X
    2578:	11 97       	sbiw	r26, 0x01	; 1
    257a:	02 84       	ldd	r0, Z+10	; 0x0a
    257c:	f3 85       	ldd	r31, Z+11	; 0x0b
    257e:	e0 2d       	mov	r30, r0
    2580:	cd 01       	movw	r24, r26
    2582:	19 95       	eicall
    2584:	b5 e0       	ldi	r27, 0x05	; 5
    2586:	db 9e       	mul	r13, r27
    2588:	c0 01       	movw	r24, r0
    258a:	11 24       	eor	r1, r1
    258c:	ec 2d       	mov	r30, r12
    258e:	f0 e0       	ldi	r31, 0x00	; 0
    2590:	f9 8b       	std	Y+17, r31	; 0x11
    2592:	e8 8b       	std	Y+16, r30	; 0x10
    2594:	92 01       	movw	r18, r4
    2596:	2b 5f       	subi	r18, 0xFB	; 251
    2598:	3f 4f       	sbci	r19, 0xFF	; 255
    259a:	3b 8b       	std	Y+19, r19	; 0x13
    259c:	2a 8b       	std	Y+18, r18	; 0x12
    259e:	32 01       	movw	r6, r4
    25a0:	5d 82       	std	Y+5, r5	; 0x05
    25a2:	4c 82       	std	Y+4, r4	; 0x04
    25a4:	ac 01       	movw	r20, r24
    25a6:	44 19       	sub	r20, r4
    25a8:	55 09       	sbc	r21, r5
    25aa:	5d 8b       	std	Y+21, r21	; 0x15
    25ac:	4c 8b       	std	Y+20, r20	; 0x14
    25ae:	7b 81       	ldd	r23, Y+3	; 0x03
    25b0:	67 2f       	mov	r22, r23
    25b2:	70 e0       	ldi	r23, 0x00	; 0
    25b4:	7f 8b       	std	Y+23, r23	; 0x17
    25b6:	6e 8b       	std	Y+22, r22	; 0x16
    25b8:	89 81       	ldd	r24, Y+1	; 0x01
    25ba:	9a 81       	ldd	r25, Y+2	; 0x02
    25bc:	08 96       	adiw	r24, 0x08	; 8
    25be:	99 8f       	std	Y+25, r25	; 0x19
    25c0:	88 8f       	std	Y+24, r24	; 0x18
    25c2:	ec 89       	ldd	r30, Y+20	; 0x14
    25c4:	fd 89       	ldd	r31, Y+21	; 0x15
    25c6:	e6 0d       	add	r30, r6
    25c8:	f7 1d       	adc	r31, r7
    25ca:	ec 5c       	subi	r30, 0xCC	; 204
    25cc:	fd 4f       	sbci	r31, 0xFD	; 253
    25ce:	d4 90       	lpm	r13, Z
    25d0:	a9 81       	ldd	r26, Y+1	; 0x01
    25d2:	ba 81       	ldd	r27, Y+2	; 0x02
    25d4:	bf 83       	std	Y+7, r27	; 0x07
    25d6:	ae 83       	std	Y+6, r26	; 0x06
    25d8:	5d 01       	movw	r10, r26
    25da:	d0 fe       	sbrs	r13, 0
    25dc:	16 c0       	rjmp	.+44     	; 0x260a <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x166>
    25de:	aa 8d       	ldd	r26, Y+26	; 0x1a
    25e0:	bb 8d       	ldd	r27, Y+27	; 0x1b
    25e2:	ed 91       	ld	r30, X+
    25e4:	fc 91       	ld	r31, X
    25e6:	b1 e0       	ldi	r27, 0x01	; 1
    25e8:	cb 12       	cpse	r12, r27
    25ea:	09 c0       	rjmp	.+18     	; 0x25fe <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x15a>
    25ec:	2b 81       	ldd	r18, Y+3	; 0x03
    25ee:	21 30       	cpi	r18, 0x01	; 1
    25f0:	31 f4       	brne	.+12     	; 0x25fe <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x15a>
    25f2:	04 84       	ldd	r0, Z+12	; 0x0c
    25f4:	f5 85       	ldd	r31, Z+13	; 0x0d
    25f6:	e0 2d       	mov	r30, r0
    25f8:	28 85       	ldd	r18, Y+8	; 0x08
    25fa:	39 85       	ldd	r19, Y+9	; 0x09
    25fc:	19 c0       	rjmp	.+50     	; 0x2630 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x18c>
    25fe:	06 84       	ldd	r0, Z+14	; 0x0e
    2600:	f7 85       	ldd	r31, Z+15	; 0x0f
    2602:	e0 2d       	mov	r30, r0
    2604:	e8 84       	ldd	r14, Y+8	; 0x08
    2606:	f9 84       	ldd	r15, Y+9	; 0x09
    2608:	1d c0       	rjmp	.+58     	; 0x2644 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1a0>
    260a:	48 85       	ldd	r20, Y+8	; 0x08
    260c:	59 85       	ldd	r21, Y+9	; 0x09
    260e:	48 15       	cp	r20, r8
    2610:	59 05       	cpc	r21, r9
    2612:	11 f1       	breq	.+68     	; 0x2658 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1b4>
    2614:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2616:	bb 8d       	ldd	r27, Y+27	; 0x1b
    2618:	ed 91       	ld	r30, X+
    261a:	fc 91       	ld	r31, X
    261c:	b1 e0       	ldi	r27, 0x01	; 1
    261e:	cb 12       	cpse	r12, r27
    2620:	0d c0       	rjmp	.+26     	; 0x263c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x198>
    2622:	2b 81       	ldd	r18, Y+3	; 0x03
    2624:	21 30       	cpi	r18, 0x01	; 1
    2626:	51 f4       	brne	.+20     	; 0x263c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x198>
    2628:	04 84       	ldd	r0, Z+12	; 0x0c
    262a:	f5 85       	ldd	r31, Z+13	; 0x0d
    262c:	e0 2d       	mov	r30, r0
    262e:	94 01       	movw	r18, r8
    2630:	a5 01       	movw	r20, r10
    2632:	b3 01       	movw	r22, r6
    2634:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2636:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2638:	19 95       	eicall
    263a:	0e c0       	rjmp	.+28     	; 0x2658 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1b4>
    263c:	06 84       	ldd	r0, Z+14	; 0x0e
    263e:	f7 85       	ldd	r31, Z+15	; 0x0f
    2640:	e0 2d       	mov	r30, r0
    2642:	74 01       	movw	r14, r8
    2644:	0a 85       	ldd	r16, Y+10	; 0x0a
    2646:	1b 85       	ldd	r17, Y+11	; 0x0b
    2648:	91 01       	movw	r18, r2
    264a:	4e 81       	ldd	r20, Y+6	; 0x06
    264c:	5f 81       	ldd	r21, Y+7	; 0x07
    264e:	6c 81       	ldd	r22, Y+4	; 0x04
    2650:	7d 81       	ldd	r23, Y+5	; 0x05
    2652:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2654:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2656:	19 95       	eicall
    2658:	d6 94       	lsr	r13
    265a:	4e 81       	ldd	r20, Y+6	; 0x06
    265c:	5f 81       	ldd	r21, Y+7	; 0x07
    265e:	6e 89       	ldd	r22, Y+22	; 0x16
    2660:	7f 89       	ldd	r23, Y+23	; 0x17
    2662:	46 0f       	add	r20, r22
    2664:	57 1f       	adc	r21, r23
    2666:	5f 83       	std	Y+7, r21	; 0x07
    2668:	4e 83       	std	Y+6, r20	; 0x06
    266a:	7f ef       	ldi	r23, 0xFF	; 255
    266c:	a7 1a       	sub	r10, r23
    266e:	b7 0a       	sbc	r11, r23
    2670:	88 8d       	ldd	r24, Y+24	; 0x18
    2672:	99 8d       	ldd	r25, Y+25	; 0x19
    2674:	a8 16       	cp	r10, r24
    2676:	b9 06       	cpc	r11, r25
    2678:	09 f0       	breq	.+2      	; 0x267c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1d8>
    267a:	af cf       	rjmp	.-162    	; 0x25da <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x136>
    267c:	ac 81       	ldd	r26, Y+4	; 0x04
    267e:	bd 81       	ldd	r27, Y+5	; 0x05
    2680:	e8 89       	ldd	r30, Y+16	; 0x10
    2682:	f9 89       	ldd	r31, Y+17	; 0x11
    2684:	ae 0f       	add	r26, r30
    2686:	bf 1f       	adc	r27, r31
    2688:	bd 83       	std	Y+5, r27	; 0x05
    268a:	ac 83       	std	Y+4, r26	; 0x04
    268c:	ff ef       	ldi	r31, 0xFF	; 255
    268e:	6f 1a       	sub	r6, r31
    2690:	7f 0a       	sbc	r7, r31
    2692:	2a 89       	ldd	r18, Y+18	; 0x12
    2694:	3b 89       	ldd	r19, Y+19	; 0x13
    2696:	62 16       	cp	r6, r18
    2698:	73 06       	cpc	r7, r19
    269a:	09 f0       	breq	.+2      	; 0x269e <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1fa>
    269c:	92 cf       	rjmp	.-220    	; 0x25c2 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x11e>
    269e:	48 85       	ldd	r20, Y+8	; 0x08
    26a0:	59 85       	ldd	r21, Y+9	; 0x09
    26a2:	48 15       	cp	r20, r8
    26a4:	59 05       	cpc	r21, r9
    26a6:	09 f4       	brne	.+2      	; 0x26aa <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x206>
    26a8:	f7 c0       	rjmp	.+494    	; 0x2898 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3f4>
    26aa:	aa 8d       	ldd	r26, Y+26	; 0x1a
    26ac:	bb 8d       	ldd	r27, Y+27	; 0x1b
    26ae:	ed 91       	ld	r30, X+
    26b0:	fc 91       	ld	r31, X
    26b2:	b1 e0       	ldi	r27, 0x01	; 1
    26b4:	cb 12       	cpse	r12, r27
    26b6:	12 c0       	rjmp	.+36     	; 0x26dc <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x238>
    26b8:	2b 81       	ldd	r18, Y+3	; 0x03
    26ba:	21 30       	cpi	r18, 0x01	; 1
    26bc:	79 f4       	brne	.+30     	; 0x26dc <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x238>
    26be:	b2 01       	movw	r22, r4
    26c0:	6b 5f       	subi	r22, 0xFB	; 251
    26c2:	7f 4f       	sbci	r23, 0xFF	; 255
    26c4:	00 88       	ldd	r0, Z+16	; 0x10
    26c6:	f1 89       	ldd	r31, Z+17	; 0x11
    26c8:	e0 2d       	mov	r30, r0
    26ca:	84 01       	movw	r16, r8
    26cc:	28 e0       	ldi	r18, 0x08	; 8
    26ce:	30 e0       	ldi	r19, 0x00	; 0
    26d0:	49 81       	ldd	r20, Y+1	; 0x01
    26d2:	5a 81       	ldd	r21, Y+2	; 0x02
    26d4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    26d6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    26d8:	19 95       	eicall
    26da:	de c0       	rjmp	.+444    	; 0x2898 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3f4>
    26dc:	6c 85       	ldd	r22, Y+12	; 0x0c
    26de:	7d 85       	ldd	r23, Y+13	; 0x0d
    26e0:	62 19       	sub	r22, r2
    26e2:	73 09       	sbc	r23, r3
    26e4:	06 84       	ldd	r0, Z+14	; 0x0e
    26e6:	f7 85       	ldd	r31, Z+15	; 0x0f
    26e8:	e0 2d       	mov	r30, r0
    26ea:	74 01       	movw	r14, r8
    26ec:	0e 85       	ldd	r16, Y+14	; 0x0e
    26ee:	1f 85       	ldd	r17, Y+15	; 0x0f
    26f0:	91 01       	movw	r18, r2
    26f2:	49 81       	ldd	r20, Y+1	; 0x01
    26f4:	5a 81       	ldd	r21, Y+2	; 0x02
    26f6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    26f8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    26fa:	19 95       	eicall
    26fc:	cd c0       	rjmp	.+410    	; 0x2898 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3f4>
    26fe:	f9 01       	movw	r30, r18
    2700:	34 96       	adiw	r30, 0x04	; 4
    2702:	e4 91       	lpm	r30, Z
    2704:	de 1a       	sub	r13, r30
    2706:	f9 01       	movw	r30, r18
    2708:	32 96       	adiw	r30, 0x02	; 2
    270a:	85 91       	lpm	r24, Z+
    270c:	94 91       	lpm	r25, Z
    270e:	b7 e0       	ldi	r27, 0x07	; 7
    2710:	db 9e       	mul	r13, r27
    2712:	80 0d       	add	r24, r0
    2714:	91 1d       	adc	r25, r1
    2716:	11 24       	eor	r1, r1
    2718:	f9 01       	movw	r30, r18
    271a:	25 91       	lpm	r18, Z+
    271c:	34 91       	lpm	r19, Z
    271e:	39 8b       	std	Y+17, r19	; 0x11
    2720:	28 8b       	std	Y+16, r18	; 0x10
    2722:	fc 01       	movw	r30, r24
    2724:	25 90       	lpm	r2, Z+
    2726:	34 90       	lpm	r3, Z
    2728:	fc 01       	movw	r30, r24
    272a:	32 96       	adiw	r30, 0x02	; 2
    272c:	74 90       	lpm	r7, Z
    272e:	31 96       	adiw	r30, 0x01	; 1
    2730:	a4 90       	lpm	r10, Z
    2732:	32 96       	adiw	r30, 0x02	; 2
    2734:	94 90       	lpm	r9, Z
    2736:	31 96       	adiw	r30, 0x01	; 1
    2738:	b4 90       	lpm	r11, Z
    273a:	31 e0       	ldi	r19, 0x01	; 1
    273c:	3c 15       	cp	r19, r12
    273e:	18 f0       	brcs	.+6      	; 0x2746 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x2a2>
    2740:	4b 81       	ldd	r20, Y+3	; 0x03
    2742:	42 30       	cpi	r20, 0x02	; 2
    2744:	68 f0       	brcs	.+26     	; 0x2760 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x2bc>
    2746:	69 2d       	mov	r22, r9
    2748:	09 2c       	mov	r0, r9
    274a:	00 0c       	add	r0, r0
    274c:	77 0b       	sbc	r23, r23
    274e:	7d 83       	std	Y+5, r23	; 0x05
    2750:	6c 83       	std	Y+4, r22	; 0x04
    2752:	8b 2d       	mov	r24, r11
    2754:	0b 2c       	mov	r0, r11
    2756:	00 0c       	add	r0, r0
    2758:	99 0b       	sbc	r25, r25
    275a:	9f 83       	std	Y+7, r25	; 0x07
    275c:	8e 83       	std	Y+6, r24	; 0x06
    275e:	04 c0       	rjmp	.+8      	; 0x2768 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x2c4>
    2760:	1f 82       	std	Y+7, r1	; 0x07
    2762:	1e 82       	std	Y+6, r1	; 0x06
    2764:	1d 82       	std	Y+5, r1	; 0x05
    2766:	1c 82       	std	Y+4, r1	; 0x04
    2768:	aa 8d       	ldd	r26, Y+26	; 0x1a
    276a:	bb 8d       	ldd	r27, Y+27	; 0x1b
    276c:	ed 91       	ld	r30, X+
    276e:	fc 91       	ld	r31, X
    2770:	11 97       	sbiw	r26, 0x01	; 1
    2772:	02 84       	ldd	r0, Z+10	; 0x0a
    2774:	f3 85       	ldd	r31, Z+11	; 0x0b
    2776:	e0 2d       	mov	r30, r0
    2778:	cd 01       	movw	r24, r26
    277a:	19 95       	eicall
    277c:	61 2c       	mov	r6, r1
    277e:	d1 2c       	mov	r13, r1
    2780:	81 2c       	mov	r8, r1
    2782:	fb 81       	ldd	r31, Y+3	; 0x03
    2784:	ef 2f       	mov	r30, r31
    2786:	f0 e0       	ldi	r31, 0x00	; 0
    2788:	fb 87       	std	Y+11, r31	; 0x0b
    278a:	ea 87       	std	Y+10, r30	; 0x0a
    278c:	2c 2d       	mov	r18, r12
    278e:	30 e0       	ldi	r19, 0x00	; 0
    2790:	3d 87       	std	Y+13, r19	; 0x0d
    2792:	2c 87       	std	Y+12, r18	; 0x0c
    2794:	49 81       	ldd	r20, Y+1	; 0x01
    2796:	5a 81       	ldd	r21, Y+2	; 0x02
    2798:	4b 0d       	add	r20, r11
    279a:	51 1d       	adc	r21, r1
    279c:	b7 fc       	sbrc	r11, 7
    279e:	5a 95       	dec	r21
    27a0:	5d 8b       	std	Y+21, r21	; 0x15
    27a2:	4c 8b       	std	Y+20, r20	; 0x14
    27a4:	b2 01       	movw	r22, r4
    27a6:	69 0d       	add	r22, r9
    27a8:	71 1d       	adc	r23, r1
    27aa:	97 fc       	sbrc	r9, 7
    27ac:	7a 95       	dec	r23
    27ae:	7f 8b       	std	Y+23, r23	; 0x17
    27b0:	6e 8b       	std	Y+22, r22	; 0x16
    27b2:	8a 14       	cp	r8, r10
    27b4:	08 f0       	brcs	.+2      	; 0x27b8 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x314>
    27b6:	70 c0       	rjmp	.+224    	; 0x2898 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3f4>
    27b8:	28 2d       	mov	r18, r8
    27ba:	30 e0       	ldi	r19, 0x00	; 0
    27bc:	4e 81       	ldd	r20, Y+6	; 0x06
    27be:	5f 81       	ldd	r21, Y+7	; 0x07
    27c0:	42 0f       	add	r20, r18
    27c2:	53 1f       	adc	r21, r19
    27c4:	aa 85       	ldd	r26, Y+10	; 0x0a
    27c6:	bb 85       	ldd	r27, Y+11	; 0x0b
    27c8:	a4 9f       	mul	r26, r20
    27ca:	c0 01       	movw	r24, r0
    27cc:	a5 9f       	mul	r26, r21
    27ce:	90 0d       	add	r25, r0
    27d0:	b4 9f       	mul	r27, r20
    27d2:	90 0d       	add	r25, r0
    27d4:	11 24       	eor	r1, r1
    27d6:	e9 81       	ldd	r30, Y+1	; 0x01
    27d8:	fa 81       	ldd	r31, Y+2	; 0x02
    27da:	e8 0f       	add	r30, r24
    27dc:	f9 1f       	adc	r31, r25
    27de:	ff 87       	std	Y+15, r31	; 0x0f
    27e0:	ee 87       	std	Y+14, r30	; 0x0e
    27e2:	86 2d       	mov	r24, r6
    27e4:	91 2c       	mov	r9, r1
    27e6:	4c 89       	ldd	r20, Y+20	; 0x14
    27e8:	5d 89       	ldd	r21, Y+21	; 0x15
    27ea:	42 0f       	add	r20, r18
    27ec:	53 1f       	adc	r21, r19
    27ee:	5b 8b       	std	Y+19, r21	; 0x13
    27f0:	4a 8b       	std	Y+18, r20	; 0x12
    27f2:	97 14       	cp	r9, r7
    27f4:	08 f0       	brcs	.+2      	; 0x27f8 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x354>
    27f6:	4d c0       	rjmp	.+154    	; 0x2892 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3ee>
    27f8:	bb 24       	eor	r11, r11
    27fa:	b3 94       	inc	r11
    27fc:	b8 0e       	add	r11, r24
    27fe:	87 70       	andi	r24, 0x07	; 7
    2800:	41 f4       	brne	.+16     	; 0x2812 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x36e>
    2802:	c1 01       	movw	r24, r2
    2804:	01 96       	adiw	r24, 0x01	; 1
    2806:	e8 89       	ldd	r30, Y+16	; 0x10
    2808:	f9 89       	ldd	r31, Y+17	; 0x11
    280a:	e2 0d       	add	r30, r2
    280c:	f3 1d       	adc	r31, r3
    280e:	d4 90       	lpm	r13, Z
    2810:	1c 01       	movw	r2, r24
    2812:	d7 fe       	sbrs	r13, 7
    2814:	3a c0       	rjmp	.+116    	; 0x288a <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3e6>
    2816:	51 e0       	ldi	r21, 0x01	; 1
    2818:	c5 12       	cpse	r12, r21
    281a:	16 c0       	rjmp	.+44     	; 0x2848 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3a4>
    281c:	6b 81       	ldd	r22, Y+3	; 0x03
    281e:	61 30       	cpi	r22, 0x01	; 1
    2820:	99 f4       	brne	.+38     	; 0x2848 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3a4>
    2822:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2824:	bb 8d       	ldd	r27, Y+27	; 0x1b
    2826:	ed 91       	ld	r30, X+
    2828:	fc 91       	ld	r31, X
    282a:	11 97       	sbiw	r26, 0x01	; 1
    282c:	04 84       	ldd	r0, Z+12	; 0x0c
    282e:	f5 85       	ldd	r31, Z+13	; 0x0d
    2830:	e0 2d       	mov	r30, r0
    2832:	28 85       	ldd	r18, Y+8	; 0x08
    2834:	39 85       	ldd	r19, Y+9	; 0x09
    2836:	4a 89       	ldd	r20, Y+18	; 0x12
    2838:	5b 89       	ldd	r21, Y+19	; 0x13
    283a:	6e 89       	ldd	r22, Y+22	; 0x16
    283c:	7f 89       	ldd	r23, Y+23	; 0x17
    283e:	69 0d       	add	r22, r9
    2840:	71 1d       	adc	r23, r1
    2842:	cd 01       	movw	r24, r26
    2844:	19 95       	eicall
    2846:	21 c0       	rjmp	.+66     	; 0x288a <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3e6>
    2848:	8c 81       	ldd	r24, Y+4	; 0x04
    284a:	9d 81       	ldd	r25, Y+5	; 0x05
    284c:	89 0d       	add	r24, r9
    284e:	91 1d       	adc	r25, r1
    2850:	ec 85       	ldd	r30, Y+12	; 0x0c
    2852:	fd 85       	ldd	r31, Y+13	; 0x0d
    2854:	8e 9f       	mul	r24, r30
    2856:	b0 01       	movw	r22, r0
    2858:	8f 9f       	mul	r24, r31
    285a:	70 0d       	add	r23, r0
    285c:	9e 9f       	mul	r25, r30
    285e:	70 0d       	add	r23, r0
    2860:	11 24       	eor	r1, r1
    2862:	64 0d       	add	r22, r4
    2864:	75 1d       	adc	r23, r5
    2866:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2868:	bb 8d       	ldd	r27, Y+27	; 0x1b
    286a:	ed 91       	ld	r30, X+
    286c:	fc 91       	ld	r31, X
    286e:	11 97       	sbiw	r26, 0x01	; 1
    2870:	06 84       	ldd	r0, Z+14	; 0x0e
    2872:	f7 85       	ldd	r31, Z+15	; 0x0f
    2874:	e0 2d       	mov	r30, r0
    2876:	e8 84       	ldd	r14, Y+8	; 0x08
    2878:	f9 84       	ldd	r15, Y+9	; 0x09
    287a:	0a 85       	ldd	r16, Y+10	; 0x0a
    287c:	1b 85       	ldd	r17, Y+11	; 0x0b
    287e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2880:	3d 85       	ldd	r19, Y+13	; 0x0d
    2882:	4e 85       	ldd	r20, Y+14	; 0x0e
    2884:	5f 85       	ldd	r21, Y+15	; 0x0f
    2886:	cd 01       	movw	r24, r26
    2888:	19 95       	eicall
    288a:	dd 0c       	add	r13, r13
    288c:	93 94       	inc	r9
    288e:	8b 2d       	mov	r24, r11
    2890:	b0 cf       	rjmp	.-160    	; 0x27f2 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x34e>
    2892:	67 0c       	add	r6, r7
    2894:	83 94       	inc	r8
    2896:	8d cf       	rjmp	.-230    	; 0x27b2 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x30e>
    2898:	aa 8d       	ldd	r26, Y+26	; 0x1a
    289a:	bb 8d       	ldd	r27, Y+27	; 0x1b
    289c:	ed 91       	ld	r30, X+
    289e:	fc 91       	ld	r31, X
    28a0:	11 97       	sbiw	r26, 0x01	; 1
    28a2:	06 88       	ldd	r0, Z+22	; 0x16
    28a4:	f7 89       	ldd	r31, Z+23	; 0x17
    28a6:	e0 2d       	mov	r30, r0
    28a8:	cd 01       	movw	r24, r26
    28aa:	6b 96       	adiw	r28, 0x1b	; 27
    28ac:	0f b6       	in	r0, 0x3f	; 63
    28ae:	f8 94       	cli
    28b0:	de bf       	out	0x3e, r29	; 62
    28b2:	0f be       	out	0x3f, r0	; 63
    28b4:	cd bf       	out	0x3d, r28	; 61
    28b6:	df 91       	pop	r29
    28b8:	cf 91       	pop	r28
    28ba:	1f 91       	pop	r17
    28bc:	0f 91       	pop	r16
    28be:	ff 90       	pop	r15
    28c0:	ef 90       	pop	r14
    28c2:	df 90       	pop	r13
    28c4:	cf 90       	pop	r12
    28c6:	bf 90       	pop	r11
    28c8:	af 90       	pop	r10
    28ca:	9f 90       	pop	r9
    28cc:	8f 90       	pop	r8
    28ce:	7f 90       	pop	r7
    28d0:	6f 90       	pop	r6
    28d2:	5f 90       	pop	r5
    28d4:	4f 90       	pop	r4
    28d6:	3f 90       	pop	r3
    28d8:	2f 90       	pop	r2
    28da:	19 94       	eijmp
    28dc:	6b 96       	adiw	r28, 0x1b	; 27
    28de:	0f b6       	in	r0, 0x3f	; 63
    28e0:	f8 94       	cli
    28e2:	de bf       	out	0x3e, r29	; 62
    28e4:	0f be       	out	0x3f, r0	; 63
    28e6:	cd bf       	out	0x3d, r28	; 61
    28e8:	df 91       	pop	r29
    28ea:	cf 91       	pop	r28
    28ec:	1f 91       	pop	r17
    28ee:	0f 91       	pop	r16
    28f0:	ff 90       	pop	r15
    28f2:	ef 90       	pop	r14
    28f4:	df 90       	pop	r13
    28f6:	cf 90       	pop	r12
    28f8:	bf 90       	pop	r11
    28fa:	af 90       	pop	r10
    28fc:	9f 90       	pop	r9
    28fe:	8f 90       	pop	r8
    2900:	7f 90       	pop	r7
    2902:	6f 90       	pop	r6
    2904:	5f 90       	pop	r5
    2906:	4f 90       	pop	r4
    2908:	3f 90       	pop	r3
    290a:	2f 90       	pop	r2
    290c:	08 95       	ret

0000290e <_ZN12Adafruit_GFX5writeEh>:
/*!
    @brief  Print one byte/character of data, used to support print()
    @param  c  The 8-bit ascii character to write
*/
/**************************************************************************/
size_t Adafruit_GFX::write(uint8_t c) {
    290e:	8f 92       	push	r8
    2910:	9f 92       	push	r9
    2912:	af 92       	push	r10
    2914:	cf 92       	push	r12
    2916:	ef 92       	push	r14
    2918:	ff 92       	push	r15
    291a:	0f 93       	push	r16
    291c:	1f 93       	push	r17
    291e:	cf 93       	push	r28
    2920:	df 93       	push	r29
    2922:	ec 01       	movw	r28, r24
    2924:	26 2f       	mov	r18, r22
  if (!gfxFont) { // 'Classic' built-in font
    2926:	89 8d       	ldd	r24, Y+25	; 0x19
    2928:	9a 8d       	ldd	r25, Y+26	; 0x1a
    292a:	00 97       	sbiw	r24, 0x00	; 0
    292c:	09 f0       	breq	.+2      	; 0x2930 <_ZN12Adafruit_GFX5writeEh+0x22>
    292e:	41 c0       	rjmp	.+130    	; 0x29b2 <_ZN12Adafruit_GFX5writeEh+0xa4>

    if (c == '\n') {              // Newline?
    2930:	6a 30       	cpi	r22, 0x0A	; 10
    2932:	59 f4       	brne	.+22     	; 0x294a <_ZN12Adafruit_GFX5writeEh+0x3c>
      cursor_x = 0;               // Reset x to zero,
    2934:	1d 86       	std	Y+13, r1	; 0x0d
    2936:	1c 86       	std	Y+12, r1	; 0x0c
      cursor_y += textsize_y * 8; // advance y one line
    2938:	2d 89       	ldd	r18, Y+21	; 0x15
    293a:	8e 85       	ldd	r24, Y+14	; 0x0e
    293c:	9f 85       	ldd	r25, Y+15	; 0x0f
    293e:	38 e0       	ldi	r19, 0x08	; 8
    2940:	23 9f       	mul	r18, r19
    2942:	80 0d       	add	r24, r0
    2944:	91 1d       	adc	r25, r1
    2946:	11 24       	eor	r1, r1
    2948:	42 c0       	rjmp	.+132    	; 0x29ce <_ZN12Adafruit_GFX5writeEh+0xc0>
    } else if (c != '\r') {       // Ignore carriage returns
    294a:	6d 30       	cpi	r22, 0x0D	; 13
    294c:	09 f4       	brne	.+2      	; 0x2950 <_ZN12Adafruit_GFX5writeEh+0x42>
    294e:	a8 c0       	rjmp	.+336    	; 0x2aa0 <_ZN12Adafruit_GFX5writeEh+0x192>
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
    2950:	8f 89       	ldd	r24, Y+23	; 0x17
    2952:	88 23       	and	r24, r24
    2954:	c9 f0       	breq	.+50     	; 0x2988 <_ZN12Adafruit_GFX5writeEh+0x7a>
    2956:	3c 89       	ldd	r19, Y+20	; 0x14
    2958:	8c 85       	ldd	r24, Y+12	; 0x0c
    295a:	9d 85       	ldd	r25, Y+13	; 0x0d
    295c:	46 e0       	ldi	r20, 0x06	; 6
    295e:	34 9f       	mul	r19, r20
    2960:	80 0d       	add	r24, r0
    2962:	91 1d       	adc	r25, r1
    2964:	11 24       	eor	r1, r1
    2966:	48 85       	ldd	r20, Y+8	; 0x08
    2968:	59 85       	ldd	r21, Y+9	; 0x09
    296a:	48 17       	cp	r20, r24
    296c:	59 07       	cpc	r21, r25
    296e:	64 f4       	brge	.+24     	; 0x2988 <_ZN12Adafruit_GFX5writeEh+0x7a>
        cursor_x = 0;                                       // Reset x to zero,
    2970:	1d 86       	std	Y+13, r1	; 0x0d
    2972:	1c 86       	std	Y+12, r1	; 0x0c
        cursor_y += textsize_y * 8; // advance y one line
    2974:	3d 89       	ldd	r19, Y+21	; 0x15
    2976:	8e 85       	ldd	r24, Y+14	; 0x0e
    2978:	9f 85       	ldd	r25, Y+15	; 0x0f
    297a:	48 e0       	ldi	r20, 0x08	; 8
    297c:	34 9f       	mul	r19, r20
    297e:	80 0d       	add	r24, r0
    2980:	91 1d       	adc	r25, r1
    2982:	11 24       	eor	r1, r1
    2984:	9f 87       	std	Y+15, r25	; 0x0f
    2986:	8e 87       	std	Y+14, r24	; 0x0e
      }
      drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
               textsize_y);
    2988:	ea 88       	ldd	r14, Y+18	; 0x12
    298a:	fb 88       	ldd	r15, Y+19	; 0x13
    298c:	08 89       	ldd	r16, Y+16	; 0x10
    298e:	19 89       	ldd	r17, Y+17	; 0x11
    2990:	4e 85       	ldd	r20, Y+14	; 0x0e
    2992:	5f 85       	ldd	r21, Y+15	; 0x0f
    2994:	6c 85       	ldd	r22, Y+12	; 0x0c
    2996:	7d 85       	ldd	r23, Y+13	; 0x0d
    2998:	ad 88       	ldd	r10, Y+21	; 0x15
    299a:	cc 88       	ldd	r12, Y+20	; 0x14
    299c:	ce 01       	movw	r24, r28
    299e:	82 dd       	rcall	.-1276   	; 0x24a4 <_ZN12Adafruit_GFX8drawCharEiihjjhh>
      cursor_x += textsize_x * 6; // Advance x one char
    29a0:	2c 89       	ldd	r18, Y+20	; 0x14
    29a2:	8c 85       	ldd	r24, Y+12	; 0x0c
    29a4:	9d 85       	ldd	r25, Y+13	; 0x0d
    29a6:	36 e0       	ldi	r19, 0x06	; 6
    29a8:	23 9f       	mul	r18, r19
    29aa:	80 0d       	add	r24, r0
    29ac:	91 1d       	adc	r25, r1
    29ae:	11 24       	eor	r1, r1
    29b0:	3e c0       	rjmp	.+124    	; 0x2a2e <_ZN12Adafruit_GFX5writeEh+0x120>
    }

  } else { // Custom font

    if (c == '\n') {
    29b2:	6a 30       	cpi	r22, 0x0A	; 10
    29b4:	79 f4       	brne	.+30     	; 0x29d4 <_ZN12Adafruit_GFX5writeEh+0xc6>
      cursor_x = 0;
    29b6:	1d 86       	std	Y+13, r1	; 0x0d
    29b8:	1c 86       	std	Y+12, r1	; 0x0c
      cursor_y +=
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    29ba:	2d 89       	ldd	r18, Y+21	; 0x15
    29bc:	fc 01       	movw	r30, r24
    29be:	38 96       	adiw	r30, 0x08	; 8
    29c0:	e4 91       	lpm	r30, Z
    29c2:	8e 85       	ldd	r24, Y+14	; 0x0e
    29c4:	9f 85       	ldd	r25, Y+15	; 0x0f
    29c6:	2e 9f       	mul	r18, r30
    29c8:	80 0d       	add	r24, r0
    29ca:	91 1d       	adc	r25, r1
    29cc:	11 24       	eor	r1, r1
    29ce:	9f 87       	std	Y+15, r25	; 0x0f
    29d0:	8e 87       	std	Y+14, r24	; 0x0e
    29d2:	66 c0       	rjmp	.+204    	; 0x2aa0 <_ZN12Adafruit_GFX5writeEh+0x192>
    } else if (c != '\r') {
    29d4:	6d 30       	cpi	r22, 0x0D	; 13
    29d6:	09 f4       	brne	.+2      	; 0x29da <_ZN12Adafruit_GFX5writeEh+0xcc>
    29d8:	63 c0       	rjmp	.+198    	; 0x2aa0 <_ZN12Adafruit_GFX5writeEh+0x192>
      uint8_t first = pgm_read_byte(&gfxFont->first);
    29da:	fc 01       	movw	r30, r24
    29dc:	34 96       	adiw	r30, 0x04	; 4
    29de:	34 91       	lpm	r19, Z
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
    29e0:	63 17       	cp	r22, r19
    29e2:	08 f4       	brcc	.+2      	; 0x29e6 <_ZN12Adafruit_GFX5writeEh+0xd8>
    29e4:	5d c0       	rjmp	.+186    	; 0x2aa0 <_ZN12Adafruit_GFX5writeEh+0x192>
    29e6:	32 96       	adiw	r30, 0x02	; 2
    29e8:	e4 91       	lpm	r30, Z
    29ea:	e6 17       	cp	r30, r22
    29ec:	08 f4       	brcc	.+2      	; 0x29f0 <_ZN12Adafruit_GFX5writeEh+0xe2>
    29ee:	58 c0       	rjmp	.+176    	; 0x2aa0 <_ZN12Adafruit_GFX5writeEh+0x192>
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
    29f0:	46 2f       	mov	r20, r22
    29f2:	43 1b       	sub	r20, r19
    29f4:	34 2f       	mov	r19, r20
#define pgm_read_pointer(addr) ((void *)pgm_read_word(addr))
#endif

inline GFXglyph *pgm_read_glyph_ptr(const GFXfont *gfxFont, uint8_t c) {
#ifdef __AVR__
  return &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
    29f6:	fc 01       	movw	r30, r24
    29f8:	32 96       	adiw	r30, 0x02	; 2
    29fa:	85 90       	lpm	r8, Z+
    29fc:	94 90       	lpm	r9, Z
    29fe:	47 e0       	ldi	r20, 0x07	; 7
    2a00:	34 9f       	mul	r19, r20
    2a02:	80 0c       	add	r8, r0
    2a04:	91 1c       	adc	r9, r1
    2a06:	11 24       	eor	r1, r1
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    } else if (c != '\r') {
      uint8_t first = pgm_read_byte(&gfxFont->first);
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
        uint8_t w = pgm_read_byte(&glyph->width),
    2a08:	f4 01       	movw	r30, r8
    2a0a:	32 96       	adiw	r30, 0x02	; 2
    2a0c:	34 91       	lpm	r19, Z
                h = pgm_read_byte(&glyph->height);
    2a0e:	31 96       	adiw	r30, 0x01	; 1
    2a10:	e4 91       	lpm	r30, Z
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
    2a12:	33 23       	and	r19, r19
    2a14:	11 f0       	breq	.+4      	; 0x2a1a <_ZN12Adafruit_GFX5writeEh+0x10c>
    2a16:	e1 11       	cpse	r30, r1
    2a18:	0d c0       	rjmp	.+26     	; 0x2a34 <_ZN12Adafruit_GFX5writeEh+0x126>
          }
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
                   textsize_y);
        }
        cursor_x +=
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
    2a1a:	f4 01       	movw	r30, r8
    2a1c:	34 96       	adiw	r30, 0x04	; 4
    2a1e:	e4 91       	lpm	r30, Z
    2a20:	2c 89       	ldd	r18, Y+20	; 0x14
    2a22:	8c 85       	ldd	r24, Y+12	; 0x0c
    2a24:	9d 85       	ldd	r25, Y+13	; 0x0d
    2a26:	e2 9f       	mul	r30, r18
    2a28:	80 0d       	add	r24, r0
    2a2a:	91 1d       	adc	r25, r1
    2a2c:	11 24       	eor	r1, r1
    2a2e:	9d 87       	std	Y+13, r25	; 0x0d
    2a30:	8c 87       	std	Y+12, r24	; 0x0c
      }
    }
  }
  return 1;
    2a32:	36 c0       	rjmp	.+108    	; 0x2aa0 <_ZN12Adafruit_GFX5writeEh+0x192>
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
        uint8_t w = pgm_read_byte(&glyph->width),
                h = pgm_read_byte(&glyph->height);
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
          int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
    2a34:	f4 01       	movw	r30, r8
    2a36:	35 96       	adiw	r30, 0x05	; 5
    2a38:	44 91       	lpm	r20, Z
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
    2a3a:	5f 89       	ldd	r21, Y+23	; 0x17
    2a3c:	55 23       	and	r21, r21
    2a3e:	19 f1       	breq	.+70     	; 0x2a86 <_ZN12Adafruit_GFX5writeEh+0x178>
    2a40:	5c 89       	ldd	r21, Y+20	; 0x14
    2a42:	e3 2f       	mov	r30, r19
    2a44:	f0 e0       	ldi	r31, 0x00	; 0
    2a46:	e4 0f       	add	r30, r20
    2a48:	f1 1d       	adc	r31, r1
    2a4a:	47 fd       	sbrc	r20, 7
    2a4c:	fa 95       	dec	r31
    2a4e:	5e 9f       	mul	r21, r30
    2a50:	b0 01       	movw	r22, r0
    2a52:	5f 9f       	mul	r21, r31
    2a54:	70 0d       	add	r23, r0
    2a56:	11 24       	eor	r1, r1
    2a58:	4c 85       	ldd	r20, Y+12	; 0x0c
    2a5a:	5d 85       	ldd	r21, Y+13	; 0x0d
    2a5c:	46 0f       	add	r20, r22
    2a5e:	57 1f       	adc	r21, r23
    2a60:	68 85       	ldd	r22, Y+8	; 0x08
    2a62:	79 85       	ldd	r23, Y+9	; 0x09
    2a64:	64 17       	cp	r22, r20
    2a66:	75 07       	cpc	r23, r21
    2a68:	74 f4       	brge	.+28     	; 0x2a86 <_ZN12Adafruit_GFX5writeEh+0x178>
            cursor_x = 0;
    2a6a:	1d 86       	std	Y+13, r1	; 0x0d
    2a6c:	1c 86       	std	Y+12, r1	; 0x0c
            cursor_y += (int16_t)textsize_y *
    2a6e:	3d 89       	ldd	r19, Y+21	; 0x15
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    2a70:	fc 01       	movw	r30, r24
    2a72:	38 96       	adiw	r30, 0x08	; 8
    2a74:	e4 91       	lpm	r30, Z
    2a76:	8e 85       	ldd	r24, Y+14	; 0x0e
    2a78:	9f 85       	ldd	r25, Y+15	; 0x0f
    2a7a:	3e 9f       	mul	r19, r30
    2a7c:	80 0d       	add	r24, r0
    2a7e:	91 1d       	adc	r25, r1
    2a80:	11 24       	eor	r1, r1
    2a82:	9f 87       	std	Y+15, r25	; 0x0f
    2a84:	8e 87       	std	Y+14, r24	; 0x0e
          }
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
                   textsize_y);
    2a86:	ea 88       	ldd	r14, Y+18	; 0x12
    2a88:	fb 88       	ldd	r15, Y+19	; 0x13
    2a8a:	08 89       	ldd	r16, Y+16	; 0x10
    2a8c:	19 89       	ldd	r17, Y+17	; 0x11
    2a8e:	4e 85       	ldd	r20, Y+14	; 0x0e
    2a90:	5f 85       	ldd	r21, Y+15	; 0x0f
    2a92:	6c 85       	ldd	r22, Y+12	; 0x0c
    2a94:	7d 85       	ldd	r23, Y+13	; 0x0d
    2a96:	ad 88       	ldd	r10, Y+21	; 0x15
    2a98:	cc 88       	ldd	r12, Y+20	; 0x14
    2a9a:	ce 01       	movw	r24, r28
    2a9c:	03 dd       	rcall	.-1530   	; 0x24a4 <_ZN12Adafruit_GFX8drawCharEiihjjhh>
    2a9e:	bd cf       	rjmp	.-134    	; 0x2a1a <_ZN12Adafruit_GFX5writeEh+0x10c>
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
      }
    }
  }
  return 1;
}
    2aa0:	81 e0       	ldi	r24, 0x01	; 1
    2aa2:	90 e0       	ldi	r25, 0x00	; 0
    2aa4:	df 91       	pop	r29
    2aa6:	cf 91       	pop	r28
    2aa8:	1f 91       	pop	r17
    2aaa:	0f 91       	pop	r16
    2aac:	ff 90       	pop	r15
    2aae:	ef 90       	pop	r14
    2ab0:	cf 90       	pop	r12
    2ab2:	af 90       	pop	r10
    2ab4:	9f 90       	pop	r9
    2ab6:	8f 90       	pop	r8
    2ab8:	08 95       	ret

00002aba <_ZN16Adafruit_SSD13069drawPixelEiij>:
/*!
    @brief  Get base address of display buffer for direct reading or writing.
    @return Pointer to an unsigned 8-bit array, column-major, columns padded
            to full byte boundary if needed.
*/
uint8_t *Adafruit_SSD1306::getBuffer(void) { return buffer; }
    2aba:	fc 01       	movw	r30, r24
    2abc:	77 fd       	sbrc	r23, 7
    2abe:	b9 c0       	rjmp	.+370    	; 0x2c32 <_ZN16Adafruit_SSD13069drawPixelEiij+0x178>
    2ac0:	80 85       	ldd	r24, Z+8	; 0x08
    2ac2:	91 85       	ldd	r25, Z+9	; 0x09
    2ac4:	68 17       	cp	r22, r24
    2ac6:	79 07       	cpc	r23, r25
    2ac8:	0c f0       	brlt	.+2      	; 0x2acc <_ZN16Adafruit_SSD13069drawPixelEiij+0x12>
    2aca:	b3 c0       	rjmp	.+358    	; 0x2c32 <_ZN16Adafruit_SSD13069drawPixelEiij+0x178>
    2acc:	57 fd       	sbrc	r21, 7
    2ace:	b1 c0       	rjmp	.+354    	; 0x2c32 <_ZN16Adafruit_SSD13069drawPixelEiij+0x178>
    2ad0:	82 85       	ldd	r24, Z+10	; 0x0a
    2ad2:	93 85       	ldd	r25, Z+11	; 0x0b
    2ad4:	48 17       	cp	r20, r24
    2ad6:	59 07       	cpc	r21, r25
    2ad8:	0c f0       	brlt	.+2      	; 0x2adc <_ZN16Adafruit_SSD13069drawPixelEiij+0x22>
    2ada:	08 95       	ret
    2adc:	86 89       	ldd	r24, Z+22	; 0x16
    2ade:	82 30       	cpi	r24, 0x02	; 2
    2ae0:	79 f4       	brne	.+30     	; 0x2b00 <_ZN16Adafruit_SSD13069drawPixelEiij+0x46>
    2ae2:	84 81       	ldd	r24, Z+4	; 0x04
    2ae4:	95 81       	ldd	r25, Z+5	; 0x05
    2ae6:	dc 01       	movw	r26, r24
    2ae8:	a6 1b       	sub	r26, r22
    2aea:	b7 0b       	sbc	r27, r23
    2aec:	bd 01       	movw	r22, r26
    2aee:	61 50       	subi	r22, 0x01	; 1
    2af0:	71 09       	sbc	r23, r1
    2af2:	86 81       	ldd	r24, Z+6	; 0x06
    2af4:	97 81       	ldd	r25, Z+7	; 0x07
    2af6:	dc 01       	movw	r26, r24
    2af8:	a4 1b       	sub	r26, r20
    2afa:	b5 0b       	sbc	r27, r21
    2afc:	ad 01       	movw	r20, r26
    2afe:	0e c0       	rjmp	.+28     	; 0x2b1c <_ZN16Adafruit_SSD13069drawPixelEiij+0x62>
    2b00:	83 30       	cpi	r24, 0x03	; 3
    2b02:	09 f0       	breq	.+2      	; 0x2b06 <_ZN16Adafruit_SSD13069drawPixelEiij+0x4c>
    2b04:	84 c0       	rjmp	.+264    	; 0x2c0e <_ZN16Adafruit_SSD13069drawPixelEiij+0x154>
    2b06:	64 27       	eor	r22, r20
    2b08:	75 27       	eor	r23, r21
    2b0a:	ca 01       	movw	r24, r20
    2b0c:	86 27       	eor	r24, r22
    2b0e:	97 27       	eor	r25, r23
    2b10:	68 27       	eor	r22, r24
    2b12:	79 27       	eor	r23, r25
    2b14:	46 81       	ldd	r20, Z+6	; 0x06
    2b16:	57 81       	ldd	r21, Z+7	; 0x07
    2b18:	48 1b       	sub	r20, r24
    2b1a:	59 0b       	sbc	r21, r25
    2b1c:	41 50       	subi	r20, 0x01	; 1
    2b1e:	51 09       	sbc	r21, r1
    2b20:	21 30       	cpi	r18, 0x01	; 1
    2b22:	31 05       	cpc	r19, r1
    2b24:	31 f0       	breq	.+12     	; 0x2b32 <_ZN16Adafruit_SSD13069drawPixelEiij+0x78>
    2b26:	48 f1       	brcs	.+82     	; 0x2b7a <_ZN16Adafruit_SSD13069drawPixelEiij+0xc0>
    2b28:	22 30       	cpi	r18, 0x02	; 2
    2b2a:	31 05       	cpc	r19, r1
    2b2c:	09 f4       	brne	.+2      	; 0x2b30 <_ZN16Adafruit_SSD13069drawPixelEiij+0x76>
    2b2e:	4a c0       	rjmp	.+148    	; 0x2bc4 <_ZN16Adafruit_SSD13069drawPixelEiij+0x10a>
    2b30:	08 95       	ret
    2b32:	ca 01       	movw	r24, r20
    2b34:	57 fd       	sbrc	r21, 7
    2b36:	07 96       	adiw	r24, 0x07	; 7
    2b38:	9c 01       	movw	r18, r24
    2b3a:	a3 e0       	ldi	r26, 0x03	; 3
    2b3c:	35 95       	asr	r19
    2b3e:	27 95       	ror	r18
    2b40:	aa 95       	dec	r26
    2b42:	e1 f7       	brne	.-8      	; 0x2b3c <_ZN16Adafruit_SSD13069drawPixelEiij+0x82>
    2b44:	a4 81       	ldd	r26, Z+4	; 0x04
    2b46:	b5 81       	ldd	r27, Z+5	; 0x05
    2b48:	2a 9f       	mul	r18, r26
    2b4a:	c0 01       	movw	r24, r0
    2b4c:	2b 9f       	mul	r18, r27
    2b4e:	90 0d       	add	r25, r0
    2b50:	3a 9f       	mul	r19, r26
    2b52:	90 0d       	add	r25, r0
    2b54:	11 24       	eor	r1, r1
    2b56:	68 0f       	add	r22, r24
    2b58:	79 1f       	adc	r23, r25
    2b5a:	07 8c       	ldd	r0, Z+31	; 0x1f
    2b5c:	f0 a1       	ldd	r31, Z+32	; 0x20
    2b5e:	e0 2d       	mov	r30, r0
    2b60:	e6 0f       	add	r30, r22
    2b62:	f7 1f       	adc	r31, r23
    2b64:	47 70       	andi	r20, 0x07	; 7
    2b66:	55 27       	eor	r21, r21
    2b68:	81 e0       	ldi	r24, 0x01	; 1
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	01 c0       	rjmp	.+2      	; 0x2b70 <_ZN16Adafruit_SSD13069drawPixelEiij+0xb6>
    2b6e:	88 0f       	add	r24, r24
    2b70:	4a 95       	dec	r20
    2b72:	ea f7       	brpl	.-6      	; 0x2b6e <_ZN16Adafruit_SSD13069drawPixelEiij+0xb4>
    2b74:	90 81       	ld	r25, Z
    2b76:	89 2b       	or	r24, r25
    2b78:	48 c0       	rjmp	.+144    	; 0x2c0a <_ZN16Adafruit_SSD13069drawPixelEiij+0x150>
    2b7a:	ca 01       	movw	r24, r20
    2b7c:	57 fd       	sbrc	r21, 7
    2b7e:	07 96       	adiw	r24, 0x07	; 7
    2b80:	9c 01       	movw	r18, r24
    2b82:	93 e0       	ldi	r25, 0x03	; 3
    2b84:	35 95       	asr	r19
    2b86:	27 95       	ror	r18
    2b88:	9a 95       	dec	r25
    2b8a:	e1 f7       	brne	.-8      	; 0x2b84 <_ZN16Adafruit_SSD13069drawPixelEiij+0xca>
    2b8c:	a4 81       	ldd	r26, Z+4	; 0x04
    2b8e:	b5 81       	ldd	r27, Z+5	; 0x05
    2b90:	2a 9f       	mul	r18, r26
    2b92:	c0 01       	movw	r24, r0
    2b94:	2b 9f       	mul	r18, r27
    2b96:	90 0d       	add	r25, r0
    2b98:	3a 9f       	mul	r19, r26
    2b9a:	90 0d       	add	r25, r0
    2b9c:	11 24       	eor	r1, r1
    2b9e:	68 0f       	add	r22, r24
    2ba0:	79 1f       	adc	r23, r25
    2ba2:	07 8c       	ldd	r0, Z+31	; 0x1f
    2ba4:	f0 a1       	ldd	r31, Z+32	; 0x20
    2ba6:	e0 2d       	mov	r30, r0
    2ba8:	e6 0f       	add	r30, r22
    2baa:	f7 1f       	adc	r31, r23
    2bac:	47 70       	andi	r20, 0x07	; 7
    2bae:	55 27       	eor	r21, r21
    2bb0:	81 e0       	ldi	r24, 0x01	; 1
    2bb2:	90 e0       	ldi	r25, 0x00	; 0
    2bb4:	01 c0       	rjmp	.+2      	; 0x2bb8 <_ZN16Adafruit_SSD13069drawPixelEiij+0xfe>
    2bb6:	88 0f       	add	r24, r24
    2bb8:	4a 95       	dec	r20
    2bba:	ea f7       	brpl	.-6      	; 0x2bb6 <_ZN16Adafruit_SSD13069drawPixelEiij+0xfc>
    2bbc:	80 95       	com	r24
    2bbe:	90 81       	ld	r25, Z
    2bc0:	89 23       	and	r24, r25
    2bc2:	23 c0       	rjmp	.+70     	; 0x2c0a <_ZN16Adafruit_SSD13069drawPixelEiij+0x150>
    2bc4:	ca 01       	movw	r24, r20
    2bc6:	57 fd       	sbrc	r21, 7
    2bc8:	07 96       	adiw	r24, 0x07	; 7
    2bca:	9c 01       	movw	r18, r24
    2bcc:	83 e0       	ldi	r24, 0x03	; 3
    2bce:	35 95       	asr	r19
    2bd0:	27 95       	ror	r18
    2bd2:	8a 95       	dec	r24
    2bd4:	e1 f7       	brne	.-8      	; 0x2bce <_ZN16Adafruit_SSD13069drawPixelEiij+0x114>
    2bd6:	a4 81       	ldd	r26, Z+4	; 0x04
    2bd8:	b5 81       	ldd	r27, Z+5	; 0x05
    2bda:	2a 9f       	mul	r18, r26
    2bdc:	c0 01       	movw	r24, r0
    2bde:	2b 9f       	mul	r18, r27
    2be0:	90 0d       	add	r25, r0
    2be2:	3a 9f       	mul	r19, r26
    2be4:	90 0d       	add	r25, r0
    2be6:	11 24       	eor	r1, r1
    2be8:	68 0f       	add	r22, r24
    2bea:	79 1f       	adc	r23, r25
    2bec:	07 8c       	ldd	r0, Z+31	; 0x1f
    2bee:	f0 a1       	ldd	r31, Z+32	; 0x20
    2bf0:	e0 2d       	mov	r30, r0
    2bf2:	e6 0f       	add	r30, r22
    2bf4:	f7 1f       	adc	r31, r23
    2bf6:	47 70       	andi	r20, 0x07	; 7
    2bf8:	55 27       	eor	r21, r21
    2bfa:	81 e0       	ldi	r24, 0x01	; 1
    2bfc:	90 e0       	ldi	r25, 0x00	; 0
    2bfe:	01 c0       	rjmp	.+2      	; 0x2c02 <_ZN16Adafruit_SSD13069drawPixelEiij+0x148>
    2c00:	88 0f       	add	r24, r24
    2c02:	4a 95       	dec	r20
    2c04:	ea f7       	brpl	.-6      	; 0x2c00 <_ZN16Adafruit_SSD13069drawPixelEiij+0x146>
    2c06:	90 81       	ld	r25, Z
    2c08:	89 27       	eor	r24, r25
    2c0a:	80 83       	st	Z, r24
    2c0c:	08 95       	ret
    2c0e:	81 30       	cpi	r24, 0x01	; 1
    2c10:	09 f0       	breq	.+2      	; 0x2c14 <_ZN16Adafruit_SSD13069drawPixelEiij+0x15a>
    2c12:	86 cf       	rjmp	.-244    	; 0x2b20 <_ZN16Adafruit_SSD13069drawPixelEiij+0x66>
    2c14:	64 27       	eor	r22, r20
    2c16:	75 27       	eor	r23, r21
    2c18:	46 27       	eor	r20, r22
    2c1a:	57 27       	eor	r21, r23
    2c1c:	64 27       	eor	r22, r20
    2c1e:	75 27       	eor	r23, r21
    2c20:	84 81       	ldd	r24, Z+4	; 0x04
    2c22:	95 81       	ldd	r25, Z+5	; 0x05
    2c24:	dc 01       	movw	r26, r24
    2c26:	a6 1b       	sub	r26, r22
    2c28:	b7 0b       	sbc	r27, r23
    2c2a:	bd 01       	movw	r22, r26
    2c2c:	61 50       	subi	r22, 0x01	; 1
    2c2e:	71 09       	sbc	r23, r1
    2c30:	77 cf       	rjmp	.-274    	; 0x2b20 <_ZN16Adafruit_SSD13069drawPixelEiij+0x66>
    2c32:	08 95       	ret

00002c34 <_ZN8SPIClass8transferEh>:
    2c34:	8e bd       	out	0x2e, r24	; 46
    2c36:	00 00       	nop
    2c38:	0d b4       	in	r0, 0x2d	; 45
    2c3a:	07 fe       	sbrs	r0, 7
    2c3c:	fd cf       	rjmp	.-6      	; 0x2c38 <_ZN8SPIClass8transferEh+0x4>
    2c3e:	8e b5       	in	r24, 0x2e	; 46
    2c40:	08 95       	ret

00002c42 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
    2c42:	4f 92       	push	r4
    2c44:	5f 92       	push	r5
    2c46:	6f 92       	push	r6
    2c48:	7f 92       	push	r7
    2c4a:	8f 92       	push	r8
    2c4c:	9f 92       	push	r9
    2c4e:	af 92       	push	r10
    2c50:	bf 92       	push	r11
    2c52:	cf 92       	push	r12
    2c54:	df 92       	push	r13
    2c56:	ef 92       	push	r14
    2c58:	ff 92       	push	r15
    2c5a:	0f 93       	push	r16
    2c5c:	cf 93       	push	r28
    2c5e:	df 93       	push	r29
    2c60:	cd b7       	in	r28, 0x3d	; 61
    2c62:	de b7       	in	r29, 0x3e	; 62
    2c64:	3c 01       	movw	r6, r24
    2c66:	29 01       	movw	r4, r18
    2c68:	50 e0       	ldi	r21, 0x00	; 0
    2c6a:	70 e0       	ldi	r23, 0x00	; 0
    2c6c:	5b db       	rcall	.-2378   	; 0x2324 <_ZN12Adafruit_GFXC1Eii>
    2c6e:	8e e4       	ldi	r24, 0x4E	; 78
    2c70:	93 e0       	ldi	r25, 0x03	; 3
    2c72:	f3 01       	movw	r30, r6
    2c74:	91 83       	std	Z+1, r25	; 0x01
    2c76:	80 83       	st	Z, r24
    2c78:	14 8e       	std	Z+28, r1	; 0x1c
    2c7a:	13 8e       	std	Z+27, r1	; 0x1b
    2c7c:	41 14       	cp	r4, r1
    2c7e:	51 04       	cpc	r5, r1
    2c80:	11 f0       	breq	.+4      	; 0x2c86 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x44>
    2c82:	c2 01       	movw	r24, r4
    2c84:	02 c0       	rjmp	.+4      	; 0x2c8a <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x48>
    2c86:	8d e3       	ldi	r24, 0x3D	; 61
    2c88:	96 e0       	ldi	r25, 0x06	; 6
    2c8a:	f3 01       	movw	r30, r6
    2c8c:	96 8f       	std	Z+30, r25	; 0x1e
    2c8e:	85 8f       	std	Z+29, r24	; 0x1d
    2c90:	10 a2       	std	Z+32, r1	; 0x20
    2c92:	17 8e       	std	Z+31, r1	; 0x1f
    2c94:	8f ef       	ldi	r24, 0xFF	; 255
    2c96:	84 a3       	std	Z+36, r24	; 0x24
    2c98:	85 a3       	std	Z+37, r24	; 0x25
    2c9a:	86 a3       	std	Z+38, r24	; 0x26
    2c9c:	87 a3       	std	Z+39, r24	; 0x27
    2c9e:	00 a7       	std	Z+40, r16	; 0x28
    2ca0:	c5 aa       	std	Z+53, r12	; 0x35
    2ca2:	d6 aa       	std	Z+54, r13	; 0x36
    2ca4:	e7 aa       	std	Z+55, r14	; 0x37
    2ca6:	f0 ae       	std	Z+56, r15	; 0x38
    2ca8:	81 ae       	std	Z+57, r8	; 0x39
    2caa:	92 ae       	std	Z+58, r9	; 0x3a
    2cac:	a3 ae       	std	Z+59, r10	; 0x3b
    2cae:	b4 ae       	std	Z+60, r11	; 0x3c
    2cb0:	80 e5       	ldi	r24, 0x50	; 80
    2cb2:	86 af       	std	Z+62, r24	; 0x3e
    2cb4:	17 ae       	std	Z+63, r1	; 0x3f
    2cb6:	df 91       	pop	r29
    2cb8:	cf 91       	pop	r28
    2cba:	0f 91       	pop	r16
    2cbc:	ff 90       	pop	r15
    2cbe:	ef 90       	pop	r14
    2cc0:	df 90       	pop	r13
    2cc2:	cf 90       	pop	r12
    2cc4:	bf 90       	pop	r11
    2cc6:	af 90       	pop	r10
    2cc8:	9f 90       	pop	r9
    2cca:	8f 90       	pop	r8
    2ccc:	7f 90       	pop	r7
    2cce:	6f 90       	pop	r6
    2cd0:	5f 90       	pop	r5
    2cd2:	4f 90       	pop	r4
    2cd4:	08 95       	ret

00002cd6 <_ZN16Adafruit_SSD1306D1Ev>:
    2cd6:	2e e4       	ldi	r18, 0x4E	; 78
    2cd8:	33 e0       	ldi	r19, 0x03	; 3
    2cda:	fc 01       	movw	r30, r24
    2cdc:	31 83       	std	Z+1, r19	; 0x01
    2cde:	20 83       	st	Z, r18
    2ce0:	87 8d       	ldd	r24, Z+31	; 0x1f
    2ce2:	90 a1       	ldd	r25, Z+32	; 0x20
    2ce4:	00 97       	sbiw	r24, 0x00	; 0
    2ce6:	11 f0       	breq	.+4      	; 0x2cec <_ZN16Adafruit_SSD1306D1Ev+0x16>
    2ce8:	0c 94 7c 3f 	jmp	0x7ef8	; 0x7ef8 <free>
    2cec:	08 95       	ret

00002cee <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
    2cee:	1f 93       	push	r17
    2cf0:	cf 93       	push	r28
    2cf2:	df 93       	push	r29
    2cf4:	fc 01       	movw	r30, r24
    2cf6:	85 8d       	ldd	r24, Z+29	; 0x1d
    2cf8:	96 8d       	ldd	r25, Z+30	; 0x1e
    2cfa:	00 97       	sbiw	r24, 0x00	; 0
    2cfc:	19 f1       	breq	.+70     	; 0x2d44 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x56>
    2cfe:	16 2f       	mov	r17, r22
    2d00:	ef 01       	movw	r28, r30
    2d02:	61 a1       	ldd	r22, Z+33	; 0x21
    2d04:	06 2e       	mov	r0, r22
    2d06:	00 0c       	add	r0, r0
    2d08:	77 0b       	sbc	r23, r23
    2d0a:	0e 94 8d 32 	call	0x651a	; 0x651a <_ZN7TwoWire17beginTransmissionEi>
    2d0e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d10:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d12:	dc 01       	movw	r26, r24
    2d14:	ed 91       	ld	r30, X+
    2d16:	fc 91       	ld	r31, X
    2d18:	01 90       	ld	r0, Z+
    2d1a:	f0 81       	ld	r31, Z
    2d1c:	e0 2d       	mov	r30, r0
    2d1e:	60 e0       	ldi	r22, 0x00	; 0
    2d20:	19 95       	eicall
    2d22:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d24:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d26:	dc 01       	movw	r26, r24
    2d28:	ed 91       	ld	r30, X+
    2d2a:	fc 91       	ld	r31, X
    2d2c:	01 90       	ld	r0, Z+
    2d2e:	f0 81       	ld	r31, Z
    2d30:	e0 2d       	mov	r30, r0
    2d32:	61 2f       	mov	r22, r17
    2d34:	19 95       	eicall
    2d36:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d38:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d3a:	df 91       	pop	r29
    2d3c:	cf 91       	pop	r28
    2d3e:	1f 91       	pop	r17
    2d40:	0c 94 02 33 	jmp	0x6604	; 0x6604 <_ZN7TwoWire15endTransmissionEv>
    2d44:	a5 a5       	ldd	r26, Z+45	; 0x2d
    2d46:	b6 a5       	ldd	r27, Z+46	; 0x2e
    2d48:	9c 91       	ld	r25, X
    2d4a:	83 a9       	ldd	r24, Z+51	; 0x33
    2d4c:	80 95       	com	r24
    2d4e:	89 23       	and	r24, r25
    2d50:	8c 93       	st	X, r24
    2d52:	83 8d       	ldd	r24, Z+27	; 0x1b
    2d54:	94 8d       	ldd	r25, Z+28	; 0x1c
    2d56:	89 2b       	or	r24, r25
    2d58:	29 f0       	breq	.+10     	; 0x2d64 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x76>
    2d5a:	86 2f       	mov	r24, r22
    2d5c:	df 91       	pop	r29
    2d5e:	cf 91       	pop	r28
    2d60:	1f 91       	pop	r17
    2d62:	68 cf       	rjmp	.-304    	; 0x2c34 <_ZN8SPIClass8transferEh>
    2d64:	28 e0       	ldi	r18, 0x08	; 8
    2d66:	30 e0       	ldi	r19, 0x00	; 0
    2d68:	80 e8       	ldi	r24, 0x80	; 128
    2d6a:	a1 a5       	ldd	r26, Z+41	; 0x29
    2d6c:	b2 a5       	ldd	r27, Z+42	; 0x2a
    2d6e:	91 a9       	ldd	r25, Z+49	; 0x31
    2d70:	46 2f       	mov	r20, r22
    2d72:	48 23       	and	r20, r24
    2d74:	19 f0       	breq	.+6      	; 0x2d7c <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x8e>
    2d76:	4c 91       	ld	r20, X
    2d78:	94 2b       	or	r25, r20
    2d7a:	03 c0       	rjmp	.+6      	; 0x2d82 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x94>
    2d7c:	4c 91       	ld	r20, X
    2d7e:	90 95       	com	r25
    2d80:	94 23       	and	r25, r20
    2d82:	9c 93       	st	X, r25
    2d84:	a3 a5       	ldd	r26, Z+43	; 0x2b
    2d86:	b4 a5       	ldd	r27, Z+44	; 0x2c
    2d88:	4c 91       	ld	r20, X
    2d8a:	92 a9       	ldd	r25, Z+50	; 0x32
    2d8c:	94 2b       	or	r25, r20
    2d8e:	9c 93       	st	X, r25
    2d90:	a3 a5       	ldd	r26, Z+43	; 0x2b
    2d92:	b4 a5       	ldd	r27, Z+44	; 0x2c
    2d94:	4c 91       	ld	r20, X
    2d96:	92 a9       	ldd	r25, Z+50	; 0x32
    2d98:	90 95       	com	r25
    2d9a:	94 23       	and	r25, r20
    2d9c:	9c 93       	st	X, r25
    2d9e:	86 95       	lsr	r24
    2da0:	21 50       	subi	r18, 0x01	; 1
    2da2:	31 09       	sbc	r19, r1
    2da4:	11 f7       	brne	.-60     	; 0x2d6a <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x7c>
    2da6:	df 91       	pop	r29
    2da8:	cf 91       	pop	r28
    2daa:	1f 91       	pop	r17
    2dac:	08 95       	ret

00002dae <_ZN16Adafruit_SSD130613invertDisplayEb>:
    2dae:	1f 93       	push	r17
    2db0:	cf 93       	push	r28
    2db2:	df 93       	push	r29
    2db4:	ec 01       	movw	r28, r24
    2db6:	16 2f       	mov	r17, r22
    2db8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2dba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2dbc:	00 97       	sbiw	r24, 0x00	; 0
    2dbe:	39 f0       	breq	.+14     	; 0x2dce <_ZN16Adafruit_SSD130613invertDisplayEb+0x20>
    2dc0:	4d a9       	ldd	r20, Y+53	; 0x35
    2dc2:	5e a9       	ldd	r21, Y+54	; 0x36
    2dc4:	6f a9       	ldd	r22, Y+55	; 0x37
    2dc6:	78 ad       	ldd	r23, Y+56	; 0x38
    2dc8:	0e 94 80 32 	call	0x6500	; 0x6500 <_ZN7TwoWire8setClockEm>
    2dcc:	0f c0       	rjmp	.+30     	; 0x2dec <_ZN16Adafruit_SSD130613invertDisplayEb+0x3e>
    2dce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2dd0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2dd2:	89 2b       	or	r24, r25
    2dd4:	21 f0       	breq	.+8      	; 0x2dde <_ZN16Adafruit_SSD130613invertDisplayEb+0x30>
    2dd6:	8e ad       	ldd	r24, Y+62	; 0x3e
    2dd8:	9f ad       	ldd	r25, Y+63	; 0x3f
    2dda:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <_ZN8SPIClass16beginTransactionE11SPISettings>
    2dde:	ef a5       	ldd	r30, Y+47	; 0x2f
    2de0:	f8 a9       	ldd	r31, Y+48	; 0x30
    2de2:	90 81       	ld	r25, Z
    2de4:	8c a9       	ldd	r24, Y+52	; 0x34
    2de6:	80 95       	com	r24
    2de8:	89 23       	and	r24, r25
    2dea:	80 83       	st	Z, r24
    2dec:	11 11       	cpse	r17, r1
    2dee:	02 c0       	rjmp	.+4      	; 0x2df4 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
    2df0:	66 ea       	ldi	r22, 0xA6	; 166
    2df2:	01 c0       	rjmp	.+2      	; 0x2df6 <_ZN16Adafruit_SSD130613invertDisplayEb+0x48>
    2df4:	67 ea       	ldi	r22, 0xA7	; 167
    2df6:	ce 01       	movw	r24, r28
    2df8:	7a df       	rcall	.-268    	; 0x2cee <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    2dfa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2dfc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2dfe:	00 97       	sbiw	r24, 0x00	; 0
    2e00:	49 f0       	breq	.+18     	; 0x2e14 <_ZN16Adafruit_SSD130613invertDisplayEb+0x66>
    2e02:	49 ad       	ldd	r20, Y+57	; 0x39
    2e04:	5a ad       	ldd	r21, Y+58	; 0x3a
    2e06:	6b ad       	ldd	r22, Y+59	; 0x3b
    2e08:	7c ad       	ldd	r23, Y+60	; 0x3c
    2e0a:	df 91       	pop	r29
    2e0c:	cf 91       	pop	r28
    2e0e:	1f 91       	pop	r17
    2e10:	0c 94 80 32 	jmp	0x6500	; 0x6500 <_ZN7TwoWire8setClockEm>
    2e14:	ef a5       	ldd	r30, Y+47	; 0x2f
    2e16:	f8 a9       	ldd	r31, Y+48	; 0x30
    2e18:	90 81       	ld	r25, Z
    2e1a:	8c a9       	ldd	r24, Y+52	; 0x34
    2e1c:	89 2b       	or	r24, r25
    2e1e:	80 83       	st	Z, r24
    2e20:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e22:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e24:	89 2b       	or	r24, r25
    2e26:	29 f0       	breq	.+10     	; 0x2e32 <_ZN16Adafruit_SSD130613invertDisplayEb+0x84>
    2e28:	df 91       	pop	r29
    2e2a:	cf 91       	pop	r28
    2e2c:	1f 91       	pop	r17
    2e2e:	0c 94 e6 0e 	jmp	0x1dcc	; 0x1dcc <_ZN8SPIClass14endTransactionEv>
    2e32:	df 91       	pop	r29
    2e34:	cf 91       	pop	r28
    2e36:	1f 91       	pop	r17
    2e38:	08 95       	ret

00002e3a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
    2e3a:	bf 92       	push	r11
    2e3c:	cf 92       	push	r12
    2e3e:	df 92       	push	r13
    2e40:	ef 92       	push	r14
    2e42:	ff 92       	push	r15
    2e44:	0f 93       	push	r16
    2e46:	1f 93       	push	r17
    2e48:	cf 93       	push	r28
    2e4a:	df 93       	push	r29
    2e4c:	ec 01       	movw	r28, r24
    2e4e:	b6 2e       	mov	r11, r22
    2e50:	07 2f       	mov	r16, r23
    2e52:	14 2f       	mov	r17, r20
    2e54:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e56:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2e58:	00 97       	sbiw	r24, 0x00	; 0
    2e5a:	09 f4       	brne	.+2      	; 0x2e5e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x24>
    2e5c:	52 c0       	rjmp	.+164    	; 0x2f02 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xc8>
    2e5e:	69 a1       	ldd	r22, Y+33	; 0x21
    2e60:	06 2e       	mov	r0, r22
    2e62:	00 0c       	add	r0, r0
    2e64:	77 0b       	sbc	r23, r23
    2e66:	0e 94 8d 32 	call	0x651a	; 0x651a <_ZN7TwoWire17beginTransmissionEi>
    2e6a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e6c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2e6e:	dc 01       	movw	r26, r24
    2e70:	ed 91       	ld	r30, X+
    2e72:	fc 91       	ld	r31, X
    2e74:	01 90       	ld	r0, Z+
    2e76:	f0 81       	ld	r31, Z
    2e78:	e0 2d       	mov	r30, r0
    2e7a:	60 e0       	ldi	r22, 0x00	; 0
    2e7c:	19 95       	eicall
    2e7e:	cb 2c       	mov	r12, r11
    2e80:	d0 2e       	mov	r13, r16
    2e82:	ee 24       	eor	r14, r14
    2e84:	e3 94       	inc	r14
    2e86:	f1 2c       	mov	r15, r1
    2e88:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e8a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2e8c:	11 23       	and	r17, r17
    2e8e:	71 f1       	breq	.+92     	; 0x2eec <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb2>
    2e90:	b0 e2       	ldi	r27, 0x20	; 32
    2e92:	eb 16       	cp	r14, r27
    2e94:	f1 04       	cpc	r15, r1
    2e96:	b8 f0       	brcs	.+46     	; 0x2ec6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x8c>
    2e98:	0e 94 02 33 	call	0x6604	; 0x6604 <_ZN7TwoWire15endTransmissionEv>
    2e9c:	69 a1       	ldd	r22, Y+33	; 0x21
    2e9e:	06 2e       	mov	r0, r22
    2ea0:	00 0c       	add	r0, r0
    2ea2:	77 0b       	sbc	r23, r23
    2ea4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ea6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2ea8:	0e 94 8d 32 	call	0x651a	; 0x651a <_ZN7TwoWire17beginTransmissionEi>
    2eac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2eae:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2eb0:	dc 01       	movw	r26, r24
    2eb2:	ed 91       	ld	r30, X+
    2eb4:	fc 91       	ld	r31, X
    2eb6:	01 90       	ld	r0, Z+
    2eb8:	f0 81       	ld	r31, Z
    2eba:	e0 2d       	mov	r30, r0
    2ebc:	60 e0       	ldi	r22, 0x00	; 0
    2ebe:	19 95       	eicall
    2ec0:	ee 24       	eor	r14, r14
    2ec2:	e3 94       	inc	r14
    2ec4:	f1 2c       	mov	r15, r1
    2ec6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ec8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2eca:	f6 01       	movw	r30, r12
    2ecc:	64 91       	lpm	r22, Z
    2ece:	dc 01       	movw	r26, r24
    2ed0:	ed 91       	ld	r30, X+
    2ed2:	fc 91       	ld	r31, X
    2ed4:	01 90       	ld	r0, Z+
    2ed6:	f0 81       	ld	r31, Z
    2ed8:	e0 2d       	mov	r30, r0
    2eda:	19 95       	eicall
    2edc:	bf ef       	ldi	r27, 0xFF	; 255
    2ede:	eb 1a       	sub	r14, r27
    2ee0:	fb 0a       	sbc	r15, r27
    2ee2:	11 50       	subi	r17, 0x01	; 1
    2ee4:	f6 01       	movw	r30, r12
    2ee6:	31 96       	adiw	r30, 0x01	; 1
    2ee8:	6f 01       	movw	r12, r30
    2eea:	ce cf       	rjmp	.-100    	; 0x2e88 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x4e>
    2eec:	df 91       	pop	r29
    2eee:	cf 91       	pop	r28
    2ef0:	1f 91       	pop	r17
    2ef2:	0f 91       	pop	r16
    2ef4:	ff 90       	pop	r15
    2ef6:	ef 90       	pop	r14
    2ef8:	df 90       	pop	r13
    2efa:	cf 90       	pop	r12
    2efc:	bf 90       	pop	r11
    2efe:	0c 94 02 33 	jmp	0x6604	; 0x6604 <_ZN7TwoWire15endTransmissionEv>
    2f02:	ed a5       	ldd	r30, Y+45	; 0x2d
    2f04:	fe a5       	ldd	r31, Y+46	; 0x2e
    2f06:	90 81       	ld	r25, Z
    2f08:	8b a9       	ldd	r24, Y+51	; 0x33
    2f0a:	80 95       	com	r24
    2f0c:	89 23       	and	r24, r25
    2f0e:	80 83       	st	Z, r24
    2f10:	e6 2e       	mov	r14, r22
    2f12:	f7 2e       	mov	r15, r23
    2f14:	11 23       	and	r17, r17
    2f16:	71 f1       	breq	.+92     	; 0x2f74 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x13a>
    2f18:	f7 01       	movw	r30, r14
    2f1a:	84 91       	lpm	r24, Z
    2f1c:	2b 8d       	ldd	r18, Y+27	; 0x1b
    2f1e:	3c 8d       	ldd	r19, Y+28	; 0x1c
    2f20:	23 2b       	or	r18, r19
    2f22:	31 f0       	breq	.+12     	; 0x2f30 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xf6>
    2f24:	87 de       	rcall	.-754    	; 0x2c34 <_ZN8SPIClass8transferEh>
    2f26:	11 50       	subi	r17, 0x01	; 1
    2f28:	c7 01       	movw	r24, r14
    2f2a:	01 96       	adiw	r24, 0x01	; 1
    2f2c:	7c 01       	movw	r14, r24
    2f2e:	f2 cf       	rjmp	.-28     	; 0x2f14 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xda>
    2f30:	28 e0       	ldi	r18, 0x08	; 8
    2f32:	30 e0       	ldi	r19, 0x00	; 0
    2f34:	40 e8       	ldi	r20, 0x80	; 128
    2f36:	e9 a5       	ldd	r30, Y+41	; 0x29
    2f38:	fa a5       	ldd	r31, Y+42	; 0x2a
    2f3a:	99 a9       	ldd	r25, Y+49	; 0x31
    2f3c:	58 2f       	mov	r21, r24
    2f3e:	54 23       	and	r21, r20
    2f40:	19 f0       	breq	.+6      	; 0x2f48 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x10e>
    2f42:	50 81       	ld	r21, Z
    2f44:	95 2b       	or	r25, r21
    2f46:	03 c0       	rjmp	.+6      	; 0x2f4e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x114>
    2f48:	50 81       	ld	r21, Z
    2f4a:	90 95       	com	r25
    2f4c:	95 23       	and	r25, r21
    2f4e:	90 83       	st	Z, r25
    2f50:	eb a5       	ldd	r30, Y+43	; 0x2b
    2f52:	fc a5       	ldd	r31, Y+44	; 0x2c
    2f54:	50 81       	ld	r21, Z
    2f56:	9a a9       	ldd	r25, Y+50	; 0x32
    2f58:	95 2b       	or	r25, r21
    2f5a:	90 83       	st	Z, r25
    2f5c:	eb a5       	ldd	r30, Y+43	; 0x2b
    2f5e:	fc a5       	ldd	r31, Y+44	; 0x2c
    2f60:	50 81       	ld	r21, Z
    2f62:	9a a9       	ldd	r25, Y+50	; 0x32
    2f64:	90 95       	com	r25
    2f66:	95 23       	and	r25, r21
    2f68:	90 83       	st	Z, r25
    2f6a:	46 95       	lsr	r20
    2f6c:	21 50       	subi	r18, 0x01	; 1
    2f6e:	31 09       	sbc	r19, r1
    2f70:	11 f7       	brne	.-60     	; 0x2f36 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xfc>
    2f72:	d9 cf       	rjmp	.-78     	; 0x2f26 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xec>
    2f74:	df 91       	pop	r29
    2f76:	cf 91       	pop	r28
    2f78:	1f 91       	pop	r17
    2f7a:	0f 91       	pop	r16
    2f7c:	ff 90       	pop	r15
    2f7e:	ef 90       	pop	r14
    2f80:	df 90       	pop	r13
    2f82:	cf 90       	pop	r12
    2f84:	bf 90       	pop	r11
    2f86:	08 95       	ret

00002f88 <_ZN16Adafruit_SSD130612clearDisplayEv>:
    2f88:	fc 01       	movw	r30, r24
    2f8a:	86 81       	ldd	r24, Z+6	; 0x06
    2f8c:	97 81       	ldd	r25, Z+7	; 0x07
    2f8e:	9c 01       	movw	r18, r24
    2f90:	29 5f       	subi	r18, 0xF9	; 249
    2f92:	3f 4f       	sbci	r19, 0xFF	; 255
    2f94:	37 ff       	sbrs	r19, 7
    2f96:	02 c0       	rjmp	.+4      	; 0x2f9c <_ZN16Adafruit_SSD130612clearDisplayEv+0x14>
    2f98:	29 5f       	subi	r18, 0xF9	; 249
    2f9a:	3f 4f       	sbci	r19, 0xFF	; 255
    2f9c:	83 e0       	ldi	r24, 0x03	; 3
    2f9e:	35 95       	asr	r19
    2fa0:	27 95       	ror	r18
    2fa2:	8a 95       	dec	r24
    2fa4:	e1 f7       	brne	.-8      	; 0x2f9e <_ZN16Adafruit_SSD130612clearDisplayEv+0x16>
    2fa6:	84 81       	ldd	r24, Z+4	; 0x04
    2fa8:	95 81       	ldd	r25, Z+5	; 0x05
    2faa:	28 9f       	mul	r18, r24
    2fac:	a0 01       	movw	r20, r0
    2fae:	29 9f       	mul	r18, r25
    2fb0:	50 0d       	add	r21, r0
    2fb2:	38 9f       	mul	r19, r24
    2fb4:	50 0d       	add	r21, r0
    2fb6:	11 24       	eor	r1, r1
    2fb8:	60 e0       	ldi	r22, 0x00	; 0
    2fba:	70 e0       	ldi	r23, 0x00	; 0
    2fbc:	87 8d       	ldd	r24, Z+31	; 0x1f
    2fbe:	90 a1       	ldd	r25, Z+32	; 0x20
    2fc0:	0c 94 f2 40 	jmp	0x81e4	; 0x81e4 <memset>

00002fc4 <_ZN16Adafruit_SSD13065beginEhhbb>:
    2fc4:	8f 92       	push	r8
    2fc6:	9f 92       	push	r9
    2fc8:	af 92       	push	r10
    2fca:	bf 92       	push	r11
    2fcc:	cf 92       	push	r12
    2fce:	df 92       	push	r13
    2fd0:	ef 92       	push	r14
    2fd2:	ff 92       	push	r15
    2fd4:	0f 93       	push	r16
    2fd6:	1f 93       	push	r17
    2fd8:	cf 93       	push	r28
    2fda:	df 93       	push	r29
    2fdc:	ec 01       	movw	r28, r24
    2fde:	86 2e       	mov	r8, r22
    2fe0:	b4 2e       	mov	r11, r20
    2fe2:	a2 2e       	mov	r10, r18
    2fe4:	90 2e       	mov	r9, r16
    2fe6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2fe8:	98 a1       	ldd	r25, Y+32	; 0x20
    2fea:	89 2b       	or	r24, r25
    2fec:	e9 f4       	brne	.+58     	; 0x3028 <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    2fee:	2e 81       	ldd	r18, Y+6	; 0x06
    2ff0:	3f 81       	ldd	r19, Y+7	; 0x07
    2ff2:	c9 01       	movw	r24, r18
    2ff4:	07 96       	adiw	r24, 0x07	; 7
    2ff6:	97 fd       	sbrc	r25, 7
    2ff8:	07 96       	adiw	r24, 0x07	; 7
    2ffa:	23 e0       	ldi	r18, 0x03	; 3
    2ffc:	95 95       	asr	r25
    2ffe:	87 95       	ror	r24
    3000:	2a 95       	dec	r18
    3002:	e1 f7       	brne	.-8      	; 0x2ffc <_ZN16Adafruit_SSD13065beginEhhbb+0x38>
    3004:	2c 81       	ldd	r18, Y+4	; 0x04
    3006:	3d 81       	ldd	r19, Y+5	; 0x05
    3008:	ac 01       	movw	r20, r24
    300a:	42 9f       	mul	r20, r18
    300c:	c0 01       	movw	r24, r0
    300e:	43 9f       	mul	r20, r19
    3010:	90 0d       	add	r25, r0
    3012:	52 9f       	mul	r21, r18
    3014:	90 0d       	add	r25, r0
    3016:	11 24       	eor	r1, r1
    3018:	0e 94 e4 3e 	call	0x7dc8	; 0x7dc8 <malloc>
    301c:	98 a3       	std	Y+32, r25	; 0x20
    301e:	8f 8f       	std	Y+31, r24	; 0x1f
    3020:	89 2b       	or	r24, r25
    3022:	11 f4       	brne	.+4      	; 0x3028 <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    3024:	80 e0       	ldi	r24, 0x00	; 0
    3026:	84 c1       	rjmp	.+776    	; 0x3330 <_ZN16Adafruit_SSD13065beginEhhbb+0x36c>
    3028:	ce 01       	movw	r24, r28
    302a:	ae df       	rcall	.-164    	; 0x2f88 <_ZN16Adafruit_SSD130612clearDisplayEv>
    302c:	8e 81       	ldd	r24, Y+6	; 0x06
    302e:	9f 81       	ldd	r25, Y+7	; 0x07
    3030:	6c 81       	ldd	r22, Y+4	; 0x04
    3032:	7d 81       	ldd	r23, Y+5	; 0x05
    3034:	81 32       	cpi	r24, 0x21	; 33
    3036:	91 05       	cpc	r25, r1
    3038:	e4 f0       	brlt	.+56     	; 0x3072 <_ZN16Adafruit_SSD13065beginEhhbb+0xae>
    303a:	ac 01       	movw	r20, r24
    303c:	40 54       	subi	r20, 0x40	; 64
    303e:	51 09       	sbc	r21, r1
    3040:	57 ff       	sbrs	r21, 7
    3042:	02 c0       	rjmp	.+4      	; 0x3048 <_ZN16Adafruit_SSD13065beginEhhbb+0x84>
    3044:	4f 5f       	subi	r20, 0xFF	; 255
    3046:	5f 4f       	sbci	r21, 0xFF	; 255
    3048:	55 95       	asr	r21
    304a:	47 95       	ror	r20
    304c:	62 55       	subi	r22, 0x52	; 82
    304e:	71 09       	sbc	r23, r1
    3050:	77 ff       	sbrs	r23, 7
    3052:	02 c0       	rjmp	.+4      	; 0x3058 <_ZN16Adafruit_SSD13065beginEhhbb+0x94>
    3054:	6f 5f       	subi	r22, 0xFF	; 255
    3056:	7f 4f       	sbci	r23, 0xFF	; 255
    3058:	75 95       	asr	r23
    305a:	67 95       	ror	r22
    305c:	cc 24       	eor	r12, r12
    305e:	c3 94       	inc	r12
    3060:	d1 2c       	mov	r13, r1
    3062:	80 e4       	ldi	r24, 0x40	; 64
    3064:	e8 2e       	mov	r14, r24
    3066:	f1 2c       	mov	r15, r1
    3068:	02 e5       	ldi	r16, 0x52	; 82
    306a:	10 e0       	ldi	r17, 0x00	; 0
    306c:	2b e3       	ldi	r18, 0x3B	; 59
    306e:	39 e0       	ldi	r19, 0x09	; 9
    3070:	1b c0       	rjmp	.+54     	; 0x30a8 <_ZN16Adafruit_SSD13065beginEhhbb+0xe4>
    3072:	ac 01       	movw	r20, r24
    3074:	40 52       	subi	r20, 0x20	; 32
    3076:	51 09       	sbc	r21, r1
    3078:	57 ff       	sbrs	r21, 7
    307a:	02 c0       	rjmp	.+4      	; 0x3080 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
    307c:	4f 5f       	subi	r20, 0xFF	; 255
    307e:	5f 4f       	sbci	r21, 0xFF	; 255
    3080:	55 95       	asr	r21
    3082:	47 95       	ror	r20
    3084:	63 57       	subi	r22, 0x73	; 115
    3086:	71 09       	sbc	r23, r1
    3088:	77 ff       	sbrs	r23, 7
    308a:	02 c0       	rjmp	.+4      	; 0x3090 <_ZN16Adafruit_SSD13065beginEhhbb+0xcc>
    308c:	6f 5f       	subi	r22, 0xFF	; 255
    308e:	7f 4f       	sbci	r23, 0xFF	; 255
    3090:	75 95       	asr	r23
    3092:	67 95       	ror	r22
    3094:	cc 24       	eor	r12, r12
    3096:	c3 94       	inc	r12
    3098:	d1 2c       	mov	r13, r1
    309a:	a0 e2       	ldi	r26, 0x20	; 32
    309c:	ea 2e       	mov	r14, r26
    309e:	f1 2c       	mov	r15, r1
    30a0:	03 e7       	ldi	r16, 0x73	; 115
    30a2:	10 e0       	ldi	r17, 0x00	; 0
    30a4:	2b e5       	ldi	r18, 0x5B	; 91
    30a6:	37 e0       	ldi	r19, 0x07	; 7
    30a8:	ce 01       	movw	r24, r28
    30aa:	5e d9       	rcall	.-3396   	; 0x2368 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij>
    30ac:	8a a2       	std	Y+34, r8	; 0x22
    30ae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    30b0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    30b2:	00 97       	sbiw	r24, 0x00	; 0
    30b4:	99 f0       	breq	.+38     	; 0x30dc <_ZN16Adafruit_SSD13065beginEhhbb+0x118>
    30b6:	b1 10       	cpse	r11, r1
    30b8:	07 c0       	rjmp	.+14     	; 0x30c8 <_ZN16Adafruit_SSD13065beginEhhbb+0x104>
    30ba:	2e 81       	ldd	r18, Y+6	; 0x06
    30bc:	3f 81       	ldd	r19, Y+7	; 0x07
    30be:	20 32       	cpi	r18, 0x20	; 32
    30c0:	31 05       	cpc	r19, r1
    30c2:	21 f4       	brne	.+8      	; 0x30cc <_ZN16Adafruit_SSD13065beginEhhbb+0x108>
    30c4:	2c e3       	ldi	r18, 0x3C	; 60
    30c6:	03 c0       	rjmp	.+6      	; 0x30ce <_ZN16Adafruit_SSD13065beginEhhbb+0x10a>
    30c8:	2b 2d       	mov	r18, r11
    30ca:	01 c0       	rjmp	.+2      	; 0x30ce <_ZN16Adafruit_SSD13065beginEhhbb+0x10a>
    30cc:	2d e3       	ldi	r18, 0x3D	; 61
    30ce:	29 a3       	std	Y+33, r18	; 0x21
    30d0:	99 20       	and	r9, r9
    30d2:	09 f4       	brne	.+2      	; 0x30d6 <_ZN16Adafruit_SSD13065beginEhhbb+0x112>
    30d4:	2a c1       	rjmp	.+596    	; 0x332a <_ZN16Adafruit_SSD13065beginEhhbb+0x366>
    30d6:	0e 94 71 32 	call	0x64e2	; 0x64e2 <_ZN7TwoWire5beginEv>
    30da:	79 c0       	rjmp	.+242    	; 0x31ce <_ZN16Adafruit_SSD13065beginEhhbb+0x20a>
    30dc:	61 e0       	ldi	r22, 0x01	; 1
    30de:	8e a1       	ldd	r24, Y+38	; 0x26
    30e0:	0e 94 fe 3a 	call	0x75fc	; 0x75fc <pinMode>
    30e4:	61 e0       	ldi	r22, 0x01	; 1
    30e6:	8f a1       	ldd	r24, Y+39	; 0x27
    30e8:	0e 94 fe 3a 	call	0x75fc	; 0x75fc <pinMode>
    30ec:	8e a1       	ldd	r24, Y+38	; 0x26
    30ee:	08 2e       	mov	r0, r24
    30f0:	00 0c       	add	r0, r0
    30f2:	99 0b       	sbc	r25, r25
    30f4:	fc 01       	movw	r30, r24
    30f6:	e9 57       	subi	r30, 0x79	; 121
    30f8:	f3 4f       	sbci	r31, 0xF3	; 243
    30fa:	e4 91       	lpm	r30, Z
    30fc:	f0 e0       	ldi	r31, 0x00	; 0
    30fe:	ee 0f       	add	r30, r30
    3100:	ff 1f       	adc	r31, r31
    3102:	e9 51       	subi	r30, 0x19	; 25
    3104:	f3 4f       	sbci	r31, 0xF3	; 243
    3106:	25 91       	lpm	r18, Z+
    3108:	34 91       	lpm	r19, Z
    310a:	3e a7       	std	Y+46, r19	; 0x2e
    310c:	2d a7       	std	Y+45, r18	; 0x2d
    310e:	fc 01       	movw	r30, r24
    3110:	ef 5b       	subi	r30, 0xBF	; 191
    3112:	f3 4f       	sbci	r31, 0xF3	; 243
    3114:	e4 91       	lpm	r30, Z
    3116:	eb ab       	std	Y+51, r30	; 0x33
    3118:	8f a1       	ldd	r24, Y+39	; 0x27
    311a:	08 2e       	mov	r0, r24
    311c:	00 0c       	add	r0, r0
    311e:	99 0b       	sbc	r25, r25
    3120:	fc 01       	movw	r30, r24
    3122:	e9 57       	subi	r30, 0x79	; 121
    3124:	f3 4f       	sbci	r31, 0xF3	; 243
    3126:	e4 91       	lpm	r30, Z
    3128:	f0 e0       	ldi	r31, 0x00	; 0
    312a:	ee 0f       	add	r30, r30
    312c:	ff 1f       	adc	r31, r31
    312e:	e9 51       	subi	r30, 0x19	; 25
    3130:	f3 4f       	sbci	r31, 0xF3	; 243
    3132:	a5 91       	lpm	r26, Z+
    3134:	b4 91       	lpm	r27, Z
    3136:	b8 ab       	std	Y+48, r27	; 0x30
    3138:	af a7       	std	Y+47, r26	; 0x2f
    313a:	fc 01       	movw	r30, r24
    313c:	ef 5b       	subi	r30, 0xBF	; 191
    313e:	f3 4f       	sbci	r31, 0xF3	; 243
    3140:	e4 91       	lpm	r30, Z
    3142:	ec ab       	std	Y+52, r30	; 0x34
    3144:	8c 91       	ld	r24, X
    3146:	e8 2b       	or	r30, r24
    3148:	ec 93       	st	X, r30
    314a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    314c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    314e:	89 2b       	or	r24, r25
    3150:	31 f0       	breq	.+12     	; 0x315e <_ZN16Adafruit_SSD13065beginEhhbb+0x19a>
    3152:	99 20       	and	r9, r9
    3154:	09 f4       	brne	.+2      	; 0x3158 <_ZN16Adafruit_SSD13065beginEhhbb+0x194>
    3156:	3b c0       	rjmp	.+118    	; 0x31ce <_ZN16Adafruit_SSD13065beginEhhbb+0x20a>
    3158:	0e 94 7e 2d 	call	0x5afc	; 0x5afc <_ZN8SPIClass5beginEv>
    315c:	38 c0       	rjmp	.+112    	; 0x31ce <_ZN16Adafruit_SSD13065beginEhhbb+0x20a>
    315e:	61 e0       	ldi	r22, 0x01	; 1
    3160:	8c a1       	ldd	r24, Y+36	; 0x24
    3162:	0e 94 fe 3a 	call	0x75fc	; 0x75fc <pinMode>
    3166:	61 e0       	ldi	r22, 0x01	; 1
    3168:	8d a1       	ldd	r24, Y+37	; 0x25
    316a:	0e 94 fe 3a 	call	0x75fc	; 0x75fc <pinMode>
    316e:	8c a1       	ldd	r24, Y+36	; 0x24
    3170:	08 2e       	mov	r0, r24
    3172:	00 0c       	add	r0, r0
    3174:	99 0b       	sbc	r25, r25
    3176:	fc 01       	movw	r30, r24
    3178:	e9 57       	subi	r30, 0x79	; 121
    317a:	f3 4f       	sbci	r31, 0xF3	; 243
    317c:	e4 91       	lpm	r30, Z
    317e:	f0 e0       	ldi	r31, 0x00	; 0
    3180:	ee 0f       	add	r30, r30
    3182:	ff 1f       	adc	r31, r31
    3184:	e9 51       	subi	r30, 0x19	; 25
    3186:	f3 4f       	sbci	r31, 0xF3	; 243
    3188:	25 91       	lpm	r18, Z+
    318a:	34 91       	lpm	r19, Z
    318c:	3a a7       	std	Y+42, r19	; 0x2a
    318e:	29 a7       	std	Y+41, r18	; 0x29
    3190:	fc 01       	movw	r30, r24
    3192:	ef 5b       	subi	r30, 0xBF	; 191
    3194:	f3 4f       	sbci	r31, 0xF3	; 243
    3196:	e4 91       	lpm	r30, Z
    3198:	e9 ab       	std	Y+49, r30	; 0x31
    319a:	8d a1       	ldd	r24, Y+37	; 0x25
    319c:	08 2e       	mov	r0, r24
    319e:	00 0c       	add	r0, r0
    31a0:	99 0b       	sbc	r25, r25
    31a2:	fc 01       	movw	r30, r24
    31a4:	e9 57       	subi	r30, 0x79	; 121
    31a6:	f3 4f       	sbci	r31, 0xF3	; 243
    31a8:	e4 91       	lpm	r30, Z
    31aa:	f0 e0       	ldi	r31, 0x00	; 0
    31ac:	ee 0f       	add	r30, r30
    31ae:	ff 1f       	adc	r31, r31
    31b0:	e9 51       	subi	r30, 0x19	; 25
    31b2:	f3 4f       	sbci	r31, 0xF3	; 243
    31b4:	a5 91       	lpm	r26, Z+
    31b6:	b4 91       	lpm	r27, Z
    31b8:	bc a7       	std	Y+44, r27	; 0x2c
    31ba:	ab a7       	std	Y+43, r26	; 0x2b
    31bc:	fc 01       	movw	r30, r24
    31be:	ef 5b       	subi	r30, 0xBF	; 191
    31c0:	f3 4f       	sbci	r31, 0xF3	; 243
    31c2:	e4 91       	lpm	r30, Z
    31c4:	ea ab       	std	Y+50, r30	; 0x32
    31c6:	8c 91       	ld	r24, X
    31c8:	e0 95       	com	r30
    31ca:	e8 23       	and	r30, r24
    31cc:	ec 93       	st	X, r30
    31ce:	aa 20       	and	r10, r10
    31d0:	f1 f0       	breq	.+60     	; 0x320e <_ZN16Adafruit_SSD13065beginEhhbb+0x24a>
    31d2:	88 a5       	ldd	r24, Y+40	; 0x28
    31d4:	87 fd       	sbrc	r24, 7
    31d6:	1b c0       	rjmp	.+54     	; 0x320e <_ZN16Adafruit_SSD13065beginEhhbb+0x24a>
    31d8:	61 e0       	ldi	r22, 0x01	; 1
    31da:	0e 94 fe 3a 	call	0x75fc	; 0x75fc <pinMode>
    31de:	61 e0       	ldi	r22, 0x01	; 1
    31e0:	88 a5       	ldd	r24, Y+40	; 0x28
    31e2:	0e 94 3a 3b 	call	0x7674	; 0x7674 <digitalWrite>
    31e6:	61 e0       	ldi	r22, 0x01	; 1
    31e8:	70 e0       	ldi	r23, 0x00	; 0
    31ea:	80 e0       	ldi	r24, 0x00	; 0
    31ec:	90 e0       	ldi	r25, 0x00	; 0
    31ee:	0e 94 18 39 	call	0x7230	; 0x7230 <delay>
    31f2:	60 e0       	ldi	r22, 0x00	; 0
    31f4:	88 a5       	ldd	r24, Y+40	; 0x28
    31f6:	0e 94 3a 3b 	call	0x7674	; 0x7674 <digitalWrite>
    31fa:	6a e0       	ldi	r22, 0x0A	; 10
    31fc:	70 e0       	ldi	r23, 0x00	; 0
    31fe:	80 e0       	ldi	r24, 0x00	; 0
    3200:	90 e0       	ldi	r25, 0x00	; 0
    3202:	0e 94 18 39 	call	0x7230	; 0x7230 <delay>
    3206:	61 e0       	ldi	r22, 0x01	; 1
    3208:	88 a5       	ldd	r24, Y+40	; 0x28
    320a:	0e 94 3a 3b 	call	0x7674	; 0x7674 <digitalWrite>
    320e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3210:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3212:	00 97       	sbiw	r24, 0x00	; 0
    3214:	39 f0       	breq	.+14     	; 0x3224 <_ZN16Adafruit_SSD13065beginEhhbb+0x260>
    3216:	4d a9       	ldd	r20, Y+53	; 0x35
    3218:	5e a9       	ldd	r21, Y+54	; 0x36
    321a:	6f a9       	ldd	r22, Y+55	; 0x37
    321c:	78 ad       	ldd	r23, Y+56	; 0x38
    321e:	0e 94 80 32 	call	0x6500	; 0x6500 <_ZN7TwoWire8setClockEm>
    3222:	0f c0       	rjmp	.+30     	; 0x3242 <_ZN16Adafruit_SSD13065beginEhhbb+0x27e>
    3224:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3226:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3228:	89 2b       	or	r24, r25
    322a:	21 f0       	breq	.+8      	; 0x3234 <_ZN16Adafruit_SSD13065beginEhhbb+0x270>
    322c:	8e ad       	ldd	r24, Y+62	; 0x3e
    322e:	9f ad       	ldd	r25, Y+63	; 0x3f
    3230:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <_ZN8SPIClass16beginTransactionE11SPISettings>
    3234:	ef a5       	ldd	r30, Y+47	; 0x2f
    3236:	f8 a9       	ldd	r31, Y+48	; 0x30
    3238:	90 81       	ld	r25, Z
    323a:	8c a9       	ldd	r24, Y+52	; 0x34
    323c:	80 95       	com	r24
    323e:	89 23       	and	r24, r25
    3240:	80 83       	st	Z, r24
    3242:	44 e0       	ldi	r20, 0x04	; 4
    3244:	67 e5       	ldi	r22, 0x57	; 87
    3246:	77 e0       	ldi	r23, 0x07	; 7
    3248:	ce 01       	movw	r24, r28
    324a:	f7 dd       	rcall	.-1042   	; 0x2e3a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    324c:	6e 81       	ldd	r22, Y+6	; 0x06
    324e:	61 50       	subi	r22, 0x01	; 1
    3250:	ce 01       	movw	r24, r28
    3252:	4d dd       	rcall	.-1382   	; 0x2cee <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    3254:	44 e0       	ldi	r20, 0x04	; 4
    3256:	63 e5       	ldi	r22, 0x53	; 83
    3258:	77 e0       	ldi	r23, 0x07	; 7
    325a:	ce 01       	movw	r24, r28
    325c:	ee dd       	rcall	.-1060   	; 0x2e3a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    325e:	8a a1       	ldd	r24, Y+34	; 0x22
    3260:	81 30       	cpi	r24, 0x01	; 1
    3262:	11 f4       	brne	.+4      	; 0x3268 <_ZN16Adafruit_SSD13065beginEhhbb+0x2a4>
    3264:	60 e1       	ldi	r22, 0x10	; 16
    3266:	01 c0       	rjmp	.+2      	; 0x326a <_ZN16Adafruit_SSD13065beginEhhbb+0x2a6>
    3268:	64 e1       	ldi	r22, 0x14	; 20
    326a:	ce 01       	movw	r24, r28
    326c:	40 dd       	rcall	.-1408   	; 0x2cee <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    326e:	44 e0       	ldi	r20, 0x04	; 4
    3270:	6f e4       	ldi	r22, 0x4F	; 79
    3272:	77 e0       	ldi	r23, 0x07	; 7
    3274:	ce 01       	movw	r24, r28
    3276:	e1 dd       	rcall	.-1086   	; 0x2e3a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    3278:	8f e8       	ldi	r24, 0x8F	; 143
    327a:	8d af       	std	Y+61, r24	; 0x3d
    327c:	8c 81       	ldd	r24, Y+4	; 0x04
    327e:	9d 81       	ldd	r25, Y+5	; 0x05
    3280:	80 38       	cpi	r24, 0x80	; 128
    3282:	91 05       	cpc	r25, r1
    3284:	71 f4       	brne	.+28     	; 0x32a2 <_ZN16Adafruit_SSD13065beginEhhbb+0x2de>
    3286:	8e 81       	ldd	r24, Y+6	; 0x06
    3288:	9f 81       	ldd	r25, Y+7	; 0x07
    328a:	80 34       	cpi	r24, 0x40	; 64
    328c:	91 05       	cpc	r25, r1
    328e:	b9 f4       	brne	.+46     	; 0x32be <_ZN16Adafruit_SSD13065beginEhhbb+0x2fa>
    3290:	8a a1       	ldd	r24, Y+34	; 0x22
    3292:	81 30       	cpi	r24, 0x01	; 1
    3294:	11 f4       	brne	.+4      	; 0x329a <_ZN16Adafruit_SSD13065beginEhhbb+0x2d6>
    3296:	8f e9       	ldi	r24, 0x9F	; 159
    3298:	01 c0       	rjmp	.+2      	; 0x329c <_ZN16Adafruit_SSD13065beginEhhbb+0x2d8>
    329a:	8f ec       	ldi	r24, 0xCF	; 207
    329c:	8d af       	std	Y+61, r24	; 0x3d
    329e:	12 e1       	ldi	r17, 0x12	; 18
    32a0:	0f c0       	rjmp	.+30     	; 0x32c0 <_ZN16Adafruit_SSD13065beginEhhbb+0x2fc>
    32a2:	80 36       	cpi	r24, 0x60	; 96
    32a4:	91 05       	cpc	r25, r1
    32a6:	59 f4       	brne	.+22     	; 0x32be <_ZN16Adafruit_SSD13065beginEhhbb+0x2fa>
    32a8:	8e 81       	ldd	r24, Y+6	; 0x06
    32aa:	9f 81       	ldd	r25, Y+7	; 0x07
    32ac:	40 97       	sbiw	r24, 0x10	; 16
    32ae:	39 f4       	brne	.+14     	; 0x32be <_ZN16Adafruit_SSD13065beginEhhbb+0x2fa>
    32b0:	8a a1       	ldd	r24, Y+34	; 0x22
    32b2:	81 30       	cpi	r24, 0x01	; 1
    32b4:	11 f4       	brne	.+4      	; 0x32ba <_ZN16Adafruit_SSD13065beginEhhbb+0x2f6>
    32b6:	80 e1       	ldi	r24, 0x10	; 16
    32b8:	01 c0       	rjmp	.+2      	; 0x32bc <_ZN16Adafruit_SSD13065beginEhhbb+0x2f8>
    32ba:	8f ea       	ldi	r24, 0xAF	; 175
    32bc:	8d af       	std	Y+61, r24	; 0x3d
    32be:	12 e0       	ldi	r17, 0x02	; 2
    32c0:	6a ed       	ldi	r22, 0xDA	; 218
    32c2:	ce 01       	movw	r24, r28
    32c4:	14 dd       	rcall	.-1496   	; 0x2cee <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    32c6:	61 2f       	mov	r22, r17
    32c8:	ce 01       	movw	r24, r28
    32ca:	11 dd       	rcall	.-1502   	; 0x2cee <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    32cc:	61 e8       	ldi	r22, 0x81	; 129
    32ce:	ce 01       	movw	r24, r28
    32d0:	0e dd       	rcall	.-1508   	; 0x2cee <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    32d2:	6d ad       	ldd	r22, Y+61	; 0x3d
    32d4:	ce 01       	movw	r24, r28
    32d6:	0b dd       	rcall	.-1514   	; 0x2cee <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    32d8:	69 ed       	ldi	r22, 0xD9	; 217
    32da:	ce 01       	movw	r24, r28
    32dc:	08 dd       	rcall	.-1520   	; 0x2cee <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    32de:	8a a1       	ldd	r24, Y+34	; 0x22
    32e0:	81 30       	cpi	r24, 0x01	; 1
    32e2:	11 f4       	brne	.+4      	; 0x32e8 <_ZN16Adafruit_SSD13065beginEhhbb+0x324>
    32e4:	62 e2       	ldi	r22, 0x22	; 34
    32e6:	01 c0       	rjmp	.+2      	; 0x32ea <_ZN16Adafruit_SSD13065beginEhhbb+0x326>
    32e8:	61 ef       	ldi	r22, 0xF1	; 241
    32ea:	ce 01       	movw	r24, r28
    32ec:	00 dd       	rcall	.-1536   	; 0x2cee <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    32ee:	46 e0       	ldi	r20, 0x06	; 6
    32f0:	69 e4       	ldi	r22, 0x49	; 73
    32f2:	77 e0       	ldi	r23, 0x07	; 7
    32f4:	ce 01       	movw	r24, r28
    32f6:	a1 dd       	rcall	.-1214   	; 0x2e3a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    32f8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    32fa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    32fc:	00 97       	sbiw	r24, 0x00	; 0
    32fe:	39 f0       	breq	.+14     	; 0x330e <_ZN16Adafruit_SSD13065beginEhhbb+0x34a>
    3300:	49 ad       	ldd	r20, Y+57	; 0x39
    3302:	5a ad       	ldd	r21, Y+58	; 0x3a
    3304:	6b ad       	ldd	r22, Y+59	; 0x3b
    3306:	7c ad       	ldd	r23, Y+60	; 0x3c
    3308:	0e 94 80 32 	call	0x6500	; 0x6500 <_ZN7TwoWire8setClockEm>
    330c:	0c c0       	rjmp	.+24     	; 0x3326 <_ZN16Adafruit_SSD13065beginEhhbb+0x362>
    330e:	ef a5       	ldd	r30, Y+47	; 0x2f
    3310:	f8 a9       	ldd	r31, Y+48	; 0x30
    3312:	90 81       	ld	r25, Z
    3314:	8c a9       	ldd	r24, Y+52	; 0x34
    3316:	89 2b       	or	r24, r25
    3318:	80 83       	st	Z, r24
    331a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    331c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    331e:	89 2b       	or	r24, r25
    3320:	11 f0       	breq	.+4      	; 0x3326 <_ZN16Adafruit_SSD13065beginEhhbb+0x362>
    3322:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <_ZN8SPIClass14endTransactionEv>
    3326:	81 e0       	ldi	r24, 0x01	; 1
    3328:	03 c0       	rjmp	.+6      	; 0x3330 <_ZN16Adafruit_SSD13065beginEhhbb+0x36c>
    332a:	a1 10       	cpse	r10, r1
    332c:	52 cf       	rjmp	.-348    	; 0x31d2 <_ZN16Adafruit_SSD13065beginEhhbb+0x20e>
    332e:	73 cf       	rjmp	.-282    	; 0x3216 <_ZN16Adafruit_SSD13065beginEhhbb+0x252>
    3330:	df 91       	pop	r29
    3332:	cf 91       	pop	r28
    3334:	1f 91       	pop	r17
    3336:	0f 91       	pop	r16
    3338:	ff 90       	pop	r15
    333a:	ef 90       	pop	r14
    333c:	df 90       	pop	r13
    333e:	cf 90       	pop	r12
    3340:	bf 90       	pop	r11
    3342:	af 90       	pop	r10
    3344:	9f 90       	pop	r9
    3346:	8f 90       	pop	r8
    3348:	08 95       	ret

0000334a <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij>:
    334a:	0f 93       	push	r16
    334c:	1f 93       	push	r17
    334e:	cf 93       	push	r28
    3350:	df 93       	push	r29
    3352:	dc 01       	movw	r26, r24
    3354:	57 fd       	sbrc	r21, 7
    3356:	64 c0       	rjmp	.+200    	; 0x3420 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    3358:	16 96       	adiw	r26, 0x06	; 6
    335a:	8d 91       	ld	r24, X+
    335c:	9c 91       	ld	r25, X
    335e:	17 97       	sbiw	r26, 0x07	; 7
    3360:	48 17       	cp	r20, r24
    3362:	59 07       	cpc	r21, r25
    3364:	0c f0       	brlt	.+2      	; 0x3368 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x1e>
    3366:	5c c0       	rjmp	.+184    	; 0x3420 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    3368:	77 ff       	sbrs	r23, 7
    336a:	04 c0       	rjmp	.+8      	; 0x3374 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x2a>
    336c:	26 0f       	add	r18, r22
    336e:	37 1f       	adc	r19, r23
    3370:	60 e0       	ldi	r22, 0x00	; 0
    3372:	70 e0       	ldi	r23, 0x00	; 0
    3374:	14 96       	adiw	r26, 0x04	; 4
    3376:	cd 91       	ld	r28, X+
    3378:	dc 91       	ld	r29, X
    337a:	15 97       	sbiw	r26, 0x05	; 5
    337c:	cb 01       	movw	r24, r22
    337e:	82 0f       	add	r24, r18
    3380:	93 1f       	adc	r25, r19
    3382:	c8 17       	cp	r28, r24
    3384:	d9 07       	cpc	r29, r25
    3386:	1c f4       	brge	.+6      	; 0x338e <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x44>
    3388:	9e 01       	movw	r18, r28
    338a:	26 1b       	sub	r18, r22
    338c:	37 0b       	sbc	r19, r23
    338e:	12 16       	cp	r1, r18
    3390:	13 06       	cpc	r1, r19
    3392:	0c f0       	brlt	.+2      	; 0x3396 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x4c>
    3394:	45 c0       	rjmp	.+138    	; 0x3420 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    3396:	fa 01       	movw	r30, r20
    3398:	57 fd       	sbrc	r21, 7
    339a:	37 96       	adiw	r30, 0x07	; 7
    339c:	cf 01       	movw	r24, r30
    339e:	e3 e0       	ldi	r30, 0x03	; 3
    33a0:	95 95       	asr	r25
    33a2:	87 95       	ror	r24
    33a4:	ea 95       	dec	r30
    33a6:	e1 f7       	brne	.-8      	; 0x33a0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x56>
    33a8:	8c 9f       	mul	r24, r28
    33aa:	f0 01       	movw	r30, r0
    33ac:	8d 9f       	mul	r24, r29
    33ae:	f0 0d       	add	r31, r0
    33b0:	9c 9f       	mul	r25, r28
    33b2:	f0 0d       	add	r31, r0
    33b4:	11 24       	eor	r1, r1
    33b6:	6e 0f       	add	r22, r30
    33b8:	7f 1f       	adc	r23, r31
    33ba:	5f 96       	adiw	r26, 0x1f	; 31
    33bc:	ed 91       	ld	r30, X+
    33be:	fc 91       	ld	r31, X
    33c0:	90 97       	sbiw	r26, 0x20	; 32
    33c2:	e6 0f       	add	r30, r22
    33c4:	f7 1f       	adc	r31, r23
    33c6:	47 70       	andi	r20, 0x07	; 7
    33c8:	55 27       	eor	r21, r21
    33ca:	81 e0       	ldi	r24, 0x01	; 1
    33cc:	90 e0       	ldi	r25, 0x00	; 0
    33ce:	01 c0       	rjmp	.+2      	; 0x33d2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x88>
    33d0:	88 0f       	add	r24, r24
    33d2:	4a 95       	dec	r20
    33d4:	ea f7       	brpl	.-6      	; 0x33d0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x86>
    33d6:	48 2f       	mov	r20, r24
    33d8:	01 30       	cpi	r16, 0x01	; 1
    33da:	11 05       	cpc	r17, r1
    33dc:	39 f0       	breq	.+14     	; 0x33ec <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xa2>
    33de:	78 f0       	brcs	.+30     	; 0x33fe <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xb4>
    33e0:	02 30       	cpi	r16, 0x02	; 2
    33e2:	11 05       	cpc	r17, r1
    33e4:	e9 f4       	brne	.+58     	; 0x3420 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    33e6:	2e 0f       	add	r18, r30
    33e8:	3f 1f       	adc	r19, r31
    33ea:	13 c0       	rjmp	.+38     	; 0x3412 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xc8>
    33ec:	2e 0f       	add	r18, r30
    33ee:	3f 1f       	adc	r19, r31
    33f0:	e2 17       	cp	r30, r18
    33f2:	f3 07       	cpc	r31, r19
    33f4:	a9 f0       	breq	.+42     	; 0x3420 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    33f6:	80 81       	ld	r24, Z
    33f8:	84 2b       	or	r24, r20
    33fa:	81 93       	st	Z+, r24
    33fc:	f9 cf       	rjmp	.-14     	; 0x33f0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xa6>
    33fe:	80 95       	com	r24
    3400:	2e 0f       	add	r18, r30
    3402:	3f 1f       	adc	r19, r31
    3404:	e2 17       	cp	r30, r18
    3406:	f3 07       	cpc	r31, r19
    3408:	59 f0       	breq	.+22     	; 0x3420 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    340a:	90 81       	ld	r25, Z
    340c:	98 23       	and	r25, r24
    340e:	91 93       	st	Z+, r25
    3410:	f9 cf       	rjmp	.-14     	; 0x3404 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xba>
    3412:	e2 17       	cp	r30, r18
    3414:	f3 07       	cpc	r31, r19
    3416:	21 f0       	breq	.+8      	; 0x3420 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    3418:	80 81       	ld	r24, Z
    341a:	84 27       	eor	r24, r20
    341c:	81 93       	st	Z+, r24
    341e:	f9 cf       	rjmp	.-14     	; 0x3412 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xc8>
    3420:	df 91       	pop	r29
    3422:	cf 91       	pop	r28
    3424:	1f 91       	pop	r17
    3426:	0f 91       	pop	r16
    3428:	08 95       	ret

0000342a <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij>:
    342a:	ef 92       	push	r14
    342c:	ff 92       	push	r15
    342e:	0f 93       	push	r16
    3430:	1f 93       	push	r17
    3432:	cf 93       	push	r28
    3434:	df 93       	push	r29
    3436:	ec 01       	movw	r28, r24
    3438:	77 fd       	sbrc	r23, 7
    343a:	a5 c0       	rjmp	.+330    	; 0x3586 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    343c:	ec 80       	ldd	r14, Y+4	; 0x04
    343e:	fd 80       	ldd	r15, Y+5	; 0x05
    3440:	6e 15       	cp	r22, r14
    3442:	7f 05       	cpc	r23, r15
    3444:	0c f0       	brlt	.+2      	; 0x3448 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x1e>
    3446:	9f c0       	rjmp	.+318    	; 0x3586 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    3448:	57 ff       	sbrs	r21, 7
    344a:	04 c0       	rjmp	.+8      	; 0x3454 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x2a>
    344c:	24 0f       	add	r18, r20
    344e:	35 1f       	adc	r19, r21
    3450:	40 e0       	ldi	r20, 0x00	; 0
    3452:	50 e0       	ldi	r21, 0x00	; 0
    3454:	8e 81       	ldd	r24, Y+6	; 0x06
    3456:	9f 81       	ldd	r25, Y+7	; 0x07
    3458:	fa 01       	movw	r30, r20
    345a:	e2 0f       	add	r30, r18
    345c:	f3 1f       	adc	r31, r19
    345e:	8e 17       	cp	r24, r30
    3460:	9f 07       	cpc	r25, r31
    3462:	1c f4       	brge	.+6      	; 0x346a <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x40>
    3464:	9c 01       	movw	r18, r24
    3466:	24 1b       	sub	r18, r20
    3468:	35 0b       	sbc	r19, r21
    346a:	12 16       	cp	r1, r18
    346c:	13 06       	cpc	r1, r19
    346e:	0c f0       	brlt	.+2      	; 0x3472 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x48>
    3470:	8a c0       	rjmp	.+276    	; 0x3586 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    3472:	92 2f       	mov	r25, r18
    3474:	84 2f       	mov	r24, r20
    3476:	86 95       	lsr	r24
    3478:	86 95       	lsr	r24
    347a:	86 95       	lsr	r24
    347c:	8e 9d       	mul	r24, r14
    347e:	d0 01       	movw	r26, r0
    3480:	8f 9d       	mul	r24, r15
    3482:	b0 0d       	add	r27, r0
    3484:	11 24       	eor	r1, r1
    3486:	6a 0f       	add	r22, r26
    3488:	7b 1f       	adc	r23, r27
    348a:	af 8d       	ldd	r26, Y+31	; 0x1f
    348c:	b8 a1       	ldd	r27, Y+32	; 0x20
    348e:	a6 0f       	add	r26, r22
    3490:	b7 1f       	adc	r27, r23
    3492:	47 70       	andi	r20, 0x07	; 7
    3494:	b1 f1       	breq	.+108    	; 0x3502 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xd8>
    3496:	88 e0       	ldi	r24, 0x08	; 8
    3498:	84 1b       	sub	r24, r20
    349a:	48 2f       	mov	r20, r24
    349c:	68 2f       	mov	r22, r24
    349e:	70 e0       	ldi	r23, 0x00	; 0
    34a0:	fb 01       	movw	r30, r22
    34a2:	ef 5b       	subi	r30, 0xBF	; 191
    34a4:	f8 4f       	sbci	r31, 0xF8	; 248
    34a6:	e4 91       	lpm	r30, Z
    34a8:	28 17       	cp	r18, r24
    34aa:	98 f4       	brcc	.+38     	; 0x34d2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xa8>
    34ac:	62 1b       	sub	r22, r18
    34ae:	71 09       	sbc	r23, r1
    34b0:	2f ef       	ldi	r18, 0xFF	; 255
    34b2:	30 e0       	ldi	r19, 0x00	; 0
    34b4:	02 c0       	rjmp	.+4      	; 0x34ba <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x90>
    34b6:	35 95       	asr	r19
    34b8:	27 95       	ror	r18
    34ba:	6a 95       	dec	r22
    34bc:	e2 f7       	brpl	.-8      	; 0x34b6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x8c>
    34be:	e2 23       	and	r30, r18
    34c0:	01 30       	cpi	r16, 0x01	; 1
    34c2:	11 05       	cpc	r17, r1
    34c4:	49 f0       	breq	.+18     	; 0x34d8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xae>
    34c6:	78 f0       	brcs	.+30     	; 0x34e6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xbc>
    34c8:	02 30       	cpi	r16, 0x02	; 2
    34ca:	11 05       	cpc	r17, r1
    34cc:	09 f0       	breq	.+2      	; 0x34d0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xa6>
    34ce:	5b c0       	rjmp	.+182    	; 0x3586 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    34d0:	0e c0       	rjmp	.+28     	; 0x34ee <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xc4>
    34d2:	01 30       	cpi	r16, 0x01	; 1
    34d4:	11 05       	cpc	r17, r1
    34d6:	19 f4       	brne	.+6      	; 0x34de <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xb4>
    34d8:	8c 91       	ld	r24, X
    34da:	e8 2b       	or	r30, r24
    34dc:	0a c0       	rjmp	.+20     	; 0x34f2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xc8>
    34de:	01 30       	cpi	r16, 0x01	; 1
    34e0:	11 05       	cpc	r17, r1
    34e2:	08 f0       	brcs	.+2      	; 0x34e6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xbc>
    34e4:	49 c0       	rjmp	.+146    	; 0x3578 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x14e>
    34e6:	e0 95       	com	r30
    34e8:	8c 91       	ld	r24, X
    34ea:	e8 23       	and	r30, r24
    34ec:	02 c0       	rjmp	.+4      	; 0x34f2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xc8>
    34ee:	8c 91       	ld	r24, X
    34f0:	e8 27       	eor	r30, r24
    34f2:	ec 93       	st	X, r30
    34f4:	94 17       	cp	r25, r20
    34f6:	08 f4       	brcc	.+2      	; 0x34fa <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xd0>
    34f8:	46 c0       	rjmp	.+140    	; 0x3586 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    34fa:	2c 81       	ldd	r18, Y+4	; 0x04
    34fc:	3d 81       	ldd	r19, Y+5	; 0x05
    34fe:	a2 0f       	add	r26, r18
    3500:	b3 1f       	adc	r27, r19
    3502:	e9 2f       	mov	r30, r25
    3504:	e4 1b       	sub	r30, r20
    3506:	e8 30       	cpi	r30, 0x08	; 8
    3508:	f8 f0       	brcs	.+62     	; 0x3548 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x11e>
    350a:	02 30       	cpi	r16, 0x02	; 2
    350c:	11 05       	cpc	r17, r1
    350e:	61 f4       	brne	.+24     	; 0x3528 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xfe>
    3510:	8e 2f       	mov	r24, r30
    3512:	9c 91       	ld	r25, X
    3514:	90 95       	com	r25
    3516:	9c 93       	st	X, r25
    3518:	2c 81       	ldd	r18, Y+4	; 0x04
    351a:	3d 81       	ldd	r19, Y+5	; 0x05
    351c:	a2 0f       	add	r26, r18
    351e:	b3 1f       	adc	r27, r19
    3520:	88 50       	subi	r24, 0x08	; 8
    3522:	88 30       	cpi	r24, 0x08	; 8
    3524:	b0 f7       	brcc	.-20     	; 0x3512 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xe8>
    3526:	0f c0       	rjmp	.+30     	; 0x3546 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x11c>
    3528:	81 e0       	ldi	r24, 0x01	; 1
    352a:	01 15       	cp	r16, r1
    352c:	11 05       	cpc	r17, r1
    352e:	09 f4       	brne	.+2      	; 0x3532 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x108>
    3530:	80 e0       	ldi	r24, 0x00	; 0
    3532:	81 95       	neg	r24
    3534:	9e 2f       	mov	r25, r30
    3536:	8c 93       	st	X, r24
    3538:	2c 81       	ldd	r18, Y+4	; 0x04
    353a:	3d 81       	ldd	r19, Y+5	; 0x05
    353c:	a2 0f       	add	r26, r18
    353e:	b3 1f       	adc	r27, r19
    3540:	98 50       	subi	r25, 0x08	; 8
    3542:	98 30       	cpi	r25, 0x08	; 8
    3544:	c0 f7       	brcc	.-16     	; 0x3536 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x10c>
    3546:	e7 70       	andi	r30, 0x07	; 7
    3548:	ee 23       	and	r30, r30
    354a:	e9 f0       	breq	.+58     	; 0x3586 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    354c:	f0 e0       	ldi	r31, 0x00	; 0
    354e:	e7 5c       	subi	r30, 0xC7	; 199
    3550:	f8 4f       	sbci	r31, 0xF8	; 248
    3552:	e4 91       	lpm	r30, Z
    3554:	01 30       	cpi	r16, 0x01	; 1
    3556:	11 05       	cpc	r17, r1
    3558:	39 f0       	breq	.+14     	; 0x3568 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x13e>
    355a:	48 f0       	brcs	.+18     	; 0x356e <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x144>
    355c:	02 30       	cpi	r16, 0x02	; 2
    355e:	11 05       	cpc	r17, r1
    3560:	91 f4       	brne	.+36     	; 0x3586 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    3562:	8c 91       	ld	r24, X
    3564:	e8 27       	eor	r30, r24
    3566:	06 c0       	rjmp	.+12     	; 0x3574 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x14a>
    3568:	8c 91       	ld	r24, X
    356a:	e8 2b       	or	r30, r24
    356c:	03 c0       	rjmp	.+6      	; 0x3574 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x14a>
    356e:	e0 95       	com	r30
    3570:	8c 91       	ld	r24, X
    3572:	e8 23       	and	r30, r24
    3574:	ec 93       	st	X, r30
    3576:	07 c0       	rjmp	.+14     	; 0x3586 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    3578:	02 30       	cpi	r16, 0x02	; 2
    357a:	11 05       	cpc	r17, r1
    357c:	09 f4       	brne	.+2      	; 0x3580 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x156>
    357e:	b7 cf       	rjmp	.-146    	; 0x34ee <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xc4>
    3580:	ae 0d       	add	r26, r14
    3582:	bf 1d       	adc	r27, r15
    3584:	be cf       	rjmp	.-132    	; 0x3502 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xd8>
    3586:	df 91       	pop	r29
    3588:	cf 91       	pop	r28
    358a:	1f 91       	pop	r17
    358c:	0f 91       	pop	r16
    358e:	ff 90       	pop	r15
    3590:	ef 90       	pop	r14
    3592:	08 95       	ret

00003594 <_ZN16Adafruit_SSD130613drawFastHLineEiiij>:
    3594:	0f 93       	push	r16
    3596:	1f 93       	push	r17
    3598:	dc 01       	movw	r26, r24
    359a:	56 96       	adiw	r26, 0x16	; 22
    359c:	ec 91       	ld	r30, X
    359e:	56 97       	sbiw	r26, 0x16	; 22
    35a0:	e2 30       	cpi	r30, 0x02	; 2
    35a2:	61 f0       	breq	.+24     	; 0x35bc <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x28>
    35a4:	e3 30       	cpi	r30, 0x03	; 3
    35a6:	09 f1       	breq	.+66     	; 0x35ea <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x56>
    35a8:	e1 30       	cpi	r30, 0x01	; 1
    35aa:	79 f5       	brne	.+94     	; 0x360a <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x76>
    35ac:	14 96       	adiw	r26, 0x04	; 4
    35ae:	ed 91       	ld	r30, X+
    35b0:	fc 91       	ld	r31, X
    35b2:	15 97       	sbiw	r26, 0x05	; 5
    35b4:	e4 1b       	sub	r30, r20
    35b6:	f5 0b       	sbc	r31, r21
    35b8:	31 97       	sbiw	r30, 0x01	; 1
    35ba:	23 c0       	rjmp	.+70     	; 0x3602 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x6e>
    35bc:	dc 01       	movw	r26, r24
    35be:	14 96       	adiw	r26, 0x04	; 4
    35c0:	ed 91       	ld	r30, X+
    35c2:	fc 91       	ld	r31, X
    35c4:	15 97       	sbiw	r26, 0x05	; 5
    35c6:	df 01       	movw	r26, r30
    35c8:	a6 1b       	sub	r26, r22
    35ca:	b7 0b       	sbc	r27, r23
    35cc:	bd 01       	movw	r22, r26
    35ce:	dc 01       	movw	r26, r24
    35d0:	16 96       	adiw	r26, 0x06	; 6
    35d2:	ed 91       	ld	r30, X+
    35d4:	fc 91       	ld	r31, X
    35d6:	17 97       	sbiw	r26, 0x07	; 7
    35d8:	df 01       	movw	r26, r30
    35da:	a4 1b       	sub	r26, r20
    35dc:	b5 0b       	sbc	r27, r21
    35de:	ad 01       	movw	r20, r26
    35e0:	41 50       	subi	r20, 0x01	; 1
    35e2:	51 09       	sbc	r21, r1
    35e4:	62 1b       	sub	r22, r18
    35e6:	73 0b       	sbc	r23, r19
    35e8:	10 c0       	rjmp	.+32     	; 0x360a <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x76>
    35ea:	fa 01       	movw	r30, r20
    35ec:	dc 01       	movw	r26, r24
    35ee:	16 96       	adiw	r26, 0x06	; 6
    35f0:	4d 91       	ld	r20, X+
    35f2:	5c 91       	ld	r21, X
    35f4:	17 97       	sbiw	r26, 0x07	; 7
    35f6:	da 01       	movw	r26, r20
    35f8:	a6 1b       	sub	r26, r22
    35fa:	b7 0b       	sbc	r27, r23
    35fc:	bd 01       	movw	r22, r26
    35fe:	62 1b       	sub	r22, r18
    3600:	73 0b       	sbc	r23, r19
    3602:	ab 01       	movw	r20, r22
    3604:	bf 01       	movw	r22, r30
    3606:	11 df       	rcall	.-478    	; 0x342a <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij>
    3608:	01 c0       	rjmp	.+2      	; 0x360c <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x78>
    360a:	9f de       	rcall	.-706    	; 0x334a <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij>
    360c:	1f 91       	pop	r17
    360e:	0f 91       	pop	r16
    3610:	08 95       	ret

00003612 <_ZN16Adafruit_SSD130613drawFastVLineEiiij>:
    3612:	0f 93       	push	r16
    3614:	1f 93       	push	r17
    3616:	dc 01       	movw	r26, r24
    3618:	56 96       	adiw	r26, 0x16	; 22
    361a:	ec 91       	ld	r30, X
    361c:	56 97       	sbiw	r26, 0x16	; 22
    361e:	e2 30       	cpi	r30, 0x02	; 2
    3620:	69 f0       	breq	.+26     	; 0x363c <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x2a>
    3622:	e3 30       	cpi	r30, 0x03	; 3
    3624:	11 f1       	breq	.+68     	; 0x366a <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x58>
    3626:	e1 30       	cpi	r30, 0x01	; 1
    3628:	81 f5       	brne	.+96     	; 0x368a <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x78>
    362a:	14 96       	adiw	r26, 0x04	; 4
    362c:	ed 91       	ld	r30, X+
    362e:	fc 91       	ld	r31, X
    3630:	15 97       	sbiw	r26, 0x05	; 5
    3632:	e4 1b       	sub	r30, r20
    3634:	f5 0b       	sbc	r31, r21
    3636:	e2 1b       	sub	r30, r18
    3638:	f3 0b       	sbc	r31, r19
    363a:	23 c0       	rjmp	.+70     	; 0x3682 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x70>
    363c:	dc 01       	movw	r26, r24
    363e:	14 96       	adiw	r26, 0x04	; 4
    3640:	ed 91       	ld	r30, X+
    3642:	fc 91       	ld	r31, X
    3644:	15 97       	sbiw	r26, 0x05	; 5
    3646:	df 01       	movw	r26, r30
    3648:	a6 1b       	sub	r26, r22
    364a:	b7 0b       	sbc	r27, r23
    364c:	bd 01       	movw	r22, r26
    364e:	61 50       	subi	r22, 0x01	; 1
    3650:	71 09       	sbc	r23, r1
    3652:	dc 01       	movw	r26, r24
    3654:	16 96       	adiw	r26, 0x06	; 6
    3656:	ed 91       	ld	r30, X+
    3658:	fc 91       	ld	r31, X
    365a:	17 97       	sbiw	r26, 0x07	; 7
    365c:	df 01       	movw	r26, r30
    365e:	a4 1b       	sub	r26, r20
    3660:	b5 0b       	sbc	r27, r21
    3662:	ad 01       	movw	r20, r26
    3664:	42 1b       	sub	r20, r18
    3666:	53 0b       	sbc	r21, r19
    3668:	10 c0       	rjmp	.+32     	; 0x368a <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x78>
    366a:	fa 01       	movw	r30, r20
    366c:	dc 01       	movw	r26, r24
    366e:	16 96       	adiw	r26, 0x06	; 6
    3670:	4d 91       	ld	r20, X+
    3672:	5c 91       	ld	r21, X
    3674:	17 97       	sbiw	r26, 0x07	; 7
    3676:	da 01       	movw	r26, r20
    3678:	a6 1b       	sub	r26, r22
    367a:	b7 0b       	sbc	r27, r23
    367c:	bd 01       	movw	r22, r26
    367e:	61 50       	subi	r22, 0x01	; 1
    3680:	71 09       	sbc	r23, r1
    3682:	ab 01       	movw	r20, r22
    3684:	bf 01       	movw	r22, r30
    3686:	61 de       	rcall	.-830    	; 0x334a <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij>
    3688:	01 c0       	rjmp	.+2      	; 0x368c <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x7a>
    368a:	cf de       	rcall	.-610    	; 0x342a <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij>
    368c:	1f 91       	pop	r17
    368e:	0f 91       	pop	r16
    3690:	08 95       	ret

00003692 <_ZN16Adafruit_SSD13067displayEv>:
    @return None (void).
    @note   Drawing operations are not visible until this function is
            called. Call after each graphics command, or after a whole set
            of graphics commands, as best needed by one's own application.
*/
void Adafruit_SSD1306::display(void) {
    3692:	cf 92       	push	r12
    3694:	df 92       	push	r13
    3696:	ef 92       	push	r14
    3698:	ff 92       	push	r15
    369a:	0f 93       	push	r16
    369c:	1f 93       	push	r17
    369e:	cf 93       	push	r28
    36a0:	df 93       	push	r29
    36a2:	ec 01       	movw	r28, r24
  TRANSACTION_START
    36a4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    36a6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    36a8:	00 97       	sbiw	r24, 0x00	; 0
    36aa:	39 f0       	breq	.+14     	; 0x36ba <_ZN16Adafruit_SSD13067displayEv+0x28>
    36ac:	4d a9       	ldd	r20, Y+53	; 0x35
    36ae:	5e a9       	ldd	r21, Y+54	; 0x36
    36b0:	6f a9       	ldd	r22, Y+55	; 0x37
    36b2:	78 ad       	ldd	r23, Y+56	; 0x38
    36b4:	0e 94 80 32 	call	0x6500	; 0x6500 <_ZN7TwoWire8setClockEm>
    36b8:	0f c0       	rjmp	.+30     	; 0x36d8 <_ZN16Adafruit_SSD13067displayEv+0x46>
    36ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    36bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    36be:	89 2b       	or	r24, r25
    36c0:	21 f0       	breq	.+8      	; 0x36ca <_ZN16Adafruit_SSD13067displayEv+0x38>
    36c2:	8e ad       	ldd	r24, Y+62	; 0x3e
    36c4:	9f ad       	ldd	r25, Y+63	; 0x3f
    36c6:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <_ZN8SPIClass16beginTransactionE11SPISettings>
    36ca:	ef a5       	ldd	r30, Y+47	; 0x2f
    36cc:	f8 a9       	ldd	r31, Y+48	; 0x30
    36ce:	90 81       	ld	r25, Z
    36d0:	8c a9       	ldd	r24, Y+52	; 0x34
    36d2:	80 95       	com	r24
    36d4:	89 23       	and	r24, r25
    36d6:	80 83       	st	Z, r24
  static const uint8_t PROGMEM dlist1[] = {
      SSD1306_PAGEADDR,
      0,                      // Page start address
      0xFF,                   // Page end (not really, but works here)
      SSD1306_COLUMNADDR, 0}; // Column start address
  ssd1306_commandList(dlist1, sizeof(dlist1));
    36d8:	45 e0       	ldi	r20, 0x05	; 5
    36da:	64 e3       	ldi	r22, 0x34	; 52
    36dc:	77 e0       	ldi	r23, 0x07	; 7
    36de:	ce 01       	movw	r24, r28
    36e0:	ac db       	rcall	.-2216   	; 0x2e3a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
    36e2:	6c 81       	ldd	r22, Y+4	; 0x04
    36e4:	61 50       	subi	r22, 0x01	; 1
    36e6:	ce 01       	movw	r24, r28
    36e8:	02 db       	rcall	.-2556   	; 0x2cee <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  // a screen write and one immediately after should cover it.  But if
  // not, if this becomes a problem, yields() might be added in the
  // 32-byte transfer condition below.
  yield();
#endif
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
    36ea:	2e 81       	ldd	r18, Y+6	; 0x06
    36ec:	3f 81       	ldd	r19, Y+7	; 0x07
    36ee:	c9 01       	movw	r24, r18
    36f0:	07 96       	adiw	r24, 0x07	; 7
    36f2:	97 fd       	sbrc	r25, 7
    36f4:	07 96       	adiw	r24, 0x07	; 7
    36f6:	23 e0       	ldi	r18, 0x03	; 3
    36f8:	95 95       	asr	r25
    36fa:	87 95       	ror	r24
    36fc:	2a 95       	dec	r18
    36fe:	e1 f7       	brne	.-8      	; 0x36f8 <_ZN16Adafruit_SSD13067displayEv+0x66>
    3700:	2c 81       	ldd	r18, Y+4	; 0x04
    3702:	3d 81       	ldd	r19, Y+5	; 0x05
    3704:	82 9f       	mul	r24, r18
    3706:	70 01       	movw	r14, r0
    3708:	83 9f       	mul	r24, r19
    370a:	f0 0c       	add	r15, r0
    370c:	92 9f       	mul	r25, r18
    370e:	f0 0c       	add	r15, r0
    3710:	11 24       	eor	r1, r1
  uint8_t *ptr = buffer;
    3712:	0f 8d       	ldd	r16, Y+31	; 0x1f
    3714:	18 a1       	ldd	r17, Y+32	; 0x20
  if (wire) { // I2C
    3716:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3718:	9e 8d       	ldd	r25, Y+30	; 0x1e
    371a:	e0 0e       	add	r14, r16
    371c:	f1 1e       	adc	r15, r17
    371e:	00 97       	sbiw	r24, 0x00	; 0
    3720:	09 f4       	brne	.+2      	; 0x3724 <_ZN16Adafruit_SSD13067displayEv+0x92>
    3722:	43 c0       	rjmp	.+134    	; 0x37aa <_ZN16Adafruit_SSD13067displayEv+0x118>
    wire->beginTransmission(i2caddr);
    3724:	69 a1       	ldd	r22, Y+33	; 0x21
    3726:	06 2e       	mov	r0, r22
    3728:	00 0c       	add	r0, r0
    372a:	77 0b       	sbc	r23, r23
    372c:	0e 94 8d 32 	call	0x651a	; 0x651a <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
    3730:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3732:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3734:	dc 01       	movw	r26, r24
    3736:	ed 91       	ld	r30, X+
    3738:	fc 91       	ld	r31, X
    373a:	01 90       	ld	r0, Z+
    373c:	f0 81       	ld	r31, Z
    373e:	e0 2d       	mov	r30, r0
    3740:	60 e4       	ldi	r22, 0x40	; 64
    3742:	19 95       	eicall
    3744:	68 01       	movw	r12, r16
    uint16_t bytesOut = 1;
    3746:	01 e0       	ldi	r16, 0x01	; 1
    3748:	10 e0       	ldi	r17, 0x00	; 0
    374a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    374c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    while (count--) {
    374e:	ec 14       	cp	r14, r12
    3750:	fd 04       	cpc	r15, r13
    3752:	41 f1       	breq	.+80     	; 0x37a4 <_ZN16Adafruit_SSD13067displayEv+0x112>
      if (bytesOut >= WIRE_MAX) {
    3754:	00 32       	cpi	r16, 0x20	; 32
    3756:	11 05       	cpc	r17, r1
    3758:	b0 f0       	brcs	.+44     	; 0x3786 <_ZN16Adafruit_SSD13067displayEv+0xf4>
        wire->endTransmission();
    375a:	0e 94 02 33 	call	0x6604	; 0x6604 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
    375e:	69 a1       	ldd	r22, Y+33	; 0x21
    3760:	06 2e       	mov	r0, r22
    3762:	00 0c       	add	r0, r0
    3764:	77 0b       	sbc	r23, r23
    3766:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3768:	9e 8d       	ldd	r25, Y+30	; 0x1e
    376a:	0e 94 8d 32 	call	0x651a	; 0x651a <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
    376e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3770:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3772:	dc 01       	movw	r26, r24
    3774:	ed 91       	ld	r30, X+
    3776:	fc 91       	ld	r31, X
    3778:	01 90       	ld	r0, Z+
    377a:	f0 81       	ld	r31, Z
    377c:	e0 2d       	mov	r30, r0
    377e:	60 e4       	ldi	r22, 0x40	; 64
    3780:	19 95       	eicall
        bytesOut = 1;
    3782:	01 e0       	ldi	r16, 0x01	; 1
    3784:	10 e0       	ldi	r17, 0x00	; 0
      }
      WIRE_WRITE(*ptr++);
    3786:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3788:	9e 8d       	ldd	r25, Y+30	; 0x1e
    378a:	f6 01       	movw	r30, r12
    378c:	61 91       	ld	r22, Z+
    378e:	6f 01       	movw	r12, r30
    3790:	dc 01       	movw	r26, r24
    3792:	ed 91       	ld	r30, X+
    3794:	fc 91       	ld	r31, X
    3796:	01 90       	ld	r0, Z+
    3798:	f0 81       	ld	r31, Z
    379a:	e0 2d       	mov	r30, r0
    379c:	19 95       	eicall
      bytesOut++;
    379e:	0f 5f       	subi	r16, 0xFF	; 255
    37a0:	1f 4f       	sbci	r17, 0xFF	; 255
  uint8_t *ptr = buffer;
  if (wire) { // I2C
    wire->beginTransmission(i2caddr);
    WIRE_WRITE((uint8_t)0x40);
    uint16_t bytesOut = 1;
    while (count--) {
    37a2:	d3 cf       	rjmp	.-90     	; 0x374a <_ZN16Adafruit_SSD13067displayEv+0xb8>
        bytesOut = 1;
      }
      WIRE_WRITE(*ptr++);
      bytesOut++;
    }
    wire->endTransmission();
    37a4:	0e 94 02 33 	call	0x6604	; 0x6604 <_ZN7TwoWire15endTransmissionEv>
    37a8:	34 c0       	rjmp	.+104    	; 0x3812 <_ZN16Adafruit_SSD13067displayEv+0x180>
  } else { // SPI
    SSD1306_MODE_DATA
    37aa:	ed a5       	ldd	r30, Y+45	; 0x2d
    37ac:	fe a5       	ldd	r31, Y+46	; 0x2e
    37ae:	90 81       	ld	r25, Z
    37b0:	8b a9       	ldd	r24, Y+51	; 0x33
    37b2:	89 2b       	or	r24, r25
    37b4:	80 83       	st	Z, r24
    while (count--)
    37b6:	0e 15       	cp	r16, r14
    37b8:	1f 05       	cpc	r17, r15
    37ba:	59 f1       	breq	.+86     	; 0x3812 <_ZN16Adafruit_SSD13067displayEv+0x180>
      SPIwrite(*ptr++);
    37bc:	f8 01       	movw	r30, r16
    37be:	81 91       	ld	r24, Z+
    37c0:	8f 01       	movw	r16, r30
    @return void
    @note   See HAVE_PORTREG which defines if the method uses a port or bit-bang
   method
*/
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if (spi) {
    37c2:	2b 8d       	ldd	r18, Y+27	; 0x1b
    37c4:	3c 8d       	ldd	r19, Y+28	; 0x1c
    37c6:	23 2b       	or	r18, r19
    (void)spi->transfer(d);
    37c8:	11 f0       	breq	.+4      	; 0x37ce <_ZN16Adafruit_SSD13067displayEv+0x13c>
    37ca:	34 da       	rcall	.-2968   	; 0x2c34 <_ZN8SPIClass8transferEh>
    37cc:	f4 cf       	rjmp	.-24     	; 0x37b6 <_ZN16Adafruit_SSD13067displayEv+0x124>
    @return void
    @note   See HAVE_PORTREG which defines if the method uses a port or bit-bang
   method
*/
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if (spi) {
    37ce:	28 e0       	ldi	r18, 0x08	; 8
    37d0:	30 e0       	ldi	r19, 0x00	; 0
    37d2:	40 e8       	ldi	r20, 0x80	; 128
    37d4:	e9 a5       	ldd	r30, Y+41	; 0x29
    37d6:	fa a5       	ldd	r31, Y+42	; 0x2a
    37d8:	99 a9       	ldd	r25, Y+49	; 0x31
    (void)spi->transfer(d);
  } else {
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
#ifdef HAVE_PORTREG
      if (d & bit)
    37da:	58 2f       	mov	r21, r24
    37dc:	54 23       	and	r21, r20
    37de:	19 f0       	breq	.+6      	; 0x37e6 <_ZN16Adafruit_SSD13067displayEv+0x154>
        *mosiPort |= mosiPinMask;
    37e0:	50 81       	ld	r21, Z
    37e2:	95 2b       	or	r25, r21
    37e4:	03 c0       	rjmp	.+6      	; 0x37ec <_ZN16Adafruit_SSD13067displayEv+0x15a>
      else
        *mosiPort &= ~mosiPinMask;
    37e6:	50 81       	ld	r21, Z
    37e8:	90 95       	com	r25
    37ea:	95 23       	and	r25, r21
    37ec:	90 83       	st	Z, r25
      *clkPort |= clkPinMask;  // Clock high
    37ee:	eb a5       	ldd	r30, Y+43	; 0x2b
    37f0:	fc a5       	ldd	r31, Y+44	; 0x2c
    37f2:	50 81       	ld	r21, Z
    37f4:	9a a9       	ldd	r25, Y+50	; 0x32
    37f6:	95 2b       	or	r25, r21
    37f8:	90 83       	st	Z, r25
      *clkPort &= ~clkPinMask; // Clock low
    37fa:	eb a5       	ldd	r30, Y+43	; 0x2b
    37fc:	fc a5       	ldd	r31, Y+44	; 0x2c
    37fe:	50 81       	ld	r21, Z
    3800:	9a a9       	ldd	r25, Y+50	; 0x32
    3802:	90 95       	com	r25
    3804:	95 23       	and	r25, r21
    3806:	90 83       	st	Z, r25
*/
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if (spi) {
    (void)spi->transfer(d);
  } else {
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    3808:	46 95       	lsr	r20
    380a:	21 50       	subi	r18, 0x01	; 1
    380c:	31 09       	sbc	r19, r1
    380e:	11 f7       	brne	.-60     	; 0x37d4 <_ZN16Adafruit_SSD13067displayEv+0x142>
    3810:	d2 cf       	rjmp	.-92     	; 0x37b6 <_ZN16Adafruit_SSD13067displayEv+0x124>
  } else { // SPI
    SSD1306_MODE_DATA
    while (count--)
      SPIwrite(*ptr++);
  }
  TRANSACTION_END
    3812:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3814:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3816:	00 97       	sbiw	r24, 0x00	; 0
    3818:	71 f0       	breq	.+28     	; 0x3836 <_ZN16Adafruit_SSD13067displayEv+0x1a4>
    381a:	49 ad       	ldd	r20, Y+57	; 0x39
    381c:	5a ad       	ldd	r21, Y+58	; 0x3a
    381e:	6b ad       	ldd	r22, Y+59	; 0x3b
    3820:	7c ad       	ldd	r23, Y+60	; 0x3c
#if defined(ESP8266)
  yield();
#endif
}
    3822:	df 91       	pop	r29
    3824:	cf 91       	pop	r28
    3826:	1f 91       	pop	r17
    3828:	0f 91       	pop	r16
    382a:	ff 90       	pop	r15
    382c:	ef 90       	pop	r14
    382e:	df 90       	pop	r13
    3830:	cf 90       	pop	r12
  } else { // SPI
    SSD1306_MODE_DATA
    while (count--)
      SPIwrite(*ptr++);
  }
  TRANSACTION_END
    3832:	0c 94 80 32 	jmp	0x6500	; 0x6500 <_ZN7TwoWire8setClockEm>
    3836:	ef a5       	ldd	r30, Y+47	; 0x2f
    3838:	f8 a9       	ldd	r31, Y+48	; 0x30
    383a:	90 81       	ld	r25, Z
    383c:	8c a9       	ldd	r24, Y+52	; 0x34
    383e:	89 2b       	or	r24, r25
    3840:	80 83       	st	Z, r24
    3842:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3844:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3846:	89 2b       	or	r24, r25
    3848:	51 f0       	breq	.+20     	; 0x385e <_ZN16Adafruit_SSD13067displayEv+0x1cc>
#if defined(ESP8266)
  yield();
#endif
}
    384a:	df 91       	pop	r29
    384c:	cf 91       	pop	r28
    384e:	1f 91       	pop	r17
    3850:	0f 91       	pop	r16
    3852:	ff 90       	pop	r15
    3854:	ef 90       	pop	r14
    3856:	df 90       	pop	r13
    3858:	cf 90       	pop	r12
  } else { // SPI
    SSD1306_MODE_DATA
    while (count--)
      SPIwrite(*ptr++);
  }
  TRANSACTION_END
    385a:	0c 94 e6 0e 	jmp	0x1dcc	; 0x1dcc <_ZN8SPIClass14endTransactionEv>
#if defined(ESP8266)
  yield();
#endif
}
    385e:	df 91       	pop	r29
    3860:	cf 91       	pop	r28
    3862:	1f 91       	pop	r17
    3864:	0f 91       	pop	r16
    3866:	ff 90       	pop	r15
    3868:	ef 90       	pop	r14
    386a:	df 90       	pop	r13
    386c:	cf 90       	pop	r12
    386e:	08 95       	ret

00003870 <_ZN3DHTC1Ehhh>:
             (temperature <= 87.0))
      hi += ((percentHumidity - 85.0) * 0.1) * ((87.0 - temperature) * 0.2);
  }

  return isFahrenheit ? hi : convertFtoC(hi);
}
    3870:	dc 01       	movw	r26, r24
    3872:	15 96       	adiw	r26, 0x05	; 5
    3874:	6c 93       	st	X, r22
    3876:	15 97       	sbiw	r26, 0x05	; 5
    3878:	16 96       	adiw	r26, 0x06	; 6
    387a:	4c 93       	st	X, r20
    387c:	16 97       	sbiw	r26, 0x06	; 6
    387e:	70 e0       	ldi	r23, 0x00	; 0
    3880:	fb 01       	movw	r30, r22
    3882:	ef 5b       	subi	r30, 0xBF	; 191
    3884:	f3 4f       	sbci	r31, 0xF3	; 243
    3886:	e4 91       	lpm	r30, Z
    3888:	17 96       	adiw	r26, 0x07	; 7
    388a:	ec 93       	st	X, r30
    388c:	17 97       	sbiw	r26, 0x07	; 7
    388e:	fb 01       	movw	r30, r22
    3890:	e9 57       	subi	r30, 0x79	; 121
    3892:	f3 4f       	sbci	r31, 0xF3	; 243
    3894:	64 91       	lpm	r22, Z
    3896:	18 96       	adiw	r26, 0x08	; 8
    3898:	6c 93       	st	X, r22
    389a:	18 97       	sbiw	r26, 0x08	; 8
    389c:	40 e8       	ldi	r20, 0x80	; 128
    389e:	5e e3       	ldi	r21, 0x3E	; 62
    38a0:	60 e0       	ldi	r22, 0x00	; 0
    38a2:	70 e0       	ldi	r23, 0x00	; 0
    38a4:	1d 96       	adiw	r26, 0x0d	; 13
    38a6:	4d 93       	st	X+, r20
    38a8:	5d 93       	st	X+, r21
    38aa:	6d 93       	st	X+, r22
    38ac:	7c 93       	st	X, r23
    38ae:	50 97       	sbiw	r26, 0x10	; 16
    38b0:	08 95       	ret

000038b2 <_ZN3DHT5beginEh>:
    38b2:	1f 93       	push	r17
    38b4:	cf 93       	push	r28
    38b6:	df 93       	push	r29
    38b8:	ec 01       	movw	r28, r24
    38ba:	16 2f       	mov	r17, r22
    38bc:	62 e0       	ldi	r22, 0x02	; 2
    38be:	8d 81       	ldd	r24, Y+5	; 0x05
    38c0:	0e 94 fe 3a 	call	0x75fc	; 0x75fc <pinMode>
    38c4:	0e 94 e7 38 	call	0x71ce	; 0x71ce <millis>
    38c8:	dc 01       	movw	r26, r24
    38ca:	cb 01       	movw	r24, r22
    38cc:	80 5d       	subi	r24, 0xD0	; 208
    38ce:	97 40       	sbci	r25, 0x07	; 7
    38d0:	a1 09       	sbc	r26, r1
    38d2:	b1 09       	sbc	r27, r1
    38d4:	89 87       	std	Y+9, r24	; 0x09
    38d6:	9a 87       	std	Y+10, r25	; 0x0a
    38d8:	ab 87       	std	Y+11, r26	; 0x0b
    38da:	bc 87       	std	Y+12, r27	; 0x0c
    38dc:	1a 8b       	std	Y+18, r17	; 0x12
    38de:	df 91       	pop	r29
    38e0:	cf 91       	pop	r28
    38e2:	1f 91       	pop	r17
    38e4:	08 95       	ret

000038e6 <_ZN3DHT11expectPulseEb>:
// used to compare the relative time of two pulses).  If more than a millisecond
// ellapses without the level changing then the call fails with a 0 response.
// This is adapted from Arduino's pulseInLong function (which is only available
// in the very latest IDE versions):
//   https://github.com/arduino/Arduino/blob/master/hardware/arduino/avr/cores/arduino/wiring_pulse.c
uint32_t DHT::expectPulse(bool level) {
    38e6:	cf 92       	push	r12
    38e8:	df 92       	push	r13
    38ea:	ef 92       	push	r14
    38ec:	ff 92       	push	r15
    38ee:	1f 93       	push	r17
    38f0:	cf 93       	push	r28
    38f2:	df 93       	push	r29
    38f4:	ec 01       	movw	r28, r24
    38f6:	1f 81       	ldd	r17, Y+7	; 0x07
  uint16_t count = 0; // To work fast enough on slower AVR boards
#endif
// On AVR platforms use direct GPIO port access as it's much faster and better
// for catching pulses that are 10's of microseconds in length:
#ifdef __AVR
  uint8_t portState = level ? _bit : 0;
    38f8:	66 23       	and	r22, r22
    38fa:	11 f0       	breq	.+4      	; 0x3900 <_ZN3DHT11expectPulseEb+0x1a>
    38fc:	91 2f       	mov	r25, r17
    38fe:	01 c0       	rjmp	.+2      	; 0x3902 <_ZN3DHT11expectPulseEb+0x1c>
    3900:	90 e0       	ldi	r25, 0x00	; 0
  while ((*portInputRegister(_port) & _bit) == portState) {
    3902:	28 85       	ldd	r18, Y+8	; 0x08
    3904:	30 e0       	ldi	r19, 0x00	; 0
    3906:	22 0f       	add	r18, r18
    3908:	33 1f       	adc	r19, r19
    390a:	23 53       	subi	r18, 0x33	; 51
    390c:	33 4f       	sbci	r19, 0xF3	; 243
//   https://github.com/arduino/Arduino/blob/master/hardware/arduino/avr/cores/arduino/wiring_pulse.c
uint32_t DHT::expectPulse(bool level) {
#if (F_CPU > 16000000L)
  uint32_t count = 0;
#else
  uint16_t count = 0; // To work fast enough on slower AVR boards
    390e:	a0 e0       	ldi	r26, 0x00	; 0
    3910:	b0 e0       	ldi	r27, 0x00	; 0
#endif
// On AVR platforms use direct GPIO port access as it's much faster and better
// for catching pulses that are 10's of microseconds in length:
#ifdef __AVR
  uint8_t portState = level ? _bit : 0;
  while ((*portInputRegister(_port) & _bit) == portState) {
    3912:	f9 01       	movw	r30, r18
    3914:	45 91       	lpm	r20, Z+
    3916:	54 91       	lpm	r21, Z
    3918:	fa 01       	movw	r30, r20
    391a:	80 81       	ld	r24, Z
    391c:	81 23       	and	r24, r17
    391e:	ad 01       	movw	r20, r26
    3920:	60 e0       	ldi	r22, 0x00	; 0
    3922:	70 e0       	ldi	r23, 0x00	; 0
    3924:	98 13       	cpse	r25, r24
    3926:	0f c0       	rjmp	.+30     	; 0x3946 <_ZN3DHT11expectPulseEb+0x60>
    if (count++ >= _maxcycles) {
    3928:	11 96       	adiw	r26, 0x01	; 1
    392a:	cd 84       	ldd	r12, Y+13	; 0x0d
    392c:	de 84       	ldd	r13, Y+14	; 0x0e
    392e:	ef 84       	ldd	r14, Y+15	; 0x0f
    3930:	f8 88       	ldd	r15, Y+16	; 0x10
    3932:	4c 15       	cp	r20, r12
    3934:	5d 05       	cpc	r21, r13
    3936:	6e 05       	cpc	r22, r14
    3938:	7f 05       	cpc	r23, r15
    393a:	58 f3       	brcs	.-42     	; 0x3912 <_ZN3DHT11expectPulseEb+0x2c>
      return TIMEOUT; // Exceeded timeout, fail.
    393c:	3f ef       	ldi	r19, 0xFF	; 255
    393e:	2f ef       	ldi	r18, 0xFF	; 255
    3940:	8f ef       	ldi	r24, 0xFF	; 255
    3942:	9f ef       	ldi	r25, 0xFF	; 255
    3944:	03 c0       	rjmp	.+6      	; 0x394c <_ZN3DHT11expectPulseEb+0x66>
      return TIMEOUT; // Exceeded timeout, fail.
    }
  }
#endif

  return count;
    3946:	3a 2f       	mov	r19, r26
    3948:	25 2f       	mov	r18, r21
    394a:	cb 01       	movw	r24, r22
}
    394c:	63 2f       	mov	r22, r19
    394e:	72 2f       	mov	r23, r18
    3950:	df 91       	pop	r29
    3952:	cf 91       	pop	r28
    3954:	1f 91       	pop	r17
    3956:	ff 90       	pop	r15
    3958:	ef 90       	pop	r14
    395a:	df 90       	pop	r13
    395c:	cf 90       	pop	r12
    395e:	08 95       	ret

00003960 <_ZN3DHT4readEb>:
 *seconds.
 *  @param  force
 *          true if using force mode
 *	@return float value
 */
bool DHT::read(bool force) {
    3960:	8f 92       	push	r8
    3962:	9f 92       	push	r9
    3964:	af 92       	push	r10
    3966:	bf 92       	push	r11
    3968:	cf 92       	push	r12
    396a:	df 92       	push	r13
    396c:	ef 92       	push	r14
    396e:	ff 92       	push	r15
    3970:	0f 93       	push	r16
    3972:	1f 93       	push	r17
    3974:	cf 93       	push	r28
    3976:	df 93       	push	r29
    3978:	cd b7       	in	r28, 0x3d	; 61
    397a:	de b7       	in	r29, 0x3e	; 62
    397c:	c0 54       	subi	r28, 0x40	; 64
    397e:	d1 40       	sbci	r29, 0x01	; 1
    3980:	0f b6       	in	r0, 0x3f	; 63
    3982:	f8 94       	cli
    3984:	de bf       	out	0x3e, r29	; 62
    3986:	0f be       	out	0x3f, r0	; 63
    3988:	cd bf       	out	0x3d, r28	; 61
    398a:	8c 01       	movw	r16, r24
    398c:	f6 2e       	mov	r15, r22
  // Check if sensor was read less than two seconds ago and return early
  // to use last reading.
  uint32_t currenttime = millis();
    398e:	0e 94 e7 38 	call	0x71ce	; 0x71ce <millis>
  if (!force && ((currenttime - _lastreadtime) < MIN_INTERVAL)) {
    3992:	f1 10       	cpse	r15, r1
    3994:	16 c0       	rjmp	.+44     	; 0x39c2 <_ZN3DHT4readEb+0x62>
    3996:	f8 01       	movw	r30, r16
    3998:	c1 84       	ldd	r12, Z+9	; 0x09
    399a:	d2 84       	ldd	r13, Z+10	; 0x0a
    399c:	e3 84       	ldd	r14, Z+11	; 0x0b
    399e:	f4 84       	ldd	r15, Z+12	; 0x0c
    39a0:	9b 01       	movw	r18, r22
    39a2:	ac 01       	movw	r20, r24
    39a4:	2c 19       	sub	r18, r12
    39a6:	3d 09       	sbc	r19, r13
    39a8:	4e 09       	sbc	r20, r14
    39aa:	5f 09       	sbc	r21, r15
    39ac:	69 01       	movw	r12, r18
    39ae:	7a 01       	movw	r14, r20
    39b0:	30 ed       	ldi	r19, 0xD0	; 208
    39b2:	c3 16       	cp	r12, r19
    39b4:	37 e0       	ldi	r19, 0x07	; 7
    39b6:	d3 06       	cpc	r13, r19
    39b8:	e1 04       	cpc	r14, r1
    39ba:	f1 04       	cpc	r15, r1
    39bc:	10 f4       	brcc	.+4      	; 0x39c2 <_ZN3DHT4readEb+0x62>
    return _lastresult; // return last correct measurement
    39be:	81 89       	ldd	r24, Z+17	; 0x11
    39c0:	b6 c0       	rjmp	.+364    	; 0x3b2e <_ZN3DHT4readEb+0x1ce>
  }
  _lastreadtime = currenttime;
    39c2:	f8 01       	movw	r30, r16
    39c4:	61 87       	std	Z+9, r22	; 0x09
    39c6:	72 87       	std	Z+10, r23	; 0x0a
    39c8:	83 87       	std	Z+11, r24	; 0x0b
    39ca:	94 87       	std	Z+12, r25	; 0x0c

  // Reset 40 bits of received data to zero.
  data[0] = data[1] = data[2] = data[3] = data[4] = 0;
    39cc:	14 82       	std	Z+4, r1	; 0x04
    39ce:	13 82       	std	Z+3, r1	; 0x03
    39d0:	12 82       	std	Z+2, r1	; 0x02
    39d2:	11 82       	std	Z+1, r1	; 0x01
    39d4:	10 82       	st	Z, r1
  // Send start signal.  See DHT datasheet for full signal diagram:
  //   http://www.adafruit.com/datasheets/Digital%20humidity%20and%20temperature%20sensor%20AM2302.pdf

  // Go into high impedence state to let pull-up raise data line level and
  // start the reading process.
  pinMode(_pin, INPUT_PULLUP);
    39d6:	62 e0       	ldi	r22, 0x02	; 2
    39d8:	85 81       	ldd	r24, Z+5	; 0x05
    39da:	0e 94 fe 3a 	call	0x75fc	; 0x75fc <pinMode>
  delay(1);
    39de:	61 e0       	ldi	r22, 0x01	; 1
    39e0:	70 e0       	ldi	r23, 0x00	; 0
    39e2:	80 e0       	ldi	r24, 0x00	; 0
    39e4:	90 e0       	ldi	r25, 0x00	; 0
    39e6:	0e 94 18 39 	call	0x7230	; 0x7230 <delay>

  // First set data line low for a period according to sensor type
  pinMode(_pin, OUTPUT);
    39ea:	61 e0       	ldi	r22, 0x01	; 1
    39ec:	f8 01       	movw	r30, r16
    39ee:	85 81       	ldd	r24, Z+5	; 0x05
    39f0:	0e 94 fe 3a 	call	0x75fc	; 0x75fc <pinMode>
  digitalWrite(_pin, LOW);
    39f4:	60 e0       	ldi	r22, 0x00	; 0
    39f6:	f8 01       	movw	r30, r16
    39f8:	85 81       	ldd	r24, Z+5	; 0x05
    39fa:	0e 94 3a 3b 	call	0x7674	; 0x7674 <digitalWrite>
  switch (_type) {
    39fe:	f8 01       	movw	r30, r16
    3a00:	86 81       	ldd	r24, Z+6	; 0x06
    3a02:	85 51       	subi	r24, 0x15	; 21
    3a04:	82 30       	cpi	r24, 0x02	; 2
    3a06:	28 f4       	brcc	.+10     	; 0x3a12 <_ZN3DHT4readEb+0xb2>
  case DHT22:
  case DHT21:
    delayMicroseconds(1100); // data sheet says "at least 1ms"
    3a08:	8c e4       	ldi	r24, 0x4C	; 76
    3a0a:	94 e0       	ldi	r25, 0x04	; 4
    3a0c:	0e 94 51 39 	call	0x72a2	; 0x72a2 <delayMicroseconds>
    break;
    3a10:	06 c0       	rjmp	.+12     	; 0x3a1e <_ZN3DHT4readEb+0xbe>
  case DHT11:
  default:
    delay(20); // data sheet says at least 18ms, 20ms just to be safe
    3a12:	64 e1       	ldi	r22, 0x14	; 20
    3a14:	70 e0       	ldi	r23, 0x00	; 0
    3a16:	80 e0       	ldi	r24, 0x00	; 0
    3a18:	90 e0       	ldi	r25, 0x00	; 0
    3a1a:	0e 94 18 39 	call	0x7230	; 0x7230 <delay>
  }

  uint32_t cycles[80];
  {
    // End the start signal by setting data line high for 40 microseconds.
    pinMode(_pin, INPUT_PULLUP);
    3a1e:	62 e0       	ldi	r22, 0x02	; 2
    3a20:	f8 01       	movw	r30, r16
    3a22:	85 81       	ldd	r24, Z+5	; 0x05
    3a24:	0e 94 fe 3a 	call	0x75fc	; 0x75fc <pinMode>

    // Delay a moment to let sensor pull data line low.
    delayMicroseconds(pullTime);
    3a28:	f8 01       	movw	r30, r16
    3a2a:	82 89       	ldd	r24, Z+18	; 0x12
    3a2c:	90 e0       	ldi	r25, 0x00	; 0
    3a2e:	0e 94 51 39 	call	0x72a2	; 0x72a2 <delayMicroseconds>
 */
class InterruptLock {
public:
  InterruptLock() {
#if !defined(ARDUINO_ARCH_NRF52)
    noInterrupts();
    3a32:	f8 94       	cli
    // are timing critical and we don't want any interruptions.
    InterruptLock lock;

    // First expect a low signal for ~80 microseconds followed by a high signal
    // for ~80 microseconds again.
    if (expectPulse(LOW) == TIMEOUT) {
    3a34:	60 e0       	ldi	r22, 0x00	; 0
    3a36:	c8 01       	movw	r24, r16
    3a38:	56 df       	rcall	.-340    	; 0x38e6 <_ZN3DHT11expectPulseEb>
    3a3a:	6f 3f       	cpi	r22, 0xFF	; 255
    3a3c:	7f 4f       	sbci	r23, 0xFF	; 255
    3a3e:	8f 4f       	sbci	r24, 0xFF	; 255
    3a40:	9f 4f       	sbci	r25, 0xFF	; 255
    3a42:	21 f4       	brne	.+8      	; 0x3a4c <_ZN3DHT4readEb+0xec>
      DEBUG_PRINTLN(F("DHT timeout waiting for start signal low pulse."));
      _lastresult = false;
    3a44:	f8 01       	movw	r30, r16
    3a46:	11 8a       	std	Z+17, r1	; 0x11
#endif
  }
  ~InterruptLock() {
#if !defined(ARDUINO_ARCH_NRF52)
    interrupts();
    3a48:	78 94       	sei
    3a4a:	42 c0       	rjmp	.+132    	; 0x3ad0 <_ZN3DHT4readEb+0x170>
      return _lastresult;
    }
    if (expectPulse(HIGH) == TIMEOUT) {
    3a4c:	61 e0       	ldi	r22, 0x01	; 1
    3a4e:	c8 01       	movw	r24, r16
    3a50:	4a df       	rcall	.-364    	; 0x38e6 <_ZN3DHT11expectPulseEb>
    3a52:	6f 3f       	cpi	r22, 0xFF	; 255
    3a54:	7f 4f       	sbci	r23, 0xFF	; 255
    3a56:	8f 4f       	sbci	r24, 0xFF	; 255
    3a58:	9f 4f       	sbci	r25, 0xFF	; 255
    3a5a:	a1 f3       	breq	.-24     	; 0x3a44 <_ZN3DHT4readEb+0xe4>
    3a5c:	9e 01       	movw	r18, r28
    3a5e:	2f 5f       	subi	r18, 0xFF	; 255
    3a60:	3f 4f       	sbci	r19, 0xFF	; 255
    3a62:	79 01       	movw	r14, r18
    3a64:	5e 01       	movw	r10, r28
    3a66:	3f eb       	ldi	r19, 0xBF	; 191
    3a68:	a3 1a       	sub	r10, r19
    3a6a:	3e ef       	ldi	r19, 0xFE	; 254
    3a6c:	b3 0a       	sbc	r11, r19
    3a6e:	67 01       	movw	r12, r14
    // and use that to compare to the cycle count of the high pulse to determine
    // if the bit is a 0 (high state cycle count < low state cycle count), or a
    // 1 (high state cycle count > low state cycle count). Note that for speed
    // all the pulses are read into a array and then examined in a later step.
    for (int i = 0; i < 80; i += 2) {
      cycles[i] = expectPulse(LOW);
    3a70:	60 e0       	ldi	r22, 0x00	; 0
    3a72:	c8 01       	movw	r24, r16
    3a74:	38 df       	rcall	.-400    	; 0x38e6 <_ZN3DHT11expectPulseEb>
    3a76:	f6 01       	movw	r30, r12
    3a78:	60 83       	st	Z, r22
    3a7a:	71 83       	std	Z+1, r23	; 0x01
    3a7c:	82 83       	std	Z+2, r24	; 0x02
    3a7e:	93 83       	std	Z+3, r25	; 0x03
      cycles[i + 1] = expectPulse(HIGH);
    3a80:	61 e0       	ldi	r22, 0x01	; 1
    3a82:	c8 01       	movw	r24, r16
    3a84:	30 df       	rcall	.-416    	; 0x38e6 <_ZN3DHT11expectPulseEb>
    3a86:	f6 01       	movw	r30, r12
    3a88:	64 83       	std	Z+4, r22	; 0x04
    3a8a:	75 83       	std	Z+5, r23	; 0x05
    3a8c:	86 83       	std	Z+6, r24	; 0x06
    3a8e:	97 83       	std	Z+7, r25	; 0x07
    3a90:	f8 e0       	ldi	r31, 0x08	; 8
    3a92:	cf 0e       	add	r12, r31
    3a94:	d1 1c       	adc	r13, r1
    3a96:	ca 14       	cp	r12, r10
    // then it's a 1.  We measure the cycle count of the initial 50us low pulse
    // and use that to compare to the cycle count of the high pulse to determine
    // if the bit is a 0 (high state cycle count < low state cycle count), or a
    // 1 (high state cycle count > low state cycle count). Note that for speed
    // all the pulses are read into a array and then examined in a later step.
    for (int i = 0; i < 80; i += 2) {
    3a98:	db 04       	cpc	r13, r11
    3a9a:	51 f7       	brne	.-44     	; 0x3a70 <_ZN3DHT4readEb+0x110>
    3a9c:	78 94       	sei
    3a9e:	20 e0       	ldi	r18, 0x00	; 0
    }
  } // Timing critical code is now complete.

  // Inspect pulses and determine which ones are 0 (high state cycle count < low
  // state cycle count), or 1 (high state cycle count > low state cycle count).
  for (int i = 0; i < 40; ++i) {
    3aa0:	30 e0       	ldi	r19, 0x00	; 0
    3aa2:	f7 01       	movw	r30, r14
    uint32_t lowCycles = cycles[2 * i];
    3aa4:	80 80       	ld	r8, Z
    3aa6:	91 80       	ldd	r9, Z+1	; 0x01
    3aa8:	a2 80       	ldd	r10, Z+2	; 0x02
    3aaa:	b3 80       	ldd	r11, Z+3	; 0x03
    3aac:	44 81       	ldd	r20, Z+4	; 0x04
    uint32_t highCycles = cycles[2 * i + 1];
    3aae:	55 81       	ldd	r21, Z+5	; 0x05
    3ab0:	66 81       	ldd	r22, Z+6	; 0x06
    3ab2:	77 81       	ldd	r23, Z+7	; 0x07
    3ab4:	ff ef       	ldi	r31, 0xFF	; 255
    if ((lowCycles == TIMEOUT) || (highCycles == TIMEOUT)) {
    3ab6:	8f 16       	cp	r8, r31
    3ab8:	9f 06       	cpc	r9, r31
    3aba:	af 06       	cpc	r10, r31
    3abc:	bf 06       	cpc	r11, r31
    3abe:	31 f0       	breq	.+12     	; 0x3acc <_ZN3DHT4readEb+0x16c>
    3ac0:	4f 3f       	cpi	r20, 0xFF	; 255
    3ac2:	8f ef       	ldi	r24, 0xFF	; 255
    3ac4:	58 07       	cpc	r21, r24
    3ac6:	68 07       	cpc	r22, r24
    3ac8:	78 07       	cpc	r23, r24
    3aca:	21 f4       	brne	.+8      	; 0x3ad4 <_ZN3DHT4readEb+0x174>
    3acc:	f8 01       	movw	r30, r16
      DEBUG_PRINTLN(F("DHT timeout waiting for pulse."));
      _lastresult = false;
    3ace:	11 8a       	std	Z+17, r1	; 0x11
    3ad0:	80 e0       	ldi	r24, 0x00	; 0
      return _lastresult;
    3ad2:	2d c0       	rjmp	.+90     	; 0x3b2e <_ZN3DHT4readEb+0x1ce>
    3ad4:	f9 01       	movw	r30, r18
    }
    data[i / 8] <<= 1;
    3ad6:	83 e0       	ldi	r24, 0x03	; 3
    3ad8:	f5 95       	asr	r31
    3ada:	e7 95       	ror	r30
    3adc:	8a 95       	dec	r24
    3ade:	e1 f7       	brne	.-8      	; 0x3ad8 <_ZN3DHT4readEb+0x178>
    3ae0:	e0 0f       	add	r30, r16
    3ae2:	f1 1f       	adc	r31, r17
    3ae4:	80 81       	ld	r24, Z
    3ae6:	88 0f       	add	r24, r24
    3ae8:	84 16       	cp	r8, r20
    // Now compare the low and high cycle times to see if the bit is a 0 or 1.
    if (highCycles > lowCycles) {
    3aea:	95 06       	cpc	r9, r21
    3aec:	a6 06       	cpc	r10, r22
    3aee:	b7 06       	cpc	r11, r23
    3af0:	08 f4       	brcc	.+2      	; 0x3af4 <_ZN3DHT4readEb+0x194>
    3af2:	81 60       	ori	r24, 0x01	; 1
      // High cycles are greater than 50us low cycle count, must be a 1.
      data[i / 8] |= 1;
    3af4:	80 83       	st	Z, r24
    3af6:	2f 5f       	subi	r18, 0xFF	; 255
    }
  } // Timing critical code is now complete.

  // Inspect pulses and determine which ones are 0 (high state cycle count < low
  // state cycle count), or 1 (high state cycle count > low state cycle count).
  for (int i = 0; i < 40; ++i) {
    3af8:	3f 4f       	sbci	r19, 0xFF	; 255
    3afa:	f8 e0       	ldi	r31, 0x08	; 8
    3afc:	ef 0e       	add	r14, r31
    3afe:	f1 1c       	adc	r15, r1
    3b00:	28 32       	cpi	r18, 0x28	; 40
    3b02:	31 05       	cpc	r19, r1
    3b04:	71 f6       	brne	.-100    	; 0x3aa2 <_ZN3DHT4readEb+0x142>
    3b06:	f8 01       	movw	r30, r16
  DEBUG_PRINT(data[4], HEX);
  DEBUG_PRINT(F(" =? "));
  DEBUG_PRINTLN((data[0] + data[1] + data[2] + data[3]) & 0xFF, HEX);

  // Check we read 40 bits and that the checksum matches.
  if (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) {
    3b08:	24 81       	ldd	r18, Z+4	; 0x04
    3b0a:	30 e0       	ldi	r19, 0x00	; 0
    3b0c:	40 81       	ld	r20, Z
    3b0e:	81 81       	ldd	r24, Z+1	; 0x01
    3b10:	90 e0       	ldi	r25, 0x00	; 0
    3b12:	84 0f       	add	r24, r20
    3b14:	91 1d       	adc	r25, r1
    3b16:	42 81       	ldd	r20, Z+2	; 0x02
    3b18:	84 0f       	add	r24, r20
    3b1a:	91 1d       	adc	r25, r1
    3b1c:	43 81       	ldd	r20, Z+3	; 0x03
    3b1e:	84 0f       	add	r24, r20
    3b20:	91 1d       	adc	r25, r1
    3b22:	99 27       	eor	r25, r25
    3b24:	28 17       	cp	r18, r24
    3b26:	39 07       	cpc	r19, r25
    3b28:	89 f6       	brne	.-94     	; 0x3acc <_ZN3DHT4readEb+0x16c>
    3b2a:	81 e0       	ldi	r24, 0x01	; 1
    _lastresult = true;
    3b2c:	81 8b       	std	Z+17, r24	; 0x11
    3b2e:	c0 5c       	subi	r28, 0xC0	; 192
  } else {
    DEBUG_PRINTLN(F("DHT checksum failure!"));
    _lastresult = false;
    return _lastresult;
  }
}
    3b30:	de 4f       	sbci	r29, 0xFE	; 254
    3b32:	0f b6       	in	r0, 0x3f	; 63
    3b34:	f8 94       	cli
    3b36:	de bf       	out	0x3e, r29	; 62
    3b38:	0f be       	out	0x3f, r0	; 63
    3b3a:	cd bf       	out	0x3d, r28	; 61
    3b3c:	df 91       	pop	r29
    3b3e:	cf 91       	pop	r28
    3b40:	1f 91       	pop	r17
    3b42:	0f 91       	pop	r16
    3b44:	ff 90       	pop	r15
    3b46:	ef 90       	pop	r14
    3b48:	df 90       	pop	r13
    3b4a:	cf 90       	pop	r12
    3b4c:	bf 90       	pop	r11
    3b4e:	af 90       	pop	r10
    3b50:	9f 90       	pop	r9
    3b52:	8f 90       	pop	r8
    3b54:	08 95       	ret

00003b56 <_ZN3DHT15readTemperatureEbb>:
    3b56:	cf 92       	push	r12
 *					- false = Celcius
 *  @param  force
 *          true if in force mode
 *	@return Temperature value in selected scale
 */
float DHT::readTemperature(bool S, bool force) {
    3b58:	df 92       	push	r13
    3b5a:	ef 92       	push	r14
    3b5c:	ff 92       	push	r15
    3b5e:	0f 93       	push	r16
    3b60:	1f 93       	push	r17
    3b62:	cf 93       	push	r28
    3b64:	df 93       	push	r29
    3b66:	8c 01       	movw	r16, r24
    3b68:	c6 2f       	mov	r28, r22
  float f = NAN;

  if (read(force)) {
    3b6a:	64 2f       	mov	r22, r20
    3b6c:	f9 de       	rcall	.-526    	; 0x3960 <_ZN3DHT4readEb>
    3b6e:	88 23       	and	r24, r24
    3b70:	09 f4       	brne	.+2      	; 0x3b74 <_ZN3DHT15readTemperatureEbb+0x1e>
    3b72:	78 c0       	rjmp	.+240    	; 0x3c64 <_ZN3DHT15readTemperatureEbb+0x10e>
    switch (_type) {
    3b74:	f8 01       	movw	r30, r16
    3b76:	86 81       	ldd	r24, Z+6	; 0x06
    3b78:	8c 30       	cpi	r24, 0x0C	; 12
    3b7a:	09 f4       	brne	.+2      	; 0x3b7e <_ZN3DHT15readTemperatureEbb+0x28>
    3b7c:	45 c0       	rjmp	.+138    	; 0x3c08 <_ZN3DHT15readTemperatureEbb+0xb2>
    3b7e:	18 f4       	brcc	.+6      	; 0x3b86 <_ZN3DHT15readTemperatureEbb+0x30>
    3b80:	8b 30       	cpi	r24, 0x0B	; 11
    3b82:	c9 f0       	breq	.+50     	; 0x3bb6 <_ZN3DHT15readTemperatureEbb+0x60>
    3b84:	6f c0       	rjmp	.+222    	; 0x3c64 <_ZN3DHT15readTemperatureEbb+0x10e>
    3b86:	85 51       	subi	r24, 0x15	; 21
    3b88:	82 30       	cpi	r24, 0x02	; 2
    3b8a:	08 f0       	brcs	.+2      	; 0x3b8e <_ZN3DHT15readTemperatureEbb+0x38>
    3b8c:	6b c0       	rjmp	.+214    	; 0x3c64 <_ZN3DHT15readTemperatureEbb+0x10e>
        f = convertCtoF(f);
      }
      break;
    case DHT22:
    case DHT21:
      f = ((word)(data[2] & 0x7F)) << 8 | data[3];
    3b8e:	f8 01       	movw	r30, r16
    3b90:	d2 81       	ldd	r29, Z+2	; 0x02
      f *= 0.1;
    3b92:	6d 2f       	mov	r22, r29
    3b94:	6f 77       	andi	r22, 0x7F	; 127
    3b96:	70 e0       	ldi	r23, 0x00	; 0
    3b98:	76 2f       	mov	r23, r22
    3b9a:	66 27       	eor	r22, r22
    3b9c:	83 81       	ldd	r24, Z+3	; 0x03
    3b9e:	68 2b       	or	r22, r24
    3ba0:	80 e0       	ldi	r24, 0x00	; 0
    3ba2:	90 e0       	ldi	r25, 0x00	; 0
    3ba4:	0e 94 6c 33 	call	0x66d8	; 0x66d8 <__floatunsisf>
    3ba8:	2d ec       	ldi	r18, 0xCD	; 205
    3baa:	3c ec       	ldi	r19, 0xCC	; 204
    3bac:	4c ec       	ldi	r20, 0xCC	; 204
    3bae:	5d e3       	ldi	r21, 0x3D	; 61
    3bb0:	0e 94 1e 34 	call	0x683c	; 0x683c <__mulsf3>
    3bb4:	46 c0       	rjmp	.+140    	; 0x3c42 <_ZN3DHT15readTemperatureEbb+0xec>
  float f = NAN;

  if (read(force)) {
    switch (_type) {
    case DHT11:
      f = data[2];
    3bb6:	f8 01       	movw	r30, r16
    3bb8:	62 81       	ldd	r22, Z+2	; 0x02
    3bba:	70 e0       	ldi	r23, 0x00	; 0
    3bbc:	80 e0       	ldi	r24, 0x00	; 0
    3bbe:	90 e0       	ldi	r25, 0x00	; 0
    3bc0:	0e 94 6c 33 	call	0x66d8	; 0x66d8 <__floatunsisf>
    3bc4:	6b 01       	movw	r12, r22
    3bc6:	7c 01       	movw	r14, r24
      if (data[3] & 0x80) {
    3bc8:	f8 01       	movw	r30, r16
    3bca:	d3 81       	ldd	r29, Z+3	; 0x03
    3bcc:	d7 ff       	sbrs	r29, 7
    3bce:	0a c0       	rjmp	.+20     	; 0x3be4 <_ZN3DHT15readTemperatureEbb+0x8e>
        f = -1 - f;
    3bd0:	9b 01       	movw	r18, r22
    3bd2:	ac 01       	movw	r20, r24
    3bd4:	60 e0       	ldi	r22, 0x00	; 0
    3bd6:	70 e0       	ldi	r23, 0x00	; 0
    3bd8:	80 e8       	ldi	r24, 0x80	; 128
    3bda:	9f eb       	ldi	r25, 0xBF	; 191
    3bdc:	0e 94 07 33 	call	0x660e	; 0x660e <__subsf3>
    3be0:	6b 01       	movw	r12, r22
    3be2:	7c 01       	movw	r14, r24
      }
      f += (data[3] & 0x0f) * 0.1;
    3be4:	6d 2f       	mov	r22, r29
    3be6:	6f 70       	andi	r22, 0x0F	; 15
    3be8:	70 e0       	ldi	r23, 0x00	; 0
    3bea:	80 e0       	ldi	r24, 0x00	; 0
    3bec:	90 e0       	ldi	r25, 0x00	; 0
    3bee:	0e 94 6e 33 	call	0x66dc	; 0x66dc <__floatsisf>
    3bf2:	2d ec       	ldi	r18, 0xCD	; 205
    3bf4:	3c ec       	ldi	r19, 0xCC	; 204
    3bf6:	4c ec       	ldi	r20, 0xCC	; 204
    3bf8:	5d e3       	ldi	r21, 0x3D	; 61
    3bfa:	0e 94 1e 34 	call	0x683c	; 0x683c <__mulsf3>
    3bfe:	a7 01       	movw	r20, r14
    3c00:	96 01       	movw	r18, r12
    3c02:	0e 94 08 33 	call	0x6610	; 0x6610 <__addsf3>
    3c06:	1f c0       	rjmp	.+62     	; 0x3c46 <_ZN3DHT15readTemperatureEbb+0xf0>
      if (S) {
        f = convertCtoF(f);
      }
      break;
    case DHT12:
      f = data[2];
    3c08:	f8 01       	movw	r30, r16
    3c0a:	d2 81       	ldd	r29, Z+2	; 0x02
      f += (data[3] & 0x0f) * 0.1;
    3c0c:	63 81       	ldd	r22, Z+3	; 0x03
    3c0e:	6f 70       	andi	r22, 0x0F	; 15
    3c10:	70 e0       	ldi	r23, 0x00	; 0
    3c12:	80 e0       	ldi	r24, 0x00	; 0
    3c14:	90 e0       	ldi	r25, 0x00	; 0
    3c16:	0e 94 6e 33 	call	0x66dc	; 0x66dc <__floatsisf>
    3c1a:	2d ec       	ldi	r18, 0xCD	; 205
    3c1c:	3c ec       	ldi	r19, 0xCC	; 204
    3c1e:	4c ec       	ldi	r20, 0xCC	; 204
    3c20:	5d e3       	ldi	r21, 0x3D	; 61
    3c22:	0e 94 1e 34 	call	0x683c	; 0x683c <__mulsf3>
    3c26:	6b 01       	movw	r12, r22
    3c28:	7c 01       	movw	r14, r24
    3c2a:	6d 2f       	mov	r22, r29
    3c2c:	70 e0       	ldi	r23, 0x00	; 0
    3c2e:	80 e0       	ldi	r24, 0x00	; 0
    3c30:	90 e0       	ldi	r25, 0x00	; 0
    3c32:	0e 94 6c 33 	call	0x66d8	; 0x66d8 <__floatunsisf>
    3c36:	9b 01       	movw	r18, r22
    3c38:	ac 01       	movw	r20, r24
    3c3a:	c7 01       	movw	r24, r14
    3c3c:	b6 01       	movw	r22, r12
    3c3e:	0e 94 08 33 	call	0x6610	; 0x6610 <__addsf3>
      break;
    case DHT22:
    case DHT21:
      f = ((word)(data[2] & 0x7F)) << 8 | data[3];
      f *= 0.1;
      if (data[2] & 0x80) {
    3c42:	d7 fd       	sbrc	r29, 7
        f *= -1;
    3c44:	90 58       	subi	r25, 0x80	; 128
      }
      if (S) {
    3c46:	cc 23       	and	r28, r28
    3c48:	89 f0       	breq	.+34     	; 0x3c6c <_ZN3DHT15readTemperatureEbb+0x116>
 *  @brief  Converts Celcius to Fahrenheit
 *  @param  c
 *					value in Celcius
 *	@return float value in Fahrenheit
 */
float DHT::convertCtoF(float c) { return c * 1.8 + 32; }
    3c4a:	26 e6       	ldi	r18, 0x66	; 102
    3c4c:	36 e6       	ldi	r19, 0x66	; 102
    3c4e:	46 ee       	ldi	r20, 0xE6	; 230
    3c50:	5f e3       	ldi	r21, 0x3F	; 63
    3c52:	0e 94 1e 34 	call	0x683c	; 0x683c <__mulsf3>
    3c56:	20 e0       	ldi	r18, 0x00	; 0
    3c58:	30 e0       	ldi	r19, 0x00	; 0
    3c5a:	40 e0       	ldi	r20, 0x00	; 0
    3c5c:	52 e4       	ldi	r21, 0x42	; 66
    3c5e:	0e 94 08 33 	call	0x6610	; 0x6610 <__addsf3>
    3c62:	04 c0       	rjmp	.+8      	; 0x3c6c <_ZN3DHT15readTemperatureEbb+0x116>
 *  @param  force
 *          true if in force mode
 *	@return Temperature value in selected scale
 */
float DHT::readTemperature(bool S, bool force) {
  float f = NAN;
    3c64:	60 e0       	ldi	r22, 0x00	; 0
    3c66:	70 e0       	ldi	r23, 0x00	; 0
    3c68:	80 ec       	ldi	r24, 0xC0	; 192
    3c6a:	9f e7       	ldi	r25, 0x7F	; 127
      }
      break;
    }
  }
  return f;
}
    3c6c:	df 91       	pop	r29
    3c6e:	cf 91       	pop	r28
    3c70:	1f 91       	pop	r17
    3c72:	0f 91       	pop	r16
    3c74:	ff 90       	pop	r15
    3c76:	ef 90       	pop	r14
    3c78:	df 90       	pop	r13
    3c7a:	cf 90       	pop	r12
    3c7c:	08 95       	ret

00003c7e <_ZN3DHT12readHumidityEb>:
 *  @brief  Read Humidity
 *  @param  force
 *					force read mode
 *	@return float value - humidity in percent
 */
float DHT::readHumidity(bool force) {
    3c7e:	cf 92       	push	r12
    3c80:	df 92       	push	r13
    3c82:	ef 92       	push	r14
    3c84:	ff 92       	push	r15
    3c86:	cf 93       	push	r28
    3c88:	df 93       	push	r29
    3c8a:	ec 01       	movw	r28, r24
  float f = NAN;
  if (read(force)) {
    3c8c:	69 de       	rcall	.-814    	; 0x3960 <_ZN3DHT4readEb>
    3c8e:	88 23       	and	r24, r24
    3c90:	99 f1       	breq	.+102    	; 0x3cf8 <_ZN3DHT12readHumidityEb+0x7a>
    switch (_type) {
    3c92:	8e 81       	ldd	r24, Y+6	; 0x06
    3c94:	8b 30       	cpi	r24, 0x0B	; 11
    3c96:	80 f1       	brcs	.+96     	; 0x3cf8 <_ZN3DHT12readHumidityEb+0x7a>
    3c98:	8d 30       	cpi	r24, 0x0D	; 13
    3c9a:	98 f0       	brcs	.+38     	; 0x3cc2 <_ZN3DHT12readHumidityEb+0x44>
    3c9c:	85 51       	subi	r24, 0x15	; 21
    3c9e:	82 30       	cpi	r24, 0x02	; 2
    3ca0:	58 f5       	brcc	.+86     	; 0x3cf8 <_ZN3DHT12readHumidityEb+0x7a>
    case DHT12:
      f = data[0] + data[1] * 0.1;
      break;
    case DHT22:
    case DHT21:
      f = ((word)data[0]) << 8 | data[1];
    3ca2:	68 81       	ld	r22, Y
    3ca4:	79 81       	ldd	r23, Y+1	; 0x01
    3ca6:	76 27       	eor	r23, r22
    3ca8:	67 27       	eor	r22, r23
    3caa:	76 27       	eor	r23, r22
    3cac:	80 e0       	ldi	r24, 0x00	; 0
    3cae:	90 e0       	ldi	r25, 0x00	; 0
    3cb0:	0e 94 6c 33 	call	0x66d8	; 0x66d8 <__floatunsisf>
      f *= 0.1;
    3cb4:	2d ec       	ldi	r18, 0xCD	; 205
    3cb6:	3c ec       	ldi	r19, 0xCC	; 204
    3cb8:	4c ec       	ldi	r20, 0xCC	; 204
    3cba:	5d e3       	ldi	r21, 0x3D	; 61
    3cbc:	0e 94 1e 34 	call	0x683c	; 0x683c <__mulsf3>
      break;
    3cc0:	1f c0       	rjmp	.+62     	; 0x3d00 <_ZN3DHT12readHumidityEb+0x82>
  float f = NAN;
  if (read(force)) {
    switch (_type) {
    case DHT11:
    case DHT12:
      f = data[0] + data[1] * 0.1;
    3cc2:	69 81       	ldd	r22, Y+1	; 0x01
    3cc4:	70 e0       	ldi	r23, 0x00	; 0
    3cc6:	80 e0       	ldi	r24, 0x00	; 0
    3cc8:	90 e0       	ldi	r25, 0x00	; 0
    3cca:	0e 94 6e 33 	call	0x66dc	; 0x66dc <__floatsisf>
    3cce:	2d ec       	ldi	r18, 0xCD	; 205
    3cd0:	3c ec       	ldi	r19, 0xCC	; 204
    3cd2:	4c ec       	ldi	r20, 0xCC	; 204
    3cd4:	5d e3       	ldi	r21, 0x3D	; 61
    3cd6:	0e 94 1e 34 	call	0x683c	; 0x683c <__mulsf3>
    3cda:	6b 01       	movw	r12, r22
    3cdc:	7c 01       	movw	r14, r24
    3cde:	68 81       	ld	r22, Y
    3ce0:	70 e0       	ldi	r23, 0x00	; 0
    3ce2:	80 e0       	ldi	r24, 0x00	; 0
    3ce4:	90 e0       	ldi	r25, 0x00	; 0
    3ce6:	0e 94 6e 33 	call	0x66dc	; 0x66dc <__floatsisf>
    3cea:	9b 01       	movw	r18, r22
    3cec:	ac 01       	movw	r20, r24
    3cee:	c7 01       	movw	r24, r14
    3cf0:	b6 01       	movw	r22, r12
    3cf2:	0e 94 08 33 	call	0x6610	; 0x6610 <__addsf3>
    3cf6:	04 c0       	rjmp	.+8      	; 0x3d00 <_ZN3DHT12readHumidityEb+0x82>
 *  @param  force
 *					force read mode
 *	@return float value - humidity in percent
 */
float DHT::readHumidity(bool force) {
  float f = NAN;
    3cf8:	60 e0       	ldi	r22, 0x00	; 0
    3cfa:	70 e0       	ldi	r23, 0x00	; 0
    3cfc:	80 ec       	ldi	r24, 0xC0	; 192
    3cfe:	9f e7       	ldi	r25, 0x7F	; 127
      f *= 0.1;
      break;
    }
  }
  return f;
}
    3d00:	df 91       	pop	r29
    3d02:	cf 91       	pop	r28
    3d04:	ff 90       	pop	r15
    3d06:	ef 90       	pop	r14
    3d08:	df 90       	pop	r13
    3d0a:	cf 90       	pop	r12
    3d0c:	08 95       	ret

00003d0e <_ZN11DHT_Unified8HumidityD1Ev>:
    3d0e:	08 95       	ret

00003d10 <_ZN11DHT_Unified11TemperatureD1Ev>:
  void begin();

  /*!
   *  @brief  Class that stores state and functions about Temperature
   */
  class Temperature : public Adafruit_Sensor {
    3d10:	08 95       	ret

00003d12 <_ZN11DHT_Unified11Temperature8getEventEP15sensors_event_t>:
/*!
 *  @brief  Reads the sensor and returns the data as a sensors_event_t
 *  @param  event
 *  @return always returns true
 */
bool DHT_Unified::Temperature::getEvent(sensors_event_t *event) {
    3d12:	0f 93       	push	r16
    3d14:	1f 93       	push	r17
    3d16:	cf 93       	push	r28
    3d18:	df 93       	push	r29
    3d1a:	8c 01       	movw	r16, r24
    3d1c:	eb 01       	movw	r28, r22
  // Clear event definition.
  memset(event, 0, sizeof(sensors_event_t));
    3d1e:	84 e2       	ldi	r24, 0x24	; 36
    3d20:	fb 01       	movw	r30, r22
    3d22:	11 92       	st	Z+, r1
    3d24:	8a 95       	dec	r24
    3d26:	e9 f7       	brne	.-6      	; 0x3d22 <_ZN11DHT_Unified11Temperature8getEventEP15sensors_event_t+0x10>
  // Populate sensor reading values.
  event->version = sizeof(sensors_event_t);
    3d28:	84 e2       	ldi	r24, 0x24	; 36
    3d2a:	90 e0       	ldi	r25, 0x00	; 0
    3d2c:	a0 e0       	ldi	r26, 0x00	; 0
    3d2e:	b0 e0       	ldi	r27, 0x00	; 0
    3d30:	88 83       	st	Y, r24
    3d32:	99 83       	std	Y+1, r25	; 0x01
    3d34:	aa 83       	std	Y+2, r26	; 0x02
    3d36:	bb 83       	std	Y+3, r27	; 0x03
  event->sensor_id = _id;
    3d38:	f8 01       	movw	r30, r16
    3d3a:	85 81       	ldd	r24, Z+5	; 0x05
    3d3c:	96 81       	ldd	r25, Z+6	; 0x06
    3d3e:	a7 81       	ldd	r26, Z+7	; 0x07
    3d40:	b0 85       	ldd	r27, Z+8	; 0x08
    3d42:	8c 83       	std	Y+4, r24	; 0x04
    3d44:	9d 83       	std	Y+5, r25	; 0x05
    3d46:	ae 83       	std	Y+6, r26	; 0x06
    3d48:	bf 83       	std	Y+7, r27	; 0x07
  event->type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
    3d4a:	8d e0       	ldi	r24, 0x0D	; 13
    3d4c:	90 e0       	ldi	r25, 0x00	; 0
    3d4e:	a0 e0       	ldi	r26, 0x00	; 0
    3d50:	b0 e0       	ldi	r27, 0x00	; 0
    3d52:	88 87       	std	Y+8, r24	; 0x08
    3d54:	99 87       	std	Y+9, r25	; 0x09
    3d56:	aa 87       	std	Y+10, r26	; 0x0a
    3d58:	bb 87       	std	Y+11, r27	; 0x0b
  event->timestamp = millis();
    3d5a:	0e 94 e7 38 	call	0x71ce	; 0x71ce <millis>
    3d5e:	68 8b       	std	Y+16, r22	; 0x10
    3d60:	79 8b       	std	Y+17, r23	; 0x11
    3d62:	8a 8b       	std	Y+18, r24	; 0x12
    3d64:	9b 8b       	std	Y+19, r25	; 0x13
  event->temperature = _parent->_dht.readTemperature();
    3d66:	40 e0       	ldi	r20, 0x00	; 0
    3d68:	60 e0       	ldi	r22, 0x00	; 0
    3d6a:	f8 01       	movw	r30, r16
    3d6c:	83 81       	ldd	r24, Z+3	; 0x03
    3d6e:	94 81       	ldd	r25, Z+4	; 0x04
    3d70:	f2 de       	rcall	.-540    	; 0x3b56 <_ZN3DHT15readTemperatureEbb>
    3d72:	6c 8b       	std	Y+20, r22	; 0x14
    3d74:	7d 8b       	std	Y+21, r23	; 0x15
    3d76:	8e 8b       	std	Y+22, r24	; 0x16
    3d78:	9f 8b       	std	Y+23, r25	; 0x17

  return true;
}
    3d7a:	81 e0       	ldi	r24, 0x01	; 1
    3d7c:	df 91       	pop	r29
    3d7e:	cf 91       	pop	r28
    3d80:	1f 91       	pop	r17
    3d82:	0f 91       	pop	r16
    3d84:	08 95       	ret

00003d86 <_ZN11DHT_Unified8Humidity8getEventEP15sensors_event_t>:
/*!
 *  @brief  Reads the sensor and returns the data as a sensors_event_t
 *  @param  event
 *  @return always returns true
 */
bool DHT_Unified::Humidity::getEvent(sensors_event_t *event) {
    3d86:	0f 93       	push	r16
    3d88:	1f 93       	push	r17
    3d8a:	cf 93       	push	r28
    3d8c:	df 93       	push	r29
    3d8e:	8c 01       	movw	r16, r24
    3d90:	eb 01       	movw	r28, r22
  // Clear event definition.
  memset(event, 0, sizeof(sensors_event_t));
    3d92:	84 e2       	ldi	r24, 0x24	; 36
    3d94:	fb 01       	movw	r30, r22
    3d96:	11 92       	st	Z+, r1
    3d98:	8a 95       	dec	r24
    3d9a:	e9 f7       	brne	.-6      	; 0x3d96 <_ZN11DHT_Unified8Humidity8getEventEP15sensors_event_t+0x10>
  // Populate sensor reading values.
  event->version = sizeof(sensors_event_t);
    3d9c:	84 e2       	ldi	r24, 0x24	; 36
    3d9e:	90 e0       	ldi	r25, 0x00	; 0
    3da0:	a0 e0       	ldi	r26, 0x00	; 0
    3da2:	b0 e0       	ldi	r27, 0x00	; 0
    3da4:	88 83       	st	Y, r24
    3da6:	99 83       	std	Y+1, r25	; 0x01
    3da8:	aa 83       	std	Y+2, r26	; 0x02
    3daa:	bb 83       	std	Y+3, r27	; 0x03
  event->sensor_id = _id;
    3dac:	f8 01       	movw	r30, r16
    3dae:	85 81       	ldd	r24, Z+5	; 0x05
    3db0:	96 81       	ldd	r25, Z+6	; 0x06
    3db2:	a7 81       	ldd	r26, Z+7	; 0x07
    3db4:	b0 85       	ldd	r27, Z+8	; 0x08
    3db6:	8c 83       	std	Y+4, r24	; 0x04
    3db8:	9d 83       	std	Y+5, r25	; 0x05
    3dba:	ae 83       	std	Y+6, r26	; 0x06
    3dbc:	bf 83       	std	Y+7, r27	; 0x07
  event->type = SENSOR_TYPE_RELATIVE_HUMIDITY;
    3dbe:	8c e0       	ldi	r24, 0x0C	; 12
    3dc0:	90 e0       	ldi	r25, 0x00	; 0
    3dc2:	a0 e0       	ldi	r26, 0x00	; 0
    3dc4:	b0 e0       	ldi	r27, 0x00	; 0
    3dc6:	88 87       	std	Y+8, r24	; 0x08
    3dc8:	99 87       	std	Y+9, r25	; 0x09
    3dca:	aa 87       	std	Y+10, r26	; 0x0a
    3dcc:	bb 87       	std	Y+11, r27	; 0x0b
  event->timestamp = millis();
    3dce:	0e 94 e7 38 	call	0x71ce	; 0x71ce <millis>
    3dd2:	68 8b       	std	Y+16, r22	; 0x10
    3dd4:	79 8b       	std	Y+17, r23	; 0x11
    3dd6:	8a 8b       	std	Y+18, r24	; 0x12
    3dd8:	9b 8b       	std	Y+19, r25	; 0x13
  event->relative_humidity = _parent->_dht.readHumidity();
    3dda:	60 e0       	ldi	r22, 0x00	; 0
    3ddc:	f8 01       	movw	r30, r16
    3dde:	83 81       	ldd	r24, Z+3	; 0x03
    3de0:	94 81       	ldd	r25, Z+4	; 0x04
    3de2:	4d df       	rcall	.-358    	; 0x3c7e <_ZN3DHT12readHumidityEb>
    3de4:	6c 8b       	std	Y+20, r22	; 0x14
    3de6:	7d 8b       	std	Y+21, r23	; 0x15
    3de8:	8e 8b       	std	Y+22, r24	; 0x16
    3dea:	9f 8b       	std	Y+23, r25	; 0x17

  return true;
}
    3dec:	81 e0       	ldi	r24, 0x01	; 1
    3dee:	df 91       	pop	r29
    3df0:	cf 91       	pop	r28
    3df2:	1f 91       	pop	r17
    3df4:	0f 91       	pop	r16
    3df6:	08 95       	ret

00003df8 <_ZN11DHT_Unified8HumidityD0Ev>:
  };

  /*!
   *  @brief  Class that stores state and functions about Humidity
   */
  class Humidity : public Adafruit_Sensor {
    3df8:	0c 94 97 36 	jmp	0x6d2e	; 0x6d2e <_ZdlPv>

00003dfc <_ZN11DHT_Unified11TemperatureD0Ev>:
  void begin();

  /*!
   *  @brief  Class that stores state and functions about Temperature
   */
  class Temperature : public Adafruit_Sensor {
    3dfc:	0c 94 97 36 	jmp	0x6d2e	; 0x6d2e <_ZdlPv>

00003e00 <_ZN11DHT_UnifiedC1Ehhhll>:
 *  @param  tempSensorId
 *          temperature sensor id
 *  @param  humiditySensorId
 *          humidity sensor id
 */
DHT_Unified::DHT_Unified(uint8_t pin, uint8_t type, uint8_t count,
    3e00:	4f 92       	push	r4
    3e02:	5f 92       	push	r5
    3e04:	6f 92       	push	r6
    3e06:	7f 92       	push	r7
    3e08:	9f 92       	push	r9
    3e0a:	af 92       	push	r10
    3e0c:	bf 92       	push	r11
    3e0e:	cf 92       	push	r12
    3e10:	df 92       	push	r13
    3e12:	ef 92       	push	r14
    3e14:	ff 92       	push	r15
    3e16:	0f 93       	push	r16
    3e18:	1f 93       	push	r17
    3e1a:	cf 93       	push	r28
    3e1c:	df 93       	push	r29
    3e1e:	ec 01       	movw	r28, r24
    3e20:	94 2e       	mov	r9, r20
                         int32_t tempSensorId, int32_t humiditySensorId)
    : _dht(pin, type, count), _type(type), _temp(this, tempSensorId),
      _humidity(this, humiditySensorId) {}
    3e22:	26 dd       	rcall	.-1460   	; 0x3870 <_ZN3DHTC1Ehhh>
    3e24:	9b 8a       	std	Y+19, r9	; 0x13
 *          Parent Sensor
 *  @param  id
 *          Sensor id
 */
DHT_Unified::Temperature::Temperature(DHT_Unified *parent, int32_t id)
    : _parent(parent), _id(id) {}
    3e26:	87 e9       	ldi	r24, 0x97	; 151
    3e28:	93 e0       	ldi	r25, 0x03	; 3
    3e2a:	9d 8b       	std	Y+21, r25	; 0x15
    3e2c:	8c 8b       	std	Y+20, r24	; 0x14
    3e2e:	d8 8f       	std	Y+24, r29	; 0x18
    3e30:	cf 8b       	std	Y+23, r28	; 0x17
    3e32:	e9 8e       	std	Y+25, r14	; 0x19
    3e34:	fa 8e       	std	Y+26, r15	; 0x1a
    3e36:	0b 8f       	std	Y+27, r16	; 0x1b
    3e38:	1c 8f       	std	Y+28, r17	; 0x1c
 *          Parent Sensor
 *  @param  id
 *          Sensor id
 */
DHT_Unified::Humidity::Humidity(DHT_Unified *parent, int32_t id)
    : _parent(parent), _id(id) {}
    3e3a:	85 ea       	ldi	r24, 0xA5	; 165
    3e3c:	93 e0       	ldi	r25, 0x03	; 3
    3e3e:	9e 8f       	std	Y+30, r25	; 0x1e
    3e40:	8d 8f       	std	Y+29, r24	; 0x1d
    3e42:	d9 a3       	std	Y+33, r29	; 0x21
    3e44:	c8 a3       	std	Y+32, r28	; 0x20
    3e46:	aa a2       	std	Y+34, r10	; 0x22
    3e48:	bb a2       	std	Y+35, r11	; 0x23
    3e4a:	cc a2       	std	Y+36, r12	; 0x24
    3e4c:	dd a2       	std	Y+37, r13	; 0x25
 *          humidity sensor id
 */
DHT_Unified::DHT_Unified(uint8_t pin, uint8_t type, uint8_t count,
                         int32_t tempSensorId, int32_t humiditySensorId)
    : _dht(pin, type, count), _type(type), _temp(this, tempSensorId),
      _humidity(this, humiditySensorId) {}
    3e4e:	df 91       	pop	r29
    3e50:	cf 91       	pop	r28
    3e52:	1f 91       	pop	r17
    3e54:	0f 91       	pop	r16
    3e56:	ff 90       	pop	r15
    3e58:	ef 90       	pop	r14
    3e5a:	df 90       	pop	r13
    3e5c:	cf 90       	pop	r12
    3e5e:	bf 90       	pop	r11
    3e60:	af 90       	pop	r10
    3e62:	9f 90       	pop	r9
    3e64:	7f 90       	pop	r7
    3e66:	6f 90       	pop	r6
    3e68:	5f 90       	pop	r5
    3e6a:	4f 90       	pop	r4
    3e6c:	08 95       	ret

00003e6e <_ZN11DHT_Unified5beginEv>:

/*!
 *  @brief  Setup sensor (calls begin on It)
 */
void DHT_Unified::begin() { _dht.begin(); }
    3e6e:	67 e3       	ldi	r22, 0x37	; 55
    3e70:	20 cd       	rjmp	.-1472   	; 0x38b2 <_ZN3DHT5beginEh>

00003e72 <_ZN11DHT_Unified7setNameEP8sensor_t>:
/*!
 *  @brief  Sets sensor name
 *  @param  sensor
 *          Sensor that will be set
 */
void DHT_Unified::setName(sensor_t *sensor) {
    3e72:	cf 93       	push	r28
    3e74:	df 93       	push	r29
    3e76:	eb 01       	movw	r28, r22
  switch (_type) {
    3e78:	fc 01       	movw	r30, r24
    3e7a:	83 89       	ldd	r24, Z+19	; 0x13
    3e7c:	8c 30       	cpi	r24, 0x0C	; 12
    3e7e:	89 f0       	breq	.+34     	; 0x3ea2 <_ZN11DHT_Unified7setNameEP8sensor_t+0x30>
    3e80:	38 f4       	brcc	.+14     	; 0x3e90 <_ZN11DHT_Unified7setNameEP8sensor_t+0x1e>
    3e82:	8b 30       	cpi	r24, 0x0B	; 11
    3e84:	c1 f4       	brne	.+48     	; 0x3eb6 <_ZN11DHT_Unified7setNameEP8sensor_t+0x44>
  case DHT11:
    strncpy(sensor->name, "DHT11", sizeof(sensor->name) - 1);
    3e86:	4b e0       	ldi	r20, 0x0B	; 11
    3e88:	50 e0       	ldi	r21, 0x00	; 0
    3e8a:	66 e7       	ldi	r22, 0x76	; 118
    3e8c:	73 e0       	ldi	r23, 0x03	; 3
    3e8e:	17 c0       	rjmp	.+46     	; 0x3ebe <_ZN11DHT_Unified7setNameEP8sensor_t+0x4c>
 *  @brief  Sets sensor name
 *  @param  sensor
 *          Sensor that will be set
 */
void DHT_Unified::setName(sensor_t *sensor) {
  switch (_type) {
    3e90:	85 31       	cpi	r24, 0x15	; 21
    3e92:	61 f0       	breq	.+24     	; 0x3eac <_ZN11DHT_Unified7setNameEP8sensor_t+0x3a>
    3e94:	86 31       	cpi	r24, 0x16	; 22
    3e96:	79 f4       	brne	.+30     	; 0x3eb6 <_ZN11DHT_Unified7setNameEP8sensor_t+0x44>
    break;
  case DHT21:
    strncpy(sensor->name, "DHT21", sizeof(sensor->name) - 1);
    break;
  case DHT22:
    strncpy(sensor->name, "DHT22", sizeof(sensor->name) - 1);
    3e98:	4b e0       	ldi	r20, 0x0B	; 11
    3e9a:	50 e0       	ldi	r21, 0x00	; 0
    3e9c:	68 e8       	ldi	r22, 0x88	; 136
    3e9e:	73 e0       	ldi	r23, 0x03	; 3
    3ea0:	0e c0       	rjmp	.+28     	; 0x3ebe <_ZN11DHT_Unified7setNameEP8sensor_t+0x4c>
  switch (_type) {
  case DHT11:
    strncpy(sensor->name, "DHT11", sizeof(sensor->name) - 1);
    break;
  case DHT12:
    strncpy(sensor->name, "DHT12", sizeof(sensor->name) - 1);
    3ea2:	4b e0       	ldi	r20, 0x0B	; 11
    3ea4:	50 e0       	ldi	r21, 0x00	; 0
    3ea6:	6c e7       	ldi	r22, 0x7C	; 124
    3ea8:	73 e0       	ldi	r23, 0x03	; 3
    3eaa:	09 c0       	rjmp	.+18     	; 0x3ebe <_ZN11DHT_Unified7setNameEP8sensor_t+0x4c>
    break;
  case DHT21:
    strncpy(sensor->name, "DHT21", sizeof(sensor->name) - 1);
    3eac:	4b e0       	ldi	r20, 0x0B	; 11
    3eae:	50 e0       	ldi	r21, 0x00	; 0
    3eb0:	62 e8       	ldi	r22, 0x82	; 130
    3eb2:	73 e0       	ldi	r23, 0x03	; 3
    3eb4:	04 c0       	rjmp	.+8      	; 0x3ebe <_ZN11DHT_Unified7setNameEP8sensor_t+0x4c>
    break;
  default:
    // TODO: Perhaps this should be an error?  However main DHT library doesn't
    // enforce restrictions on the sensor type value.  Pick a generic name for
    // now.
    strncpy(sensor->name, "DHT?", sizeof(sensor->name) - 1);
    3eb6:	4b e0       	ldi	r20, 0x0B	; 11
    3eb8:	50 e0       	ldi	r21, 0x00	; 0
    3eba:	6e e8       	ldi	r22, 0x8E	; 142
    3ebc:	73 e0       	ldi	r23, 0x03	; 3
    3ebe:	ce 01       	movw	r24, r28
    3ec0:	0e 94 09 41 	call	0x8212	; 0x8212 <strncpy>
    break;
  }
  sensor->name[sizeof(sensor->name) - 1] = 0;
    3ec4:	1b 86       	std	Y+11, r1	; 0x0b
}
    3ec6:	df 91       	pop	r29
    3ec8:	cf 91       	pop	r28
    3eca:	08 95       	ret

00003ecc <_ZN11DHT_Unified11setMinDelayEP8sensor_t>:
/*!
 *  @brief  Sets Minimum Delay Value
 *  @param  sensor
 *          Sensor that will be set
 */
void DHT_Unified::setMinDelay(sensor_t *sensor) {
    3ecc:	fb 01       	movw	r30, r22
  switch (_type) {
    3ece:	dc 01       	movw	r26, r24
    3ed0:	53 96       	adiw	r26, 0x13	; 19
    3ed2:	8c 91       	ld	r24, X
    3ed4:	8c 30       	cpi	r24, 0x0C	; 12
    3ed6:	41 f0       	breq	.+16     	; 0x3ee8 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x1c>
    3ed8:	38 f4       	brcc	.+14     	; 0x3ee8 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x1c>
    3eda:	8b 30       	cpi	r24, 0x0B	; 11
    3edc:	29 f4       	brne	.+10     	; 0x3ee8 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x1c>
  case DHT11:
    sensor->min_delay = 1000000L; // 1 second (in microseconds)
    3ede:	80 e4       	ldi	r24, 0x40	; 64
    3ee0:	92 e4       	ldi	r25, 0x42	; 66
    3ee2:	af e0       	ldi	r26, 0x0F	; 15
    3ee4:	b0 e0       	ldi	r27, 0x00	; 0
    3ee6:	04 c0       	rjmp	.+8      	; 0x3ef0 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x24>
  case DHT22:
    sensor->min_delay = 2000000L; // 2 seconds (in microseconds)
    break;
  default:
    // Default to slowest sample rate in case of unknown type.
    sensor->min_delay = 2000000L; // 2 seconds (in microseconds)
    3ee8:	80 e8       	ldi	r24, 0x80	; 128
    3eea:	94 e8       	ldi	r25, 0x84	; 132
    3eec:	ae e1       	ldi	r26, 0x1E	; 30
    3eee:	b0 e0       	ldi	r27, 0x00	; 0
    3ef0:	84 a3       	std	Z+36, r24	; 0x24
    3ef2:	95 a3       	std	Z+37, r25	; 0x25
    3ef4:	a6 a3       	std	Z+38, r26	; 0x26
    3ef6:	b7 a3       	std	Z+39, r27	; 0x27
    3ef8:	08 95       	ret

00003efa <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t>:

/*!
 *  @brief  Provides the sensor_t data for this sensor
 *  @param  sensor
 */
void DHT_Unified::Temperature::getSensor(sensor_t *sensor) {
    3efa:	0f 93       	push	r16
    3efc:	1f 93       	push	r17
    3efe:	cf 93       	push	r28
    3f00:	df 93       	push	r29
    3f02:	8c 01       	movw	r16, r24
    3f04:	eb 01       	movw	r28, r22
  // Clear sensor definition.
  memset(sensor, 0, sizeof(sensor_t));
    3f06:	88 e2       	ldi	r24, 0x28	; 40
    3f08:	db 01       	movw	r26, r22
    3f0a:	1d 92       	st	X+, r1
    3f0c:	8a 95       	dec	r24
    3f0e:	e9 f7       	brne	.-6      	; 0x3f0a <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x10>
  // Set sensor name.
  _parent->setName(sensor);
    3f10:	f8 01       	movw	r30, r16
    3f12:	83 81       	ldd	r24, Z+3	; 0x03
    3f14:	94 81       	ldd	r25, Z+4	; 0x04
    3f16:	ad df       	rcall	.-166    	; 0x3e72 <_ZN11DHT_Unified7setNameEP8sensor_t>
  // Set version and ID
  sensor->version = DHT_SENSOR_VERSION;
    3f18:	81 e0       	ldi	r24, 0x01	; 1
    3f1a:	90 e0       	ldi	r25, 0x00	; 0
    3f1c:	a0 e0       	ldi	r26, 0x00	; 0
    3f1e:	b0 e0       	ldi	r27, 0x00	; 0
    3f20:	8c 87       	std	Y+12, r24	; 0x0c
    3f22:	9d 87       	std	Y+13, r25	; 0x0d
    3f24:	ae 87       	std	Y+14, r26	; 0x0e
    3f26:	bf 87       	std	Y+15, r27	; 0x0f
  sensor->sensor_id = _id;
    3f28:	f8 01       	movw	r30, r16
    3f2a:	85 81       	ldd	r24, Z+5	; 0x05
    3f2c:	96 81       	ldd	r25, Z+6	; 0x06
    3f2e:	a7 81       	ldd	r26, Z+7	; 0x07
    3f30:	b0 85       	ldd	r27, Z+8	; 0x08
    3f32:	88 8b       	std	Y+16, r24	; 0x10
    3f34:	99 8b       	std	Y+17, r25	; 0x11
    3f36:	aa 8b       	std	Y+18, r26	; 0x12
    3f38:	bb 8b       	std	Y+19, r27	; 0x13
  // Set type and characteristics.
  sensor->type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
    3f3a:	8d e0       	ldi	r24, 0x0D	; 13
    3f3c:	90 e0       	ldi	r25, 0x00	; 0
    3f3e:	a0 e0       	ldi	r26, 0x00	; 0
    3f40:	b0 e0       	ldi	r27, 0x00	; 0
    3f42:	8c 8b       	std	Y+20, r24	; 0x14
    3f44:	9d 8b       	std	Y+21, r25	; 0x15
    3f46:	ae 8b       	std	Y+22, r26	; 0x16
    3f48:	bf 8b       	std	Y+23, r27	; 0x17
  _parent->setMinDelay(sensor);
    3f4a:	be 01       	movw	r22, r28
    3f4c:	83 81       	ldd	r24, Z+3	; 0x03
    3f4e:	94 81       	ldd	r25, Z+4	; 0x04
    3f50:	bd df       	rcall	.-134    	; 0x3ecc <_ZN11DHT_Unified11setMinDelayEP8sensor_t>
  switch (_parent->_type) {
    3f52:	d8 01       	movw	r26, r16
    3f54:	13 96       	adiw	r26, 0x03	; 3
    3f56:	ed 91       	ld	r30, X+
    3f58:	fc 91       	ld	r31, X
    3f5a:	14 97       	sbiw	r26, 0x04	; 4
    3f5c:	83 89       	ldd	r24, Z+19	; 0x13
    3f5e:	8c 30       	cpi	r24, 0x0C	; 12
    3f60:	f1 f0       	breq	.+60     	; 0x3f9e <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0xa4>
    3f62:	a0 f4       	brcc	.+40     	; 0x3f8c <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x92>
    3f64:	8b 30       	cpi	r24, 0x0B	; 11
    3f66:	09 f0       	breq	.+2      	; 0x3f6a <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x70>
    3f68:	48 c0       	rjmp	.+144    	; 0x3ffa <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x100>
  case DHT11:
    sensor->max_value = 50.0F;
    3f6a:	80 e0       	ldi	r24, 0x00	; 0
    3f6c:	90 e0       	ldi	r25, 0x00	; 0
    3f6e:	a8 e4       	ldi	r26, 0x48	; 72
    3f70:	b2 e4       	ldi	r27, 0x42	; 66
    3f72:	88 8f       	std	Y+24, r24	; 0x18
    3f74:	99 8f       	std	Y+25, r25	; 0x19
    3f76:	aa 8f       	std	Y+26, r26	; 0x1a
    3f78:	bb 8f       	std	Y+27, r27	; 0x1b
    sensor->min_value = 0.0F;
    3f7a:	1c 8e       	std	Y+28, r1	; 0x1c
    3f7c:	1d 8e       	std	Y+29, r1	; 0x1d
    3f7e:	1e 8e       	std	Y+30, r1	; 0x1e
    3f80:	1f 8e       	std	Y+31, r1	; 0x1f
    sensor->resolution = 2.0F;
    3f82:	80 e0       	ldi	r24, 0x00	; 0
    3f84:	90 e0       	ldi	r25, 0x00	; 0
    3f86:	a0 e0       	ldi	r26, 0x00	; 0
    3f88:	b0 e4       	ldi	r27, 0x40	; 64
    3f8a:	32 c0       	rjmp	.+100    	; 0x3ff0 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0xf6>
  sensor->version = DHT_SENSOR_VERSION;
  sensor->sensor_id = _id;
  // Set type and characteristics.
  sensor->type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
  _parent->setMinDelay(sensor);
  switch (_parent->_type) {
    3f8c:	85 31       	cpi	r24, 0x15	; 21
    3f8e:	e1 f0       	breq	.+56     	; 0x3fc8 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0xce>
    3f90:	86 31       	cpi	r24, 0x16	; 22
    3f92:	99 f5       	brne	.+102    	; 0x3ffa <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x100>
    sensor->max_value = 80.0F;
    sensor->min_value = -40.0F;
    sensor->resolution = 0.1F;
    break;
  case DHT22:
    sensor->max_value = 125.0F;
    3f94:	80 e0       	ldi	r24, 0x00	; 0
    3f96:	90 e0       	ldi	r25, 0x00	; 0
    3f98:	aa ef       	ldi	r26, 0xFA	; 250
    3f9a:	b2 e4       	ldi	r27, 0x42	; 66
    3f9c:	19 c0       	rjmp	.+50     	; 0x3fd0 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0xd6>
    sensor->max_value = 50.0F;
    sensor->min_value = 0.0F;
    sensor->resolution = 2.0F;
    break;
  case DHT12:
    sensor->max_value = 60.0F;
    3f9e:	80 e0       	ldi	r24, 0x00	; 0
    3fa0:	90 e0       	ldi	r25, 0x00	; 0
    3fa2:	a0 e7       	ldi	r26, 0x70	; 112
    3fa4:	b2 e4       	ldi	r27, 0x42	; 66
    3fa6:	88 8f       	std	Y+24, r24	; 0x18
    3fa8:	99 8f       	std	Y+25, r25	; 0x19
    3faa:	aa 8f       	std	Y+26, r26	; 0x1a
    3fac:	bb 8f       	std	Y+27, r27	; 0x1b
    sensor->min_value = -20.0F;
    3fae:	80 e0       	ldi	r24, 0x00	; 0
    3fb0:	90 e0       	ldi	r25, 0x00	; 0
    3fb2:	a0 ea       	ldi	r26, 0xA0	; 160
    3fb4:	b1 ec       	ldi	r27, 0xC1	; 193
    3fb6:	8c 8f       	std	Y+28, r24	; 0x1c
    3fb8:	9d 8f       	std	Y+29, r25	; 0x1d
    3fba:	ae 8f       	std	Y+30, r26	; 0x1e
    3fbc:	bf 8f       	std	Y+31, r27	; 0x1f
    sensor->resolution = 0.5F;
    3fbe:	80 e0       	ldi	r24, 0x00	; 0
    3fc0:	90 e0       	ldi	r25, 0x00	; 0
    3fc2:	a0 e0       	ldi	r26, 0x00	; 0
    3fc4:	bf e3       	ldi	r27, 0x3F	; 63
    3fc6:	14 c0       	rjmp	.+40     	; 0x3ff0 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0xf6>
    break;
  case DHT21:
    sensor->max_value = 80.0F;
    3fc8:	80 e0       	ldi	r24, 0x00	; 0
    3fca:	90 e0       	ldi	r25, 0x00	; 0
    3fcc:	a0 ea       	ldi	r26, 0xA0	; 160
    3fce:	b2 e4       	ldi	r27, 0x42	; 66
    sensor->min_value = -40.0F;
    sensor->resolution = 0.1F;
    break;
  case DHT22:
    sensor->max_value = 125.0F;
    3fd0:	88 8f       	std	Y+24, r24	; 0x18
    3fd2:	99 8f       	std	Y+25, r25	; 0x19
    3fd4:	aa 8f       	std	Y+26, r26	; 0x1a
    3fd6:	bb 8f       	std	Y+27, r27	; 0x1b
    sensor->min_value = -40.0F;
    3fd8:	80 e0       	ldi	r24, 0x00	; 0
    3fda:	90 e0       	ldi	r25, 0x00	; 0
    3fdc:	a0 e2       	ldi	r26, 0x20	; 32
    3fde:	b2 ec       	ldi	r27, 0xC2	; 194
    3fe0:	8c 8f       	std	Y+28, r24	; 0x1c
    3fe2:	9d 8f       	std	Y+29, r25	; 0x1d
    3fe4:	ae 8f       	std	Y+30, r26	; 0x1e
    3fe6:	bf 8f       	std	Y+31, r27	; 0x1f
    sensor->resolution = 0.1F;
    3fe8:	8d ec       	ldi	r24, 0xCD	; 205
    3fea:	9c ec       	ldi	r25, 0xCC	; 204
    3fec:	ac ec       	ldi	r26, 0xCC	; 204
    3fee:	bd e3       	ldi	r27, 0x3D	; 61
    3ff0:	88 a3       	std	Y+32, r24	; 0x20
    3ff2:	99 a3       	std	Y+33, r25	; 0x21
    3ff4:	aa a3       	std	Y+34, r26	; 0x22
    3ff6:	bb a3       	std	Y+35, r27	; 0x23
    break;
    3ff8:	0c c0       	rjmp	.+24     	; 0x4012 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x118>
  default:
    // Unknown type, default to 0.
    sensor->max_value = 0.0F;
    3ffa:	18 8e       	std	Y+24, r1	; 0x18
    3ffc:	19 8e       	std	Y+25, r1	; 0x19
    3ffe:	1a 8e       	std	Y+26, r1	; 0x1a
    4000:	1b 8e       	std	Y+27, r1	; 0x1b
    sensor->min_value = 0.0F;
    4002:	1c 8e       	std	Y+28, r1	; 0x1c
    4004:	1d 8e       	std	Y+29, r1	; 0x1d
    4006:	1e 8e       	std	Y+30, r1	; 0x1e
    4008:	1f 8e       	std	Y+31, r1	; 0x1f
    sensor->resolution = 0.0F;
    400a:	18 a2       	std	Y+32, r1	; 0x20
    400c:	19 a2       	std	Y+33, r1	; 0x21
    400e:	1a a2       	std	Y+34, r1	; 0x22
    4010:	1b a2       	std	Y+35, r1	; 0x23
    break;
  }
}
    4012:	df 91       	pop	r29
    4014:	cf 91       	pop	r28
    4016:	1f 91       	pop	r17
    4018:	0f 91       	pop	r16
    401a:	08 95       	ret

0000401c <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t>:

/*!
 *  @brief  Provides the sensor_t data for this sensor
 *  @param  sensor
 */
void DHT_Unified::Humidity::getSensor(sensor_t *sensor) {
    401c:	0f 93       	push	r16
    401e:	1f 93       	push	r17
    4020:	cf 93       	push	r28
    4022:	df 93       	push	r29
    4024:	8c 01       	movw	r16, r24
    4026:	eb 01       	movw	r28, r22
  // Clear sensor definition.
  memset(sensor, 0, sizeof(sensor_t));
    4028:	88 e2       	ldi	r24, 0x28	; 40
    402a:	db 01       	movw	r26, r22
    402c:	1d 92       	st	X+, r1
    402e:	8a 95       	dec	r24
    4030:	e9 f7       	brne	.-6      	; 0x402c <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x10>
  // Set sensor name.
  _parent->setName(sensor);
    4032:	f8 01       	movw	r30, r16
    4034:	83 81       	ldd	r24, Z+3	; 0x03
    4036:	94 81       	ldd	r25, Z+4	; 0x04
    4038:	1c df       	rcall	.-456    	; 0x3e72 <_ZN11DHT_Unified7setNameEP8sensor_t>
  // Set version and ID
  sensor->version = DHT_SENSOR_VERSION;
    403a:	81 e0       	ldi	r24, 0x01	; 1
    403c:	90 e0       	ldi	r25, 0x00	; 0
    403e:	a0 e0       	ldi	r26, 0x00	; 0
    4040:	b0 e0       	ldi	r27, 0x00	; 0
    4042:	8c 87       	std	Y+12, r24	; 0x0c
    4044:	9d 87       	std	Y+13, r25	; 0x0d
    4046:	ae 87       	std	Y+14, r26	; 0x0e
    4048:	bf 87       	std	Y+15, r27	; 0x0f
  sensor->sensor_id = _id;
    404a:	f8 01       	movw	r30, r16
    404c:	85 81       	ldd	r24, Z+5	; 0x05
    404e:	96 81       	ldd	r25, Z+6	; 0x06
    4050:	a7 81       	ldd	r26, Z+7	; 0x07
    4052:	b0 85       	ldd	r27, Z+8	; 0x08
    4054:	88 8b       	std	Y+16, r24	; 0x10
    4056:	99 8b       	std	Y+17, r25	; 0x11
    4058:	aa 8b       	std	Y+18, r26	; 0x12
    405a:	bb 8b       	std	Y+19, r27	; 0x13
  // Set type and characteristics.
  sensor->type = SENSOR_TYPE_RELATIVE_HUMIDITY;
    405c:	8c e0       	ldi	r24, 0x0C	; 12
    405e:	90 e0       	ldi	r25, 0x00	; 0
    4060:	a0 e0       	ldi	r26, 0x00	; 0
    4062:	b0 e0       	ldi	r27, 0x00	; 0
    4064:	8c 8b       	std	Y+20, r24	; 0x14
    4066:	9d 8b       	std	Y+21, r25	; 0x15
    4068:	ae 8b       	std	Y+22, r26	; 0x16
    406a:	bf 8b       	std	Y+23, r27	; 0x17
  _parent->setMinDelay(sensor);
    406c:	be 01       	movw	r22, r28
    406e:	83 81       	ldd	r24, Z+3	; 0x03
    4070:	94 81       	ldd	r25, Z+4	; 0x04
    4072:	2c df       	rcall	.-424    	; 0x3ecc <_ZN11DHT_Unified11setMinDelayEP8sensor_t>
  switch (_parent->_type) {
    4074:	d8 01       	movw	r26, r16
    4076:	13 96       	adiw	r26, 0x03	; 3
    4078:	ed 91       	ld	r30, X+
    407a:	fc 91       	ld	r31, X
    407c:	14 97       	sbiw	r26, 0x04	; 4
    407e:	83 89       	ldd	r24, Z+19	; 0x13
    4080:	8c 30       	cpi	r24, 0x0C	; 12
    4082:	69 f0       	breq	.+26     	; 0x409e <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x82>
    4084:	38 f4       	brcc	.+14     	; 0x4094 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x78>
    4086:	8b 30       	cpi	r24, 0x0B	; 11
    4088:	a1 f5       	brne	.+104    	; 0x40f2 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0xd6>
  case DHT11:
    sensor->max_value = 80.0F;
    408a:	80 e0       	ldi	r24, 0x00	; 0
    408c:	90 e0       	ldi	r25, 0x00	; 0
    408e:	a0 ea       	ldi	r26, 0xA0	; 160
    4090:	b2 e4       	ldi	r27, 0x42	; 66
    4092:	09 c0       	rjmp	.+18     	; 0x40a6 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x8a>
  sensor->version = DHT_SENSOR_VERSION;
  sensor->sensor_id = _id;
  // Set type and characteristics.
  sensor->type = SENSOR_TYPE_RELATIVE_HUMIDITY;
  _parent->setMinDelay(sensor);
  switch (_parent->_type) {
    4094:	85 31       	cpi	r24, 0x15	; 21
    4096:	c1 f0       	breq	.+48     	; 0x40c8 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0xac>
    4098:	86 31       	cpi	r24, 0x16	; 22
    409a:	b1 f0       	breq	.+44     	; 0x40c8 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0xac>
    409c:	2a c0       	rjmp	.+84     	; 0x40f2 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0xd6>
    sensor->max_value = 80.0F;
    sensor->min_value = 20.0F;
    sensor->resolution = 5.0F;
    break;
  case DHT12:
    sensor->max_value = 95.0F;
    409e:	80 e0       	ldi	r24, 0x00	; 0
    40a0:	90 e0       	ldi	r25, 0x00	; 0
    40a2:	ae eb       	ldi	r26, 0xBE	; 190
    40a4:	b2 e4       	ldi	r27, 0x42	; 66
    40a6:	88 8f       	std	Y+24, r24	; 0x18
    40a8:	99 8f       	std	Y+25, r25	; 0x19
    40aa:	aa 8f       	std	Y+26, r26	; 0x1a
    40ac:	bb 8f       	std	Y+27, r27	; 0x1b
    sensor->min_value = 20.0F;
    40ae:	80 e0       	ldi	r24, 0x00	; 0
    40b0:	90 e0       	ldi	r25, 0x00	; 0
    40b2:	a0 ea       	ldi	r26, 0xA0	; 160
    40b4:	b1 e4       	ldi	r27, 0x41	; 65
    40b6:	8c 8f       	std	Y+28, r24	; 0x1c
    40b8:	9d 8f       	std	Y+29, r25	; 0x1d
    40ba:	ae 8f       	std	Y+30, r26	; 0x1e
    40bc:	bf 8f       	std	Y+31, r27	; 0x1f
    sensor->resolution = 5.0F;
    40be:	80 e0       	ldi	r24, 0x00	; 0
    40c0:	90 e0       	ldi	r25, 0x00	; 0
    40c2:	a0 ea       	ldi	r26, 0xA0	; 160
    40c4:	b0 e4       	ldi	r27, 0x40	; 64
    40c6:	10 c0       	rjmp	.+32     	; 0x40e8 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0xcc>
    sensor->max_value = 100.0F;
    sensor->min_value = 0.0F;
    sensor->resolution = 0.1F;
    break;
  case DHT22:
    sensor->max_value = 100.0F;
    40c8:	80 e0       	ldi	r24, 0x00	; 0
    40ca:	90 e0       	ldi	r25, 0x00	; 0
    40cc:	a8 ec       	ldi	r26, 0xC8	; 200
    40ce:	b2 e4       	ldi	r27, 0x42	; 66
    40d0:	88 8f       	std	Y+24, r24	; 0x18
    40d2:	99 8f       	std	Y+25, r25	; 0x19
    40d4:	aa 8f       	std	Y+26, r26	; 0x1a
    40d6:	bb 8f       	std	Y+27, r27	; 0x1b
    sensor->min_value = 0.0F;
    40d8:	1c 8e       	std	Y+28, r1	; 0x1c
    40da:	1d 8e       	std	Y+29, r1	; 0x1d
    40dc:	1e 8e       	std	Y+30, r1	; 0x1e
    40de:	1f 8e       	std	Y+31, r1	; 0x1f
    sensor->resolution = 0.1F;
    40e0:	8d ec       	ldi	r24, 0xCD	; 205
    40e2:	9c ec       	ldi	r25, 0xCC	; 204
    40e4:	ac ec       	ldi	r26, 0xCC	; 204
    40e6:	bd e3       	ldi	r27, 0x3D	; 61
    40e8:	88 a3       	std	Y+32, r24	; 0x20
    40ea:	99 a3       	std	Y+33, r25	; 0x21
    40ec:	aa a3       	std	Y+34, r26	; 0x22
    40ee:	bb a3       	std	Y+35, r27	; 0x23
    break;
    40f0:	0c c0       	rjmp	.+24     	; 0x410a <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0xee>
  default:
    // Unknown type, default to 0.
    sensor->max_value = 0.0F;
    40f2:	18 8e       	std	Y+24, r1	; 0x18
    40f4:	19 8e       	std	Y+25, r1	; 0x19
    40f6:	1a 8e       	std	Y+26, r1	; 0x1a
    40f8:	1b 8e       	std	Y+27, r1	; 0x1b
    sensor->min_value = 0.0F;
    40fa:	1c 8e       	std	Y+28, r1	; 0x1c
    40fc:	1d 8e       	std	Y+29, r1	; 0x1d
    40fe:	1e 8e       	std	Y+30, r1	; 0x1e
    4100:	1f 8e       	std	Y+31, r1	; 0x1f
    sensor->resolution = 0.0F;
    4102:	18 a2       	std	Y+32, r1	; 0x20
    4104:	19 a2       	std	Y+33, r1	; 0x21
    4106:	1a a2       	std	Y+34, r1	; 0x22
    4108:	1b a2       	std	Y+35, r1	; 0x23
    break;
  }
}
    410a:	df 91       	pop	r29
    410c:	cf 91       	pop	r28
    410e:	1f 91       	pop	r17
    4110:	0f 91       	pop	r16
    4112:	08 95       	ret

00004114 <_ZN7TwoWire5writeEi>:
}

byte DS3231::bcdToDec(byte val) {
// Convert binary coded decimal to normal decimal numbers
	return ( (val/16*10) + (val%16) );
}
    4114:	dc 01       	movw	r26, r24
    4116:	ed 91       	ld	r30, X+
    4118:	fc 91       	ld	r31, X
    411a:	01 90       	ld	r0, Z+
    411c:	f0 81       	ld	r31, Z
    411e:	e0 2d       	mov	r30, r0
    4120:	19 94       	eijmp

00004122 <_ZN6RTClib3nowEv>:
    return false;
  //only check other, when first failed
  return (y % 100 || y % 400 == 0);
}

DateTime RTClib::now() {
    4122:	cf 92       	push	r12
    4124:	df 92       	push	r13
    4126:	ef 92       	push	r14
    4128:	ff 92       	push	r15
    412a:	0f 93       	push	r16
    412c:	1f 93       	push	r17
    412e:	cf 93       	push	r28
    4130:	df 93       	push	r29
    4132:	00 d0       	rcall	.+0      	; 0x4134 <_ZN6RTClib3nowEv+0x12>
    4134:	00 d0       	rcall	.+0      	; 0x4136 <_ZN6RTClib3nowEv+0x14>
    4136:	cd b7       	in	r28, 0x3d	; 61
    4138:	de b7       	in	r29, 0x3e	; 62
  Wire.beginTransmission(CLOCK_ADDRESS);
    413a:	68 e6       	ldi	r22, 0x68	; 104
    413c:	70 e0       	ldi	r23, 0x00	; 0
    413e:	8d e3       	ldi	r24, 0x3D	; 61
    4140:	96 e0       	ldi	r25, 0x06	; 6
    4142:	0e 94 8d 32 	call	0x651a	; 0x651a <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(0);	// This is the first register address (Seconds)
    4146:	60 e0       	ldi	r22, 0x00	; 0
    4148:	70 e0       	ldi	r23, 0x00	; 0
    414a:	8d e3       	ldi	r24, 0x3D	; 61
    414c:	96 e0       	ldi	r25, 0x06	; 6
    414e:	e2 df       	rcall	.-60     	; 0x4114 <_ZN7TwoWire5writeEi>
  			// We'll read from here on for 7 bytes: secs reg, minutes reg, hours, days, months and years.
  Wire.endTransmission();
    4150:	8d e3       	ldi	r24, 0x3D	; 61
    4152:	96 e0       	ldi	r25, 0x06	; 6
    4154:	0e 94 02 33 	call	0x6604	; 0x6604 <_ZN7TwoWire15endTransmissionEv>
  
  Wire.requestFrom(CLOCK_ADDRESS, 7);
    4158:	47 e0       	ldi	r20, 0x07	; 7
    415a:	50 e0       	ldi	r21, 0x00	; 0
    415c:	68 e6       	ldi	r22, 0x68	; 104
    415e:	70 e0       	ldi	r23, 0x00	; 0
    4160:	8d e3       	ldi	r24, 0x3D	; 61
    4162:	96 e0       	ldi	r25, 0x06	; 6
    4164:	0e 94 00 33 	call	0x6600	; 0x6600 <_ZN7TwoWire11requestFromEii>
  uint8_t ss = bcd2bin(Wire.read() & 0x7F);
    4168:	8d e3       	ldi	r24, 0x3D	; 61
    416a:	96 e0       	ldi	r25, 0x06	; 6
    416c:	0e 94 ad 31 	call	0x635a	; 0x635a <_ZN7TwoWire4readEv>
    4170:	8f 77       	andi	r24, 0x7F	; 127
  return t;
}

// Slightly modified from JeeLabs / Ladyada
// Get all date/time at once to avoid rollover (e.g., minute/second don't match)
static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
    4172:	98 2f       	mov	r25, r24
    4174:	92 95       	swap	r25
    4176:	9f 70       	andi	r25, 0x0F	; 15
    4178:	1a ef       	ldi	r17, 0xFA	; 250
    417a:	08 2f       	mov	r16, r24
    417c:	91 9f       	mul	r25, r17
    417e:	00 0d       	add	r16, r0
    4180:	11 24       	eor	r1, r1
  			// We'll read from here on for 7 bytes: secs reg, minutes reg, hours, days, months and years.
  Wire.endTransmission();
  
  Wire.requestFrom(CLOCK_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire.read() & 0x7F);
  uint8_t mm = bcd2bin(Wire.read());
    4182:	8d e3       	ldi	r24, 0x3D	; 61
    4184:	96 e0       	ldi	r25, 0x06	; 6
    4186:	0e 94 ad 31 	call	0x635a	; 0x635a <_ZN7TwoWire4readEv>
  return t;
}

// Slightly modified from JeeLabs / Ladyada
// Get all date/time at once to avoid rollover (e.g., minute/second don't match)
static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
    418a:	9c 01       	movw	r18, r24
    418c:	33 27       	eor	r19, r19
    418e:	94 e0       	ldi	r25, 0x04	; 4
    4190:	35 95       	asr	r19
    4192:	27 95       	ror	r18
    4194:	9a 95       	dec	r25
    4196:	e1 f7       	brne	.-8      	; 0x4190 <_ZN6RTClib3nowEv+0x6e>
    4198:	f8 2e       	mov	r15, r24
    419a:	12 9f       	mul	r17, r18
    419c:	f0 0c       	add	r15, r0
    419e:	11 24       	eor	r1, r1
  Wire.endTransmission();
  
  Wire.requestFrom(CLOCK_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire.read() & 0x7F);
  uint8_t mm = bcd2bin(Wire.read());
  uint8_t hh = bcd2bin(Wire.read());
    41a0:	8d e3       	ldi	r24, 0x3D	; 61
    41a2:	96 e0       	ldi	r25, 0x06	; 6
    41a4:	0e 94 ad 31 	call	0x635a	; 0x635a <_ZN7TwoWire4readEv>
  return t;
}

// Slightly modified from JeeLabs / Ladyada
// Get all date/time at once to avoid rollover (e.g., minute/second don't match)
static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
    41a8:	9c 01       	movw	r18, r24
    41aa:	33 27       	eor	r19, r19
    41ac:	44 e0       	ldi	r20, 0x04	; 4
    41ae:	35 95       	asr	r19
    41b0:	27 95       	ror	r18
    41b2:	4a 95       	dec	r20
    41b4:	e1 f7       	brne	.-8      	; 0x41ae <_ZN6RTClib3nowEv+0x8c>
    41b6:	e8 2e       	mov	r14, r24
    41b8:	12 9f       	mul	r17, r18
    41ba:	e0 0c       	add	r14, r0
    41bc:	11 24       	eor	r1, r1
  
  Wire.requestFrom(CLOCK_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire.read() & 0x7F);
  uint8_t mm = bcd2bin(Wire.read());
  uint8_t hh = bcd2bin(Wire.read());
  Wire.read();
    41be:	8d e3       	ldi	r24, 0x3D	; 61
    41c0:	96 e0       	ldi	r25, 0x06	; 6
    41c2:	0e 94 ad 31 	call	0x635a	; 0x635a <_ZN7TwoWire4readEv>
  uint8_t d = bcd2bin(Wire.read());
    41c6:	8d e3       	ldi	r24, 0x3D	; 61
    41c8:	96 e0       	ldi	r25, 0x06	; 6
    41ca:	0e 94 ad 31 	call	0x635a	; 0x635a <_ZN7TwoWire4readEv>
  return t;
}

// Slightly modified from JeeLabs / Ladyada
// Get all date/time at once to avoid rollover (e.g., minute/second don't match)
static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
    41ce:	9c 01       	movw	r18, r24
    41d0:	33 27       	eor	r19, r19
    41d2:	54 e0       	ldi	r21, 0x04	; 4
    41d4:	35 95       	asr	r19
    41d6:	27 95       	ror	r18
    41d8:	5a 95       	dec	r21
    41da:	e1 f7       	brne	.-8      	; 0x41d4 <_ZN6RTClib3nowEv+0xb2>
    41dc:	d8 2e       	mov	r13, r24
    41de:	12 9f       	mul	r17, r18
    41e0:	d0 0c       	add	r13, r0
    41e2:	11 24       	eor	r1, r1
  uint8_t ss = bcd2bin(Wire.read() & 0x7F);
  uint8_t mm = bcd2bin(Wire.read());
  uint8_t hh = bcd2bin(Wire.read());
  Wire.read();
  uint8_t d = bcd2bin(Wire.read());
  uint8_t m = bcd2bin(Wire.read());
    41e4:	8d e3       	ldi	r24, 0x3D	; 61
    41e6:	96 e0       	ldi	r25, 0x06	; 6
    41e8:	0e 94 ad 31 	call	0x635a	; 0x635a <_ZN7TwoWire4readEv>
  return t;
}

// Slightly modified from JeeLabs / Ladyada
// Get all date/time at once to avoid rollover (e.g., minute/second don't match)
static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
    41ec:	9c 01       	movw	r18, r24
    41ee:	33 27       	eor	r19, r19
    41f0:	64 e0       	ldi	r22, 0x04	; 4
    41f2:	35 95       	asr	r19
    41f4:	27 95       	ror	r18
    41f6:	6a 95       	dec	r22
    41f8:	e1 f7       	brne	.-8      	; 0x41f2 <_ZN6RTClib3nowEv+0xd0>
    41fa:	c8 2e       	mov	r12, r24
    41fc:	12 9f       	mul	r17, r18
    41fe:	c0 0c       	add	r12, r0
    4200:	11 24       	eor	r1, r1
  uint8_t mm = bcd2bin(Wire.read());
  uint8_t hh = bcd2bin(Wire.read());
  Wire.read();
  uint8_t d = bcd2bin(Wire.read());
  uint8_t m = bcd2bin(Wire.read());
  uint16_t y = bcd2bin(Wire.read()) + 2000;
    4202:	8d e3       	ldi	r24, 0x3D	; 61
    4204:	96 e0       	ldi	r25, 0x06	; 6
    4206:	0e 94 ad 31 	call	0x635a	; 0x635a <_ZN7TwoWire4readEv>
    420a:	9c 01       	movw	r18, r24
    420c:	33 27       	eor	r19, r19
    420e:	74 e0       	ldi	r23, 0x04	; 4
    4210:	35 95       	asr	r19
    4212:	27 95       	ror	r18
    4214:	7a 95       	dec	r23
    4216:	e1 f7       	brne	.-8      	; 0x4210 <_ZN6RTClib3nowEv+0xee>
    4218:	48 2f       	mov	r20, r24
    421a:	12 9f       	mul	r17, r18
    421c:	40 0d       	add	r20, r0
    421e:	11 24       	eor	r1, r1
    4220:	24 2f       	mov	r18, r20
  
  return DateTime (y, m, d, hh, mm, ss);
}
    4222:	3c 2d       	mov	r19, r12
    4224:	4d 2d       	mov	r20, r13
    4226:	5e 2d       	mov	r21, r14
    4228:	6f 2d       	mov	r22, r15
    422a:	70 2f       	mov	r23, r16
    422c:	80 e0       	ldi	r24, 0x00	; 0
    422e:	90 e0       	ldi	r25, 0x00	; 0
    4230:	26 96       	adiw	r28, 0x06	; 6
    4232:	0f b6       	in	r0, 0x3f	; 63
    4234:	f8 94       	cli
    4236:	de bf       	out	0x3e, r29	; 62
    4238:	0f be       	out	0x3f, r0	; 63
    423a:	cd bf       	out	0x3d, r28	; 61
    423c:	df 91       	pop	r29
    423e:	cf 91       	pop	r28
    4240:	1f 91       	pop	r17
    4242:	0f 91       	pop	r16
    4244:	ff 90       	pop	r15
    4246:	ef 90       	pop	r14
    4248:	df 90       	pop	r13
    424a:	cf 90       	pop	r12
    424c:	08 95       	ret

0000424e <_ZN3KeyC1Ev>:
*/
#include <Key.h>


// default constructor
Key::Key() {
    424e:	fc 01       	movw	r30, r24
	kchar = NO_KEY;
    4250:	10 82       	st	Z, r1
	kstate = IDLE;
    4252:	13 82       	std	Z+3, r1	; 0x03
	stateChanged = false;
    4254:	14 82       	std	Z+4, r1	; 0x04
    4256:	08 95       	ret

00004258 <_ZN6Keypad8pin_readEh>:
void Keypad::setHoldTime(uint hold) {
    holdTime = hold;
}

void Keypad::addEventListener(void (*listener)(char)){
	keypadEventListener = listener;
    4258:	86 2f       	mov	r24, r22
    425a:	0c 94 68 3b 	jmp	0x76d0	; 0x76d0 <digitalRead>

0000425e <_ZN6Keypad9pin_writeEhb>:
    425e:	86 2f       	mov	r24, r22
    4260:	64 2f       	mov	r22, r20
    4262:	0c 94 3a 3b 	jmp	0x7674	; 0x7674 <digitalWrite>

00004266 <_ZN6Keypad8pin_modeEhh>:
    4266:	86 2f       	mov	r24, r22
    4268:	64 2f       	mov	r22, r20
    426a:	0c 94 fe 3a 	jmp	0x75fc	; 0x75fc <pinMode>

0000426e <_ZN6KeypadC1EPcPhS1_hh>:
    426e:	4f 92       	push	r4
    4270:	5f 92       	push	r5
    4272:	6f 92       	push	r6
    4274:	7f 92       	push	r7
    4276:	8f 92       	push	r8
    4278:	9f 92       	push	r9
    427a:	af 92       	push	r10
    427c:	bf 92       	push	r11
    427e:	cf 92       	push	r12
    4280:	df 92       	push	r13
    4282:	ef 92       	push	r14
    4284:	0f 93       	push	r16
    4286:	cf 93       	push	r28
    4288:	df 93       	push	r29
    428a:	ec 01       	movw	r28, r24
    428c:	6b 01       	movw	r12, r22
    428e:	4a 01       	movw	r8, r20
    4290:	59 01       	movw	r10, r18
    4292:	02 96       	adiw	r24, 0x02	; 2
    4294:	dc df       	rcall	.-72     	; 0x424e <_ZN3KeyC1Ev>
    4296:	83 eb       	ldi	r24, 0xB3	; 179
    4298:	93 e0       	ldi	r25, 0x03	; 3
    429a:	99 83       	std	Y+1, r25	; 0x01
    429c:	88 83       	st	Y, r24
    429e:	2e 01       	movw	r4, r28
    42a0:	8b e1       	ldi	r24, 0x1B	; 27
    42a2:	48 0e       	add	r4, r24
    42a4:	51 1c       	adc	r5, r1
    42a6:	3e 01       	movw	r6, r28
    42a8:	8d e4       	ldi	r24, 0x4D	; 77
    42aa:	68 0e       	add	r6, r24
    42ac:	71 1c       	adc	r7, r1
    42ae:	c2 01       	movw	r24, r4
    42b0:	ce df       	rcall	.-100    	; 0x424e <_ZN3KeyC1Ev>
    42b2:	85 e0       	ldi	r24, 0x05	; 5
    42b4:	48 0e       	add	r4, r24
    42b6:	51 1c       	adc	r5, r1
    42b8:	46 14       	cp	r4, r6
    42ba:	57 04       	cpc	r5, r7
    42bc:	c1 f7       	brne	.-16     	; 0x42ae <_ZN6KeypadC1EPcPhS1_hh+0x40>
    42be:	fe 01       	movw	r30, r28
    42c0:	e9 5a       	subi	r30, 0xA9	; 169
    42c2:	ff 4f       	sbci	r31, 0xFF	; 255
    42c4:	91 82       	std	Z+1, r9	; 0x01
    42c6:	80 82       	st	Z, r8
    42c8:	32 96       	adiw	r30, 0x02	; 2
    42ca:	b1 82       	std	Z+1, r11	; 0x01
    42cc:	a0 82       	st	Z, r10
    42ce:	32 96       	adiw	r30, 0x02	; 2
    42d0:	00 83       	st	Z, r16
    42d2:	31 96       	adiw	r30, 0x01	; 1
    42d4:	e0 82       	st	Z, r14
    42d6:	37 97       	sbiw	r30, 0x07	; 7
    42d8:	d1 82       	std	Z+1, r13	; 0x01
    42da:	c0 82       	st	Z, r12
    42dc:	38 96       	adiw	r30, 0x08	; 8
    42de:	8a e0       	ldi	r24, 0x0A	; 10
    42e0:	90 e0       	ldi	r25, 0x00	; 0
    42e2:	91 83       	std	Z+1, r25	; 0x01
    42e4:	80 83       	st	Z, r24
    42e6:	32 96       	adiw	r30, 0x02	; 2
    42e8:	84 ef       	ldi	r24, 0xF4	; 244
    42ea:	91 e0       	ldi	r25, 0x01	; 1
    42ec:	91 83       	std	Z+1, r25	; 0x01
    42ee:	80 83       	st	Z, r24
    42f0:	33 96       	adiw	r30, 0x03	; 3
    42f2:	11 82       	std	Z+1, r1	; 0x01
    42f4:	10 82       	st	Z, r1
    42f6:	71 97       	sbiw	r30, 0x11	; 17
    42f8:	10 82       	st	Z, r1
    42fa:	11 82       	std	Z+1, r1	; 0x01
    42fc:	12 82       	std	Z+2, r1	; 0x02
    42fe:	13 82       	std	Z+3, r1	; 0x03
    4300:	cf 59       	subi	r28, 0x9F	; 159
    4302:	df 4f       	sbci	r29, 0xFF	; 255
    4304:	18 82       	st	Y, r1
    4306:	df 91       	pop	r29
    4308:	cf 91       	pop	r28
    430a:	0f 91       	pop	r16
    430c:	ef 90       	pop	r14
    430e:	df 90       	pop	r13
    4310:	cf 90       	pop	r12
    4312:	bf 90       	pop	r11
    4314:	af 90       	pop	r10
    4316:	9f 90       	pop	r9
    4318:	8f 90       	pop	r8
    431a:	7f 90       	pop	r7
    431c:	6f 90       	pop	r6
    431e:	5f 90       	pop	r5
    4320:	4f 90       	pop	r4
    4322:	08 95       	ret

00004324 <_ZN6Keypad8scanKeysEv>:
    4324:	2f 92       	push	r2
    4326:	3f 92       	push	r3
    4328:	4f 92       	push	r4
    432a:	5f 92       	push	r5
    432c:	6f 92       	push	r6
    432e:	7f 92       	push	r7
    4330:	8f 92       	push	r8
    4332:	9f 92       	push	r9
    4334:	af 92       	push	r10
    4336:	bf 92       	push	r11
    4338:	cf 92       	push	r12
    433a:	df 92       	push	r13
    433c:	ef 92       	push	r14
    433e:	ff 92       	push	r15
    4340:	0f 93       	push	r16
    4342:	1f 93       	push	r17
    4344:	cf 93       	push	r28
    4346:	df 93       	push	r29
    4348:	cd b7       	in	r28, 0x3d	; 61
    434a:	de b7       	in	r29, 0x3e	; 62
    434c:	28 97       	sbiw	r28, 0x08	; 8
    434e:	0f b6       	in	r0, 0x3f	; 63
    4350:	f8 94       	cli
    4352:	de bf       	out	0x3e, r29	; 62
    4354:	0f be       	out	0x3f, r0	; 63
    4356:	cd bf       	out	0x3d, r28	; 61
    4358:	98 87       	std	Y+8, r25	; 0x08
    435a:	8f 83       	std	Y+7, r24	; 0x07
    435c:	10 e0       	ldi	r17, 0x00	; 0
    435e:	5c 01       	movw	r10, r24
    4360:	2b e5       	ldi	r18, 0x5B	; 91
    4362:	a2 0e       	add	r10, r18
    4364:	b1 1c       	adc	r11, r1
    4366:	7c 01       	movw	r14, r24
    4368:	37 e5       	ldi	r19, 0x57	; 87
    436a:	e3 0e       	add	r14, r19
    436c:	f1 1c       	adc	r15, r1
    436e:	d5 01       	movw	r26, r10
    4370:	8c 91       	ld	r24, X
    4372:	18 17       	cp	r17, r24
    4374:	b8 f0       	brcs	.+46     	; 0x43a4 <_ZN6Keypad8scanKeysEv+0x80>
    4376:	31 2c       	mov	r3, r1
    4378:	ef 81       	ldd	r30, Y+7	; 0x07
    437a:	f8 85       	ldd	r31, Y+8	; 0x08
    437c:	e4 5a       	subi	r30, 0xA4	; 164
    437e:	ff 4f       	sbci	r31, 0xFF	; 255
    4380:	fc 83       	std	Y+4, r31	; 0x04
    4382:	eb 83       	std	Y+3, r30	; 0x03
    4384:	cf 80       	ldd	r12, Y+7	; 0x07
    4386:	d8 84       	ldd	r13, Y+8	; 0x08
    4388:	f9 e5       	ldi	r31, 0x59	; 89
    438a:	cf 0e       	add	r12, r31
    438c:	d1 1c       	adc	r13, r1
    438e:	41 2c       	mov	r4, r1
    4390:	51 2c       	mov	r5, r1
    4392:	32 01       	movw	r6, r4
    4394:	43 94       	inc	r4
    4396:	2f 81       	ldd	r18, Y+7	; 0x07
    4398:	38 85       	ldd	r19, Y+8	; 0x08
    439a:	29 5a       	subi	r18, 0xA9	; 169
    439c:	3f 4f       	sbci	r19, 0xFF	; 255
    439e:	3e 83       	std	Y+6, r19	; 0x06
    43a0:	2d 83       	std	Y+5, r18	; 0x05
    43a2:	60 c0       	rjmp	.+192    	; 0x4464 <_ZN6Keypad8scanKeysEv+0x140>
    43a4:	f7 01       	movw	r30, r14
    43a6:	a0 81       	ld	r26, Z
    43a8:	b1 81       	ldd	r27, Z+1	; 0x01
    43aa:	a1 0f       	add	r26, r17
    43ac:	b1 1d       	adc	r27, r1
    43ae:	ef 81       	ldd	r30, Y+7	; 0x07
    43b0:	f8 85       	ldd	r31, Y+8	; 0x08
    43b2:	80 81       	ld	r24, Z
    43b4:	91 81       	ldd	r25, Z+1	; 0x01
    43b6:	fc 01       	movw	r30, r24
    43b8:	20 81       	ld	r18, Z
    43ba:	31 81       	ldd	r19, Z+1	; 0x01
    43bc:	42 e0       	ldi	r20, 0x02	; 2
    43be:	6c 91       	ld	r22, X
    43c0:	8f 81       	ldd	r24, Y+7	; 0x07
    43c2:	98 85       	ldd	r25, Y+8	; 0x08
    43c4:	f9 01       	movw	r30, r18
    43c6:	19 95       	eicall
    43c8:	1f 5f       	subi	r17, 0xFF	; 255
    43ca:	d1 cf       	rjmp	.-94     	; 0x436e <_ZN6Keypad8scanKeysEv+0x4a>
    43cc:	02 2d       	mov	r16, r2
    43ce:	10 e0       	ldi	r17, 0x00	; 0
    43d0:	ad 81       	ldd	r26, Y+5	; 0x05
    43d2:	be 81       	ldd	r27, Y+6	; 0x06
    43d4:	8d 91       	ld	r24, X+
    43d6:	9c 91       	ld	r25, X
    43d8:	dc 01       	movw	r26, r24
    43da:	a0 0f       	add	r26, r16
    43dc:	b1 1f       	adc	r27, r17
    43de:	04 80       	ldd	r0, Z+4	; 0x04
    43e0:	f5 81       	ldd	r31, Z+5	; 0x05
    43e2:	e0 2d       	mov	r30, r0
    43e4:	6c 91       	ld	r22, X
    43e6:	8f 81       	ldd	r24, Y+7	; 0x07
    43e8:	98 85       	ldd	r25, Y+8	; 0x08
    43ea:	19 95       	eicall
    43ec:	00 0f       	add	r16, r16
    43ee:	11 1f       	adc	r17, r17
    43f0:	ef 81       	ldd	r30, Y+7	; 0x07
    43f2:	f8 85       	ldd	r31, Y+8	; 0x08
    43f4:	e0 0f       	add	r30, r16
    43f6:	f1 1f       	adc	r31, r17
    43f8:	89 2b       	or	r24, r25
    43fa:	09 f0       	breq	.+2      	; 0x43fe <_ZN6Keypad8scanKeysEv+0xda>
    43fc:	6f c0       	rjmp	.+222    	; 0x44dc <_ZN6Keypad8scanKeysEv+0x1b8>
    43fe:	87 81       	ldd	r24, Z+7	; 0x07
    4400:	90 85       	ldd	r25, Z+8	; 0x08
    4402:	29 81       	ldd	r18, Y+1	; 0x01
    4404:	3a 81       	ldd	r19, Y+2	; 0x02
    4406:	82 2b       	or	r24, r18
    4408:	93 2b       	or	r25, r19
    440a:	90 87       	std	Z+8, r25	; 0x08
    440c:	87 83       	std	Z+7, r24	; 0x07
    440e:	23 94       	inc	r2
    4410:	d5 01       	movw	r26, r10
    4412:	8c 91       	ld	r24, X
    4414:	af 81       	ldd	r26, Y+7	; 0x07
    4416:	b8 85       	ldd	r27, Y+8	; 0x08
    4418:	ed 91       	ld	r30, X+
    441a:	fc 91       	ld	r31, X
    441c:	28 16       	cp	r2, r24
    441e:	b0 f2       	brcs	.-84     	; 0x43cc <_ZN6Keypad8scanKeysEv+0xa8>
    4420:	d6 01       	movw	r26, r12
    4422:	8d 91       	ld	r24, X+
    4424:	9c 91       	ld	r25, X
    4426:	dc 01       	movw	r26, r24
    4428:	ae 0d       	add	r26, r14
    442a:	bf 1d       	adc	r27, r15
    442c:	02 80       	ldd	r0, Z+2	; 0x02
    442e:	f3 81       	ldd	r31, Z+3	; 0x03
    4430:	e0 2d       	mov	r30, r0
    4432:	41 e0       	ldi	r20, 0x01	; 1
    4434:	6c 91       	ld	r22, X
    4436:	8f 81       	ldd	r24, Y+7	; 0x07
    4438:	98 85       	ldd	r25, Y+8	; 0x08
    443a:	19 95       	eicall
    443c:	f6 01       	movw	r30, r12
    443e:	80 81       	ld	r24, Z
    4440:	91 81       	ldd	r25, Z+1	; 0x01
    4442:	dc 01       	movw	r26, r24
    4444:	ae 0d       	add	r26, r14
    4446:	bf 1d       	adc	r27, r15
    4448:	ef 81       	ldd	r30, Y+7	; 0x07
    444a:	f8 85       	ldd	r31, Y+8	; 0x08
    444c:	80 81       	ld	r24, Z
    444e:	91 81       	ldd	r25, Z+1	; 0x01
    4450:	fc 01       	movw	r30, r24
    4452:	20 81       	ld	r18, Z
    4454:	31 81       	ldd	r19, Z+1	; 0x01
    4456:	40 e0       	ldi	r20, 0x00	; 0
    4458:	6c 91       	ld	r22, X
    445a:	8f 81       	ldd	r24, Y+7	; 0x07
    445c:	98 85       	ldd	r25, Y+8	; 0x08
    445e:	f9 01       	movw	r30, r18
    4460:	19 95       	eicall
    4462:	33 94       	inc	r3
    4464:	ab 81       	ldd	r26, Y+3	; 0x03
    4466:	bc 81       	ldd	r27, Y+4	; 0x04
    4468:	8c 91       	ld	r24, X
    446a:	38 16       	cp	r3, r24
    446c:	e0 f5       	brcc	.+120    	; 0x44e6 <_ZN6Keypad8scanKeysEv+0x1c2>
    446e:	e3 2c       	mov	r14, r3
    4470:	f1 2c       	mov	r15, r1
    4472:	f6 01       	movw	r30, r12
    4474:	a0 81       	ld	r26, Z
    4476:	b1 81       	ldd	r27, Z+1	; 0x01
    4478:	ae 0d       	add	r26, r14
    447a:	bf 1d       	adc	r27, r15
    447c:	ef 81       	ldd	r30, Y+7	; 0x07
    447e:	f8 85       	ldd	r31, Y+8	; 0x08
    4480:	80 81       	ld	r24, Z
    4482:	91 81       	ldd	r25, Z+1	; 0x01
    4484:	fc 01       	movw	r30, r24
    4486:	20 81       	ld	r18, Z
    4488:	31 81       	ldd	r19, Z+1	; 0x01
    448a:	41 e0       	ldi	r20, 0x01	; 1
    448c:	6c 91       	ld	r22, X
    448e:	8f 81       	ldd	r24, Y+7	; 0x07
    4490:	98 85       	ldd	r25, Y+8	; 0x08
    4492:	f9 01       	movw	r30, r18
    4494:	19 95       	eicall
    4496:	f6 01       	movw	r30, r12
    4498:	a0 81       	ld	r26, Z
    449a:	b1 81       	ldd	r27, Z+1	; 0x01
    449c:	ae 0d       	add	r26, r14
    449e:	bf 1d       	adc	r27, r15
    44a0:	ef 81       	ldd	r30, Y+7	; 0x07
    44a2:	f8 85       	ldd	r31, Y+8	; 0x08
    44a4:	80 81       	ld	r24, Z
    44a6:	91 81       	ldd	r25, Z+1	; 0x01
    44a8:	fc 01       	movw	r30, r24
    44aa:	22 81       	ldd	r18, Z+2	; 0x02
    44ac:	33 81       	ldd	r19, Z+3	; 0x03
    44ae:	40 e0       	ldi	r20, 0x00	; 0
    44b0:	6c 91       	ld	r22, X
    44b2:	8f 81       	ldd	r24, Y+7	; 0x07
    44b4:	98 85       	ldd	r25, Y+8	; 0x08
    44b6:	f9 01       	movw	r30, r18
    44b8:	19 95       	eicall
    44ba:	d3 01       	movw	r26, r6
    44bc:	c2 01       	movw	r24, r4
    44be:	03 2c       	mov	r0, r3
    44c0:	04 c0       	rjmp	.+8      	; 0x44ca <_ZN6Keypad8scanKeysEv+0x1a6>
    44c2:	88 0f       	add	r24, r24
    44c4:	99 1f       	adc	r25, r25
    44c6:	aa 1f       	adc	r26, r26
    44c8:	bb 1f       	adc	r27, r27
    44ca:	0a 94       	dec	r0
    44cc:	d2 f7       	brpl	.-12     	; 0x44c2 <_ZN6Keypad8scanKeysEv+0x19e>
    44ce:	9a 83       	std	Y+2, r25	; 0x02
    44d0:	89 83       	std	Y+1, r24	; 0x01
    44d2:	4c 01       	movw	r8, r24
    44d4:	80 94       	com	r8
    44d6:	90 94       	com	r9
    44d8:	21 2c       	mov	r2, r1
    44da:	9a cf       	rjmp	.-204    	; 0x4410 <_ZN6Keypad8scanKeysEv+0xec>
    44dc:	87 81       	ldd	r24, Z+7	; 0x07
    44de:	90 85       	ldd	r25, Z+8	; 0x08
    44e0:	88 21       	and	r24, r8
    44e2:	99 21       	and	r25, r9
    44e4:	92 cf       	rjmp	.-220    	; 0x440a <_ZN6Keypad8scanKeysEv+0xe6>
    44e6:	28 96       	adiw	r28, 0x08	; 8
    44e8:	0f b6       	in	r0, 0x3f	; 63
    44ea:	f8 94       	cli
    44ec:	de bf       	out	0x3e, r29	; 62
    44ee:	0f be       	out	0x3f, r0	; 63
    44f0:	cd bf       	out	0x3d, r28	; 61
    44f2:	df 91       	pop	r29
    44f4:	cf 91       	pop	r28
    44f6:	1f 91       	pop	r17
    44f8:	0f 91       	pop	r16
    44fa:	ff 90       	pop	r15
    44fc:	ef 90       	pop	r14
    44fe:	df 90       	pop	r13
    4500:	cf 90       	pop	r12
    4502:	bf 90       	pop	r11
    4504:	af 90       	pop	r10
    4506:	9f 90       	pop	r9
    4508:	8f 90       	pop	r8
    450a:	7f 90       	pop	r7
    450c:	6f 90       	pop	r6
    450e:	5f 90       	pop	r5
    4510:	4f 90       	pop	r4
    4512:	3f 90       	pop	r3
    4514:	2f 90       	pop	r2
    4516:	08 95       	ret

00004518 <_ZN6Keypad10findInListEi>:
    4518:	fc 01       	movw	r30, r24
    451a:	80 e0       	ldi	r24, 0x00	; 0
    451c:	90 e0       	ldi	r25, 0x00	; 0
    451e:	24 8d       	ldd	r18, Z+28	; 0x1c
    4520:	35 8d       	ldd	r19, Z+29	; 0x1d
    4522:	26 17       	cp	r18, r22
    4524:	37 07       	cpc	r19, r23
    4526:	39 f0       	breq	.+14     	; 0x4536 <_ZN6Keypad10findInListEi+0x1e>
    4528:	01 96       	adiw	r24, 0x01	; 1
    452a:	35 96       	adiw	r30, 0x05	; 5
    452c:	8a 30       	cpi	r24, 0x0A	; 10
    452e:	91 05       	cpc	r25, r1
    4530:	b1 f7       	brne	.-20     	; 0x451e <_ZN6Keypad10findInListEi+0x6>
    4532:	8f ef       	ldi	r24, 0xFF	; 255
    4534:	9f ef       	ldi	r25, 0xFF	; 255
    4536:	08 95       	ret

00004538 <_ZN6Keypad12transitionToEh8KeyState>:
}

void Keypad::transitionTo(byte idx, KeyState nextState) {
	key[idx].kstate = nextState;
    4538:	dc 01       	movw	r26, r24
    453a:	25 e0       	ldi	r18, 0x05	; 5
    453c:	62 9f       	mul	r22, r18
    453e:	a0 0d       	add	r26, r0
    4540:	b1 1d       	adc	r27, r1
    4542:	11 24       	eor	r1, r1
    4544:	5e 96       	adiw	r26, 0x1e	; 30
    4546:	4c 93       	st	X, r20
    4548:	5e 97       	sbiw	r26, 0x1e	; 30
	key[idx].stateChanged = true;
    454a:	21 e0       	ldi	r18, 0x01	; 1
    454c:	5f 96       	adiw	r26, 0x1f	; 31
    454e:	2c 93       	st	X, r18
    4550:	5f 97       	sbiw	r26, 0x1f	; 31

	// Sketch used the getKey() function.
	// Calls keypadEventListener only when the first key in slot 0 changes state.
	if (single_key)  {
    4552:	fc 01       	movw	r30, r24
    4554:	ef 59       	subi	r30, 0x9F	; 159
    4556:	ff 4f       	sbci	r31, 0xFF	; 255
    4558:	20 81       	ld	r18, Z
    455a:	31 96       	adiw	r30, 0x01	; 1
	  	if ( (keypadEventListener!=NULL) && (idx==0) )  {
    455c:	01 90       	ld	r0, Z+
    455e:	f0 81       	ld	r31, Z
    4560:	e0 2d       	mov	r30, r0
	key[idx].kstate = nextState;
	key[idx].stateChanged = true;

	// Sketch used the getKey() function.
	// Calls keypadEventListener only when the first key in slot 0 changes state.
	if (single_key)  {
    4562:	22 23       	and	r18, r18
    4564:	31 f0       	breq	.+12     	; 0x4572 <_ZN6Keypad12transitionToEh8KeyState+0x3a>
	  	if ( (keypadEventListener!=NULL) && (idx==0) )  {
    4566:	30 97       	sbiw	r30, 0x00	; 0
    4568:	49 f0       	breq	.+18     	; 0x457c <_ZN6Keypad12transitionToEh8KeyState+0x44>
    456a:	61 11       	cpse	r22, r1
    456c:	07 c0       	rjmp	.+14     	; 0x457c <_ZN6Keypad12transitionToEh8KeyState+0x44>
			keypadEventListener(key[0].kchar);
    456e:	dc 01       	movw	r26, r24
    4570:	02 c0       	rjmp	.+4      	; 0x4576 <_ZN6Keypad12transitionToEh8KeyState+0x3e>
		}
	}
	// Sketch used the getKeys() function.
	// Calls keypadEventListener on any key that changes state.
	else {
	  	if (keypadEventListener!=NULL)  {
    4572:	30 97       	sbiw	r30, 0x00	; 0
    4574:	19 f0       	breq	.+6      	; 0x457c <_ZN6Keypad12transitionToEh8KeyState+0x44>
			keypadEventListener(key[idx].kchar);
    4576:	5b 96       	adiw	r26, 0x1b	; 27
    4578:	8c 91       	ld	r24, X
    457a:	19 94       	eijmp
    457c:	08 95       	ret

0000457e <_ZN6Keypad12nextKeyStateEhb>:
	return anyActivity;
}

// Private
// This function is a state machine but is also used for debouncing the keys.
void Keypad::nextKeyState(byte idx, boolean button) {
    457e:	cf 92       	push	r12
    4580:	df 92       	push	r13
    4582:	ef 92       	push	r14
    4584:	ff 92       	push	r15
    4586:	0f 93       	push	r16
    4588:	1f 93       	push	r17
    458a:	cf 93       	push	r28
    458c:	df 93       	push	r29
    458e:	ec 01       	movw	r28, r24
    4590:	16 2f       	mov	r17, r22
    4592:	04 2f       	mov	r16, r20
	key[idx].stateChanged = false;
    4594:	fc 01       	movw	r30, r24
    4596:	85 e0       	ldi	r24, 0x05	; 5
    4598:	68 9f       	mul	r22, r24
    459a:	e0 0d       	add	r30, r0
    459c:	f1 1d       	adc	r31, r1
    459e:	11 24       	eor	r1, r1
    45a0:	17 8e       	std	Z+31, r1	; 0x1f

	switch (key[idx].kstate) {
    45a2:	86 8d       	ldd	r24, Z+30	; 0x1e
    45a4:	81 30       	cpi	r24, 0x01	; 1
    45a6:	a9 f0       	breq	.+42     	; 0x45d2 <_ZN6Keypad12nextKeyStateEhb+0x54>
    45a8:	30 f0       	brcs	.+12     	; 0x45b6 <_ZN6Keypad12nextKeyStateEhb+0x38>
    45aa:	82 30       	cpi	r24, 0x02	; 2
    45ac:	69 f1       	breq	.+90     	; 0x4608 <_ZN6Keypad12nextKeyStateEhb+0x8a>
    45ae:	83 30       	cpi	r24, 0x03	; 3
    45b0:	c9 f5       	brne	.+114    	; 0x4624 <_ZN6Keypad12nextKeyStateEhb+0xa6>
		case HOLD:
			if (button==OPEN)
				transitionTo (idx, RELEASED);
			break;
		case RELEASED:
			transitionTo (idx, IDLE);
    45b2:	40 e0       	ldi	r20, 0x00	; 0
    45b4:	2c c0       	rjmp	.+88     	; 0x460e <_ZN6Keypad12nextKeyStateEhb+0x90>
void Keypad::nextKeyState(byte idx, boolean button) {
	key[idx].stateChanged = false;

	switch (key[idx].kstate) {
		case IDLE:
			if (button==CLOSED) {
    45b6:	44 23       	and	r20, r20
    45b8:	a9 f1       	breq	.+106    	; 0x4624 <_ZN6Keypad12nextKeyStateEhb+0xa6>
				transitionTo (idx, PRESSED);
    45ba:	41 e0       	ldi	r20, 0x01	; 1
    45bc:	ce 01       	movw	r24, r28
    45be:	bc df       	rcall	.-136    	; 0x4538 <_ZN6Keypad12transitionToEh8KeyState>
				holdTimer = millis(); }		// Get ready for next HOLD state.
    45c0:	0e 94 e7 38 	call	0x71ce	; 0x71ce <millis>
    45c4:	c3 5b       	subi	r28, 0xB3	; 179
    45c6:	df 4f       	sbci	r29, 0xFF	; 255
    45c8:	68 83       	st	Y, r22
    45ca:	79 83       	std	Y+1, r23	; 0x01
    45cc:	8a 83       	std	Y+2, r24	; 0x02
    45ce:	9b 83       	std	Y+3, r25	; 0x03
    45d0:	29 c0       	rjmp	.+82     	; 0x4624 <_ZN6Keypad12nextKeyStateEhb+0xa6>
			break;
		case PRESSED:
			if ((millis()-holdTimer)>holdTime)	// Waiting for a key HOLD...
    45d2:	0e 94 e7 38 	call	0x71ce	; 0x71ce <millis>
    45d6:	fe 01       	movw	r30, r28
    45d8:	e3 5b       	subi	r30, 0xB3	; 179
    45da:	ff 4f       	sbci	r31, 0xFF	; 255
    45dc:	c0 80       	ld	r12, Z
    45de:	d1 80       	ldd	r13, Z+1	; 0x01
    45e0:	e2 80       	ldd	r14, Z+2	; 0x02
    45e2:	f3 80       	ldd	r15, Z+3	; 0x03
    45e4:	ab 01       	movw	r20, r22
    45e6:	bc 01       	movw	r22, r24
    45e8:	4c 19       	sub	r20, r12
    45ea:	5d 09       	sbc	r21, r13
    45ec:	6e 09       	sbc	r22, r14
    45ee:	7f 09       	sbc	r23, r15
    45f0:	72 96       	adiw	r30, 0x12	; 18
    45f2:	80 81       	ld	r24, Z
    45f4:	91 81       	ldd	r25, Z+1	; 0x01
    45f6:	a0 e0       	ldi	r26, 0x00	; 0
    45f8:	b0 e0       	ldi	r27, 0x00	; 0
    45fa:	84 17       	cp	r24, r20
    45fc:	95 07       	cpc	r25, r21
    45fe:	a6 07       	cpc	r26, r22
    4600:	b7 07       	cpc	r27, r23
    4602:	10 f4       	brcc	.+4      	; 0x4608 <_ZN6Keypad12nextKeyStateEhb+0x8a>
				transitionTo (idx, HOLD);
    4604:	42 e0       	ldi	r20, 0x02	; 2
    4606:	03 c0       	rjmp	.+6      	; 0x460e <_ZN6Keypad12nextKeyStateEhb+0x90>
			else if (button==OPEN)				// or for a key to be RELEASED.
    4608:	01 11       	cpse	r16, r1
    460a:	0c c0       	rjmp	.+24     	; 0x4624 <_ZN6Keypad12nextKeyStateEhb+0xa6>
				transitionTo (idx, RELEASED);
    460c:	43 e0       	ldi	r20, 0x03	; 3
		case HOLD:
			if (button==OPEN)
				transitionTo (idx, RELEASED);
			break;
		case RELEASED:
			transitionTo (idx, IDLE);
    460e:	61 2f       	mov	r22, r17
    4610:	ce 01       	movw	r24, r28
			break;
	}
}
    4612:	df 91       	pop	r29
    4614:	cf 91       	pop	r28
    4616:	1f 91       	pop	r17
    4618:	0f 91       	pop	r16
    461a:	ff 90       	pop	r15
    461c:	ef 90       	pop	r14
    461e:	df 90       	pop	r13
		case HOLD:
			if (button==OPEN)
				transitionTo (idx, RELEASED);
			break;
		case RELEASED:
			transitionTo (idx, IDLE);
    4620:	cf 90       	pop	r12
    4622:	8a cf       	rjmp	.-236    	; 0x4538 <_ZN6Keypad12transitionToEh8KeyState>
			break;
	}
}
    4624:	df 91       	pop	r29
    4626:	cf 91       	pop	r28
    4628:	1f 91       	pop	r17
    462a:	0f 91       	pop	r16
    462c:	ff 90       	pop	r15
    462e:	ef 90       	pop	r14
    4630:	df 90       	pop	r13
    4632:	cf 90       	pop	r12
    4634:	08 95       	ret

00004636 <_ZN6Keypad10updateListEv>:
		pin_mode(columnPins[c],INPUT);
	}
}

// Manage the list without rearranging the keys. Returns true if any keys on the list changed state.
bool Keypad::updateList() {
    4636:	2f 92       	push	r2
    4638:	3f 92       	push	r3
    463a:	4f 92       	push	r4
    463c:	5f 92       	push	r5
    463e:	6f 92       	push	r6
    4640:	7f 92       	push	r7
    4642:	8f 92       	push	r8
    4644:	9f 92       	push	r9
    4646:	af 92       	push	r10
    4648:	bf 92       	push	r11
    464a:	cf 92       	push	r12
    464c:	df 92       	push	r13
    464e:	ef 92       	push	r14
    4650:	ff 92       	push	r15
    4652:	0f 93       	push	r16
    4654:	1f 93       	push	r17
    4656:	cf 93       	push	r28
    4658:	df 93       	push	r29
    465a:	00 d0       	rcall	.+0      	; 0x465c <_ZN6Keypad10updateListEv+0x26>
    465c:	00 d0       	rcall	.+0      	; 0x465e <_ZN6Keypad10updateListEv+0x28>
    465e:	cd b7       	in	r28, 0x3d	; 61
    4660:	de b7       	in	r29, 0x3e	; 62
    4662:	9e 83       	std	Y+6, r25	; 0x06
    4664:	8d 83       	std	Y+5, r24	; 0x05
    4666:	7c 01       	movw	r14, r24
    4668:	5c 01       	movw	r10, r24
    466a:	22 e3       	ldi	r18, 0x32	; 50
    466c:	a2 0e       	add	r10, r18
    466e:	b1 1c       	adc	r11, r1
    4670:	fc 01       	movw	r30, r24

	// Delete any IDLE keys
	for (byte i=0; i<LIST_MAX; i++) {
		if (key[i].kstate==IDLE) {
			key[i].kchar = NO_KEY;
			key[i].kcode = -1;
    4672:	8f ef       	ldi	r24, 0xFF	; 255
    4674:	9f ef       	ldi	r25, 0xFF	; 255

	bool anyActivity = false;

	// Delete any IDLE keys
	for (byte i=0; i<LIST_MAX; i++) {
		if (key[i].kstate==IDLE) {
    4676:	26 8d       	ldd	r18, Z+30	; 0x1e
    4678:	21 11       	cpse	r18, r1
    467a:	04 c0       	rjmp	.+8      	; 0x4684 <_ZN6Keypad10updateListEv+0x4e>
			key[i].kchar = NO_KEY;
    467c:	13 8e       	std	Z+27, r1	; 0x1b
			key[i].kcode = -1;
    467e:	95 8f       	std	Z+29, r25	; 0x1d
    4680:	84 8f       	std	Z+28, r24	; 0x1c
			key[i].stateChanged = false;
    4682:	17 8e       	std	Z+31, r1	; 0x1f
    4684:	35 96       	adiw	r30, 0x05	; 5
bool Keypad::updateList() {

	bool anyActivity = false;

	// Delete any IDLE keys
	for (byte i=0; i<LIST_MAX; i++) {
    4686:	ae 16       	cp	r10, r30
    4688:	bf 06       	cpc	r11, r31
    468a:	a9 f7       	brne	.-22     	; 0x4676 <_ZN6Keypad10updateListEv+0x40>
    468c:	51 2c       	mov	r5, r1
			key[i].stateChanged = false;
		}
	}

	// Add new keys to empty slots in the key list.
	for (byte r=0; r<sizeKpd.rows; r++) {
    468e:	8d 81       	ldd	r24, Y+5	; 0x05
    4690:	9e 81       	ldd	r25, Y+6	; 0x06
    4692:	85 5a       	subi	r24, 0xA5	; 165
    4694:	9f 4f       	sbci	r25, 0xFF	; 255
    4696:	9a 83       	std	Y+2, r25	; 0x02
    4698:	89 83       	std	Y+1, r24	; 0x01
		for (byte c=0; c<sizeKpd.columns; c++) {
    469a:	ad 81       	ldd	r26, Y+5	; 0x05
    469c:	be 81       	ldd	r27, Y+6	; 0x06
    469e:	a4 5a       	subi	r26, 0xA4	; 164
    46a0:	bf 4f       	sbci	r27, 0xFF	; 255
    46a2:	bc 83       	std	Y+4, r27	; 0x04
    46a4:	ab 83       	std	Y+3, r26	; 0x03
			boolean button = bitRead(bitMap[r],c);
			char keyChar = keymap[r * sizeKpd.columns + c];
    46a6:	6d 80       	ldd	r6, Y+5	; 0x05
    46a8:	7e 80       	ldd	r7, Y+6	; 0x06
    46aa:	b5 e5       	ldi	r27, 0x55	; 85
    46ac:	6b 0e       	add	r6, r27
    46ae:	71 1c       	adc	r7, r1
			}
			// Key is NOT on the list so add it.
			if ((idx == -1) && button) {
				for (byte i=0; i<LIST_MAX; i++) {
					if (key[i].kchar==NO_KEY) {		// Find an empty slot or don't add key to list.
						key[i].kchar = keyChar;
    46b0:	85 e0       	ldi	r24, 0x05	; 5
    46b2:	28 2e       	mov	r2, r24
			key[i].stateChanged = false;
		}
	}

	// Add new keys to empty slots in the key list.
	for (byte r=0; r<sizeKpd.rows; r++) {
    46b4:	e9 81       	ldd	r30, Y+1	; 0x01
    46b6:	fa 81       	ldd	r31, Y+2	; 0x02
    46b8:	80 81       	ld	r24, Z
    46ba:	58 16       	cp	r5, r24
    46bc:	08 f0       	brcs	.+2      	; 0x46c0 <_ZN6Keypad10updateListEv+0x8a>
    46be:	57 c0       	rjmp	.+174    	; 0x476e <_ZN6Keypad10updateListEv+0x138>
    46c0:	41 2c       	mov	r4, r1
		for (byte c=0; c<sizeKpd.columns; c++) {
			boolean button = bitRead(bitMap[r],c);
    46c2:	0d 81       	ldd	r16, Y+5	; 0x05
    46c4:	1e 81       	ldd	r17, Y+6	; 0x06
    46c6:	05 0d       	add	r16, r5
    46c8:	11 1d       	adc	r17, r1
    46ca:	05 0d       	add	r16, r5
    46cc:	11 1d       	adc	r17, r1
    46ce:	09 5f       	subi	r16, 0xF9	; 249
    46d0:	1f 4f       	sbci	r17, 0xFF	; 255
		}
	}

	// Add new keys to empty slots in the key list.
	for (byte r=0; r<sizeKpd.rows; r++) {
		for (byte c=0; c<sizeKpd.columns; c++) {
    46d2:	ab 81       	ldd	r26, Y+3	; 0x03
    46d4:	bc 81       	ldd	r27, Y+4	; 0x04
    46d6:	8c 90       	ld	r8, X
    46d8:	48 14       	cp	r4, r8
    46da:	08 f0       	brcs	.+2      	; 0x46de <_ZN6Keypad10updateListEv+0xa8>
    46dc:	46 c0       	rjmp	.+140    	; 0x476a <_ZN6Keypad10updateListEv+0x134>
			boolean button = bitRead(bitMap[r],c);
    46de:	f8 01       	movw	r30, r16
    46e0:	c0 80       	ld	r12, Z
    46e2:	d1 80       	ldd	r13, Z+1	; 0x01
    46e4:	04 2c       	mov	r0, r4
    46e6:	02 c0       	rjmp	.+4      	; 0x46ec <_ZN6Keypad10updateListEv+0xb6>
    46e8:	d6 94       	lsr	r13
    46ea:	c7 94       	ror	r12
    46ec:	0a 94       	dec	r0
    46ee:	e2 f7       	brpl	.-8      	; 0x46e8 <_ZN6Keypad10updateListEv+0xb2>
    46f0:	fc 2d       	mov	r31, r12
    46f2:	f1 70       	andi	r31, 0x01	; 1
    46f4:	3f 2e       	mov	r3, r31
			char keyChar = keymap[r * sizeKpd.columns + c];
    46f6:	58 9c       	mul	r5, r8
    46f8:	40 01       	movw	r8, r0
    46fa:	11 24       	eor	r1, r1
    46fc:	84 0c       	add	r8, r4
    46fe:	91 1c       	adc	r9, r1
			int keyCode = r * sizeKpd.columns + c;
			int idx = findInList (keyCode);
    4700:	b4 01       	movw	r22, r8
    4702:	8d 81       	ldd	r24, Y+5	; 0x05
    4704:	9e 81       	ldd	r25, Y+6	; 0x06
    4706:	08 df       	rcall	.-496    	; 0x4518 <_ZN6Keypad10findInListEi>
			// Key is already on the list so set its next state.
			if (idx > -1)	{
    4708:	97 fd       	sbrc	r25, 7
    470a:	05 c0       	rjmp	.+10     	; 0x4716 <_ZN6Keypad10updateListEv+0xe0>
				nextKeyState(idx, button);
    470c:	43 2d       	mov	r20, r3
    470e:	68 2f       	mov	r22, r24
    4710:	8d 81       	ldd	r24, Y+5	; 0x05
    4712:	9e 81       	ldd	r25, Y+6	; 0x06
    4714:	20 c0       	rjmp	.+64     	; 0x4756 <_ZN6Keypad10updateListEv+0x120>
			}
			// Key is NOT on the list so add it.
			if ((idx == -1) && button) {
    4716:	01 96       	adiw	r24, 0x01	; 1
    4718:	31 f5       	brne	.+76     	; 0x4766 <_ZN6Keypad10updateListEv+0x130>
    471a:	c0 fe       	sbrs	r12, 0
    471c:	24 c0       	rjmp	.+72     	; 0x4766 <_ZN6Keypad10updateListEv+0x130>
    471e:	ed 81       	ldd	r30, Y+5	; 0x05
    4720:	fe 81       	ldd	r31, Y+6	; 0x06
    4722:	60 e0       	ldi	r22, 0x00	; 0
    4724:	70 e0       	ldi	r23, 0x00	; 0
				for (byte i=0; i<LIST_MAX; i++) {
					if (key[i].kchar==NO_KEY) {		// Find an empty slot or don't add key to list.
    4726:	83 8d       	ldd	r24, Z+27	; 0x1b
    4728:	81 11       	cpse	r24, r1
    472a:	17 c0       	rjmp	.+46     	; 0x475a <_ZN6Keypad10updateListEv+0x124>

	// Add new keys to empty slots in the key list.
	for (byte r=0; r<sizeKpd.rows; r++) {
		for (byte c=0; c<sizeKpd.columns; c++) {
			boolean button = bitRead(bitMap[r],c);
			char keyChar = keymap[r * sizeKpd.columns + c];
    472c:	d3 01       	movw	r26, r6
    472e:	ed 91       	ld	r30, X+
    4730:	fc 91       	ld	r31, X
    4732:	e8 0d       	add	r30, r8
    4734:	f9 1d       	adc	r31, r9
    4736:	80 81       	ld	r24, Z
			}
			// Key is NOT on the list so add it.
			if ((idx == -1) && button) {
				for (byte i=0; i<LIST_MAX; i++) {
					if (key[i].kchar==NO_KEY) {		// Find an empty slot or don't add key to list.
						key[i].kchar = keyChar;
    4738:	26 9e       	mul	r2, r22
    473a:	f0 01       	movw	r30, r0
    473c:	27 9e       	mul	r2, r23
    473e:	f0 0d       	add	r31, r0
    4740:	11 24       	eor	r1, r1
    4742:	2d 81       	ldd	r18, Y+5	; 0x05
    4744:	3e 81       	ldd	r19, Y+6	; 0x06
    4746:	e2 0f       	add	r30, r18
    4748:	f3 1f       	adc	r31, r19
    474a:	83 8f       	std	Z+27, r24	; 0x1b
						key[i].kcode = keyCode;
    474c:	95 8e       	std	Z+29, r9	; 0x1d
    474e:	84 8e       	std	Z+28, r8	; 0x1c
						key[i].kstate = IDLE;		// Keys NOT on the list have an initial state of IDLE.
    4750:	16 8e       	std	Z+30, r1	; 0x1e
						nextKeyState (i, button);
    4752:	43 2d       	mov	r20, r3
    4754:	c9 01       	movw	r24, r18
    4756:	13 df       	rcall	.-474    	; 0x457e <_ZN6Keypad12nextKeyStateEhb>
						break;	// Don't fill all the empty slots with the same key.
    4758:	06 c0       	rjmp	.+12     	; 0x4766 <_ZN6Keypad10updateListEv+0x130>
    475a:	6f 5f       	subi	r22, 0xFF	; 255
    475c:	7f 4f       	sbci	r23, 0xFF	; 255
    475e:	35 96       	adiw	r30, 0x05	; 5
			if (idx > -1)	{
				nextKeyState(idx, button);
			}
			// Key is NOT on the list so add it.
			if ((idx == -1) && button) {
				for (byte i=0; i<LIST_MAX; i++) {
    4760:	6a 30       	cpi	r22, 0x0A	; 10
    4762:	71 05       	cpc	r23, r1
    4764:	01 f7       	brne	.-64     	; 0x4726 <_ZN6Keypad10updateListEv+0xf0>
		}
	}

	// Add new keys to empty slots in the key list.
	for (byte r=0; r<sizeKpd.rows; r++) {
		for (byte c=0; c<sizeKpd.columns; c++) {
    4766:	43 94       	inc	r4
    4768:	b4 cf       	rjmp	.-152    	; 0x46d2 <_ZN6Keypad10updateListEv+0x9c>
			key[i].stateChanged = false;
		}
	}

	// Add new keys to empty slots in the key list.
	for (byte r=0; r<sizeKpd.rows; r++) {
    476a:	53 94       	inc	r5
    476c:	a3 cf       	rjmp	.-186    	; 0x46b4 <_ZN6Keypad10updateListEv+0x7e>
    476e:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	// Report if the user changed the state of any key.
	for (byte i=0; i<LIST_MAX; i++) {
		if (key[i].stateChanged) anyActivity = true;
    4770:	d7 01       	movw	r26, r14
    4772:	5f 96       	adiw	r26, 0x1f	; 31
    4774:	9c 91       	ld	r25, X
    4776:	91 11       	cpse	r25, r1
    4778:	81 e0       	ldi	r24, 0x01	; 1
    477a:	b5 e0       	ldi	r27, 0x05	; 5
    477c:	eb 0e       	add	r14, r27
    477e:	f1 1c       	adc	r15, r1
			}
		}
	}

	// Report if the user changed the state of any key.
	for (byte i=0; i<LIST_MAX; i++) {
    4780:	ae 14       	cp	r10, r14
    4782:	bf 04       	cpc	r11, r15
    4784:	a9 f7       	brne	.-22     	; 0x4770 <_ZN6Keypad10updateListEv+0x13a>
		if (key[i].stateChanged) anyActivity = true;
	}

	return anyActivity;
}
    4786:	26 96       	adiw	r28, 0x06	; 6
    4788:	0f b6       	in	r0, 0x3f	; 63
    478a:	f8 94       	cli
    478c:	de bf       	out	0x3e, r29	; 62
    478e:	0f be       	out	0x3f, r0	; 63
    4790:	cd bf       	out	0x3d, r28	; 61
    4792:	df 91       	pop	r29
    4794:	cf 91       	pop	r28
    4796:	1f 91       	pop	r17
    4798:	0f 91       	pop	r16
    479a:	ff 90       	pop	r15
    479c:	ef 90       	pop	r14
    479e:	df 90       	pop	r13
    47a0:	cf 90       	pop	r12
    47a2:	bf 90       	pop	r11
    47a4:	af 90       	pop	r10
    47a6:	9f 90       	pop	r9
    47a8:	8f 90       	pop	r8
    47aa:	7f 90       	pop	r7
    47ac:	6f 90       	pop	r6
    47ae:	5f 90       	pop	r5
    47b0:	4f 90       	pop	r4
    47b2:	3f 90       	pop	r3
    47b4:	2f 90       	pop	r2
    47b6:	08 95       	ret

000047b8 <_ZN6Keypad7getKeysEv>:

	return NO_KEY;
}

// Populate the key list.
bool Keypad::getKeys() {
    47b8:	cf 92       	push	r12
    47ba:	df 92       	push	r13
    47bc:	ef 92       	push	r14
    47be:	ff 92       	push	r15
    47c0:	0f 93       	push	r16
    47c2:	1f 93       	push	r17
    47c4:	cf 93       	push	r28
    47c6:	df 93       	push	r29
    47c8:	ec 01       	movw	r28, r24
	bool keyActivity = false;

	// Limit how often the keypad is scanned. This makes the loop() run 10 times as fast.
	if ( (millis()-startTime)>debounceTime ) {
    47ca:	0e 94 e7 38 	call	0x71ce	; 0x71ce <millis>
    47ce:	8e 01       	movw	r16, r28
    47d0:	0f 5a       	subi	r16, 0xAF	; 175
    47d2:	1f 4f       	sbci	r17, 0xFF	; 255
    47d4:	f8 01       	movw	r30, r16
    47d6:	c0 80       	ld	r12, Z
    47d8:	d1 80       	ldd	r13, Z+1	; 0x01
    47da:	e2 80       	ldd	r14, Z+2	; 0x02
    47dc:	f3 80       	ldd	r15, Z+3	; 0x03
    47de:	ab 01       	movw	r20, r22
    47e0:	bc 01       	movw	r22, r24
    47e2:	4c 19       	sub	r20, r12
    47e4:	5d 09       	sbc	r21, r13
    47e6:	6e 09       	sbc	r22, r14
    47e8:	7f 09       	sbc	r23, r15
    47ea:	3c 96       	adiw	r30, 0x0c	; 12
    47ec:	80 81       	ld	r24, Z
    47ee:	91 81       	ldd	r25, Z+1	; 0x01
    47f0:	a0 e0       	ldi	r26, 0x00	; 0
    47f2:	b0 e0       	ldi	r27, 0x00	; 0
    47f4:	84 17       	cp	r24, r20
    47f6:	95 07       	cpc	r25, r21
    47f8:	a6 07       	cpc	r26, r22
    47fa:	b7 07       	cpc	r27, r23
    47fc:	68 f4       	brcc	.+26     	; 0x4818 <_ZN6Keypad7getKeysEv+0x60>
		scanKeys();
    47fe:	ce 01       	movw	r24, r28
    4800:	91 dd       	rcall	.-1246   	; 0x4324 <_ZN6Keypad8scanKeysEv>
		keyActivity = updateList();
    4802:	ce 01       	movw	r24, r28
    4804:	18 df       	rcall	.-464    	; 0x4636 <_ZN6Keypad10updateListEv>
    4806:	c8 2f       	mov	r28, r24
		startTime = millis();
    4808:	0e 94 e7 38 	call	0x71ce	; 0x71ce <millis>
    480c:	f8 01       	movw	r30, r16
    480e:	60 83       	st	Z, r22
    4810:	71 83       	std	Z+1, r23	; 0x01
    4812:	82 83       	std	Z+2, r24	; 0x02
    4814:	93 83       	std	Z+3, r25	; 0x03
    4816:	01 c0       	rjmp	.+2      	; 0x481a <_ZN6Keypad7getKeysEv+0x62>
	return NO_KEY;
}

// Populate the key list.
bool Keypad::getKeys() {
	bool keyActivity = false;
    4818:	c0 e0       	ldi	r28, 0x00	; 0
		keyActivity = updateList();
		startTime = millis();
	}

	return keyActivity;
}
    481a:	8c 2f       	mov	r24, r28
    481c:	df 91       	pop	r29
    481e:	cf 91       	pop	r28
    4820:	1f 91       	pop	r17
    4822:	0f 91       	pop	r16
    4824:	ff 90       	pop	r15
    4826:	ef 90       	pop	r14
    4828:	df 90       	pop	r13
    482a:	cf 90       	pop	r12
    482c:	08 95       	ret

0000482e <_ZN6Keypad6getKeyEv>:
void Keypad::begin(char *userKeymap) {
    keymap = userKeymap;
}

// Returns a single key only. Retained for backwards compatibility.
char Keypad::getKey() {
    482e:	0f 93       	push	r16
    4830:	1f 93       	push	r17
    4832:	cf 93       	push	r28
    4834:	df 93       	push	r29
    4836:	ec 01       	movw	r28, r24
	single_key = true;
    4838:	8c 01       	movw	r16, r24
    483a:	0f 59       	subi	r16, 0x9F	; 159
    483c:	1f 4f       	sbci	r17, 0xFF	; 255
    483e:	81 e0       	ldi	r24, 0x01	; 1
    4840:	f8 01       	movw	r30, r16
    4842:	80 83       	st	Z, r24

	if (getKeys() && key[0].stateChanged && (key[0].kstate==PRESSED))
    4844:	ce 01       	movw	r24, r28
    4846:	b8 df       	rcall	.-144    	; 0x47b8 <_ZN6Keypad7getKeysEv>
    4848:	88 23       	and	r24, r24
    484a:	41 f0       	breq	.+16     	; 0x485c <_ZN6Keypad6getKeyEv+0x2e>
    484c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    484e:	88 23       	and	r24, r24
    4850:	29 f0       	breq	.+10     	; 0x485c <_ZN6Keypad6getKeyEv+0x2e>
    4852:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4854:	81 30       	cpi	r24, 0x01	; 1
    4856:	11 f4       	brne	.+4      	; 0x485c <_ZN6Keypad6getKeyEv+0x2e>
		return key[0].kchar;
    4858:	8b 8d       	ldd	r24, Y+27	; 0x1b
    485a:	03 c0       	rjmp	.+6      	; 0x4862 <_ZN6Keypad6getKeyEv+0x34>
	
	single_key = false;
    485c:	f8 01       	movw	r30, r16
    485e:	10 82       	st	Z, r1

	return NO_KEY;
    4860:	80 e0       	ldi	r24, 0x00	; 0
}
    4862:	df 91       	pop	r29
    4864:	cf 91       	pop	r28
    4866:	1f 91       	pop	r17
    4868:	0f 91       	pop	r16
    486a:	08 95       	ret

0000486c <_ZN13LiquidCrystal11pulseEnableEv>:
}

// This will 'left justify' text from the cursor
void LiquidCrystal::noAutoscroll(void) {
  _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
  command(LCD_ENTRYMODESET | _displaymode);
    486c:	cf 93       	push	r28
    486e:	df 93       	push	r29
    4870:	ec 01       	movw	r28, r24
    4872:	60 e0       	ldi	r22, 0x00	; 0
    4874:	8e 81       	ldd	r24, Y+6	; 0x06
    4876:	0e 94 3a 3b 	call	0x7674	; 0x7674 <digitalWrite>
    487a:	81 e0       	ldi	r24, 0x01	; 1
    487c:	90 e0       	ldi	r25, 0x00	; 0
    487e:	0e 94 51 39 	call	0x72a2	; 0x72a2 <delayMicroseconds>
    4882:	61 e0       	ldi	r22, 0x01	; 1
    4884:	8e 81       	ldd	r24, Y+6	; 0x06
    4886:	0e 94 3a 3b 	call	0x7674	; 0x7674 <digitalWrite>
    488a:	81 e0       	ldi	r24, 0x01	; 1
    488c:	90 e0       	ldi	r25, 0x00	; 0
    488e:	0e 94 51 39 	call	0x72a2	; 0x72a2 <delayMicroseconds>
    4892:	60 e0       	ldi	r22, 0x00	; 0
    4894:	8e 81       	ldd	r24, Y+6	; 0x06
    4896:	0e 94 3a 3b 	call	0x7674	; 0x7674 <digitalWrite>
    489a:	84 e6       	ldi	r24, 0x64	; 100
    489c:	90 e0       	ldi	r25, 0x00	; 0
    489e:	df 91       	pop	r29
    48a0:	cf 91       	pop	r28
    48a2:	0c 94 51 39 	jmp	0x72a2	; 0x72a2 <delayMicroseconds>

000048a6 <_ZN13LiquidCrystal10write4bitsEh>:
    48a6:	cf 92       	push	r12
    48a8:	df 92       	push	r13
    48aa:	ef 92       	push	r14
    48ac:	ff 92       	push	r15
    48ae:	0f 93       	push	r16
    48b0:	1f 93       	push	r17
    48b2:	cf 93       	push	r28
    48b4:	df 93       	push	r29
    48b6:	6c 01       	movw	r12, r24
    48b8:	7c 01       	movw	r14, r24
    48ba:	87 e0       	ldi	r24, 0x07	; 7
    48bc:	e8 0e       	add	r14, r24
    48be:	f1 1c       	adc	r15, r1
    48c0:	c0 e0       	ldi	r28, 0x00	; 0
    48c2:	d0 e0       	ldi	r29, 0x00	; 0
    48c4:	06 2f       	mov	r16, r22
    48c6:	10 e0       	ldi	r17, 0x00	; 0
    48c8:	b8 01       	movw	r22, r16
    48ca:	0c 2e       	mov	r0, r28
    48cc:	02 c0       	rjmp	.+4      	; 0x48d2 <_ZN13LiquidCrystal10write4bitsEh+0x2c>
    48ce:	75 95       	asr	r23
    48d0:	67 95       	ror	r22
    48d2:	0a 94       	dec	r0
    48d4:	e2 f7       	brpl	.-8      	; 0x48ce <_ZN13LiquidCrystal10write4bitsEh+0x28>
    48d6:	61 70       	andi	r22, 0x01	; 1
    48d8:	f7 01       	movw	r30, r14
    48da:	81 91       	ld	r24, Z+
    48dc:	7f 01       	movw	r14, r30
    48de:	0e 94 3a 3b 	call	0x7674	; 0x7674 <digitalWrite>
    48e2:	21 96       	adiw	r28, 0x01	; 1
    48e4:	c4 30       	cpi	r28, 0x04	; 4
    48e6:	d1 05       	cpc	r29, r1
    48e8:	79 f7       	brne	.-34     	; 0x48c8 <_ZN13LiquidCrystal10write4bitsEh+0x22>
    48ea:	c6 01       	movw	r24, r12
    48ec:	df 91       	pop	r29
    48ee:	cf 91       	pop	r28
    48f0:	1f 91       	pop	r17
    48f2:	0f 91       	pop	r16
    48f4:	ff 90       	pop	r15
    48f6:	ef 90       	pop	r14
    48f8:	df 90       	pop	r13
    48fa:	cf 90       	pop	r12
    48fc:	b7 cf       	rjmp	.-146    	; 0x486c <_ZN13LiquidCrystal11pulseEnableEv>

000048fe <_ZN13LiquidCrystal10write8bitsEh>:
    48fe:	cf 92       	push	r12
    4900:	df 92       	push	r13
    4902:	ef 92       	push	r14
    4904:	ff 92       	push	r15
    4906:	0f 93       	push	r16
    4908:	1f 93       	push	r17
    490a:	cf 93       	push	r28
    490c:	df 93       	push	r29
    490e:	6c 01       	movw	r12, r24
    4910:	7c 01       	movw	r14, r24
    4912:	87 e0       	ldi	r24, 0x07	; 7
    4914:	e8 0e       	add	r14, r24
    4916:	f1 1c       	adc	r15, r1
    4918:	c0 e0       	ldi	r28, 0x00	; 0
    491a:	d0 e0       	ldi	r29, 0x00	; 0
    491c:	06 2f       	mov	r16, r22
    491e:	10 e0       	ldi	r17, 0x00	; 0
    4920:	b8 01       	movw	r22, r16
    4922:	0c 2e       	mov	r0, r28
    4924:	02 c0       	rjmp	.+4      	; 0x492a <_ZN13LiquidCrystal10write8bitsEh+0x2c>
    4926:	75 95       	asr	r23
    4928:	67 95       	ror	r22
    492a:	0a 94       	dec	r0
    492c:	e2 f7       	brpl	.-8      	; 0x4926 <_ZN13LiquidCrystal10write8bitsEh+0x28>
    492e:	61 70       	andi	r22, 0x01	; 1
    4930:	f7 01       	movw	r30, r14
    4932:	81 91       	ld	r24, Z+
    4934:	7f 01       	movw	r14, r30
    4936:	0e 94 3a 3b 	call	0x7674	; 0x7674 <digitalWrite>
    493a:	21 96       	adiw	r28, 0x01	; 1
    493c:	c8 30       	cpi	r28, 0x08	; 8
    493e:	d1 05       	cpc	r29, r1
    4940:	79 f7       	brne	.-34     	; 0x4920 <_ZN13LiquidCrystal10write8bitsEh+0x22>
    4942:	c6 01       	movw	r24, r12
    4944:	df 91       	pop	r29
    4946:	cf 91       	pop	r28
    4948:	1f 91       	pop	r17
    494a:	0f 91       	pop	r16
    494c:	ff 90       	pop	r15
    494e:	ef 90       	pop	r14
    4950:	df 90       	pop	r13
    4952:	cf 90       	pop	r12
    4954:	8b cf       	rjmp	.-234    	; 0x486c <_ZN13LiquidCrystal11pulseEnableEv>

00004956 <_ZN13LiquidCrystal4sendEhh>:
    4956:	1f 93       	push	r17
    4958:	cf 93       	push	r28
    495a:	df 93       	push	r29
    495c:	ec 01       	movw	r28, r24
    495e:	16 2f       	mov	r17, r22
    4960:	64 2f       	mov	r22, r20
    4962:	8c 81       	ldd	r24, Y+4	; 0x04
    4964:	0e 94 3a 3b 	call	0x7674	; 0x7674 <digitalWrite>
    4968:	8d 81       	ldd	r24, Y+5	; 0x05
    496a:	8f 3f       	cpi	r24, 0xFF	; 255
    496c:	19 f0       	breq	.+6      	; 0x4974 <_ZN13LiquidCrystal4sendEhh+0x1e>
    496e:	60 e0       	ldi	r22, 0x00	; 0
    4970:	0e 94 3a 3b 	call	0x7674	; 0x7674 <digitalWrite>
    4974:	8f 85       	ldd	r24, Y+15	; 0x0f
    4976:	61 2f       	mov	r22, r17
    4978:	84 ff       	sbrs	r24, 4
    497a:	05 c0       	rjmp	.+10     	; 0x4986 <_ZN13LiquidCrystal4sendEhh+0x30>
    497c:	ce 01       	movw	r24, r28
    497e:	df 91       	pop	r29
    4980:	cf 91       	pop	r28
    4982:	1f 91       	pop	r17
    4984:	bc cf       	rjmp	.-136    	; 0x48fe <_ZN13LiquidCrystal10write8bitsEh>
    4986:	70 e0       	ldi	r23, 0x00	; 0
    4988:	84 e0       	ldi	r24, 0x04	; 4
    498a:	75 95       	asr	r23
    498c:	67 95       	ror	r22
    498e:	8a 95       	dec	r24
    4990:	e1 f7       	brne	.-8      	; 0x498a <_ZN13LiquidCrystal4sendEhh+0x34>
    4992:	ce 01       	movw	r24, r28
    4994:	88 df       	rcall	.-240    	; 0x48a6 <_ZN13LiquidCrystal10write4bitsEh>
    4996:	61 2f       	mov	r22, r17
    4998:	ce 01       	movw	r24, r28
    499a:	df 91       	pop	r29
    499c:	cf 91       	pop	r28
    499e:	1f 91       	pop	r17
    49a0:	82 cf       	rjmp	.-252    	; 0x48a6 <_ZN13LiquidCrystal10write4bitsEh>

000049a2 <_ZN13LiquidCrystal7commandEh>:
    49a2:	40 e0       	ldi	r20, 0x00	; 0
    49a4:	d8 cf       	rjmp	.-80     	; 0x4956 <_ZN13LiquidCrystal4sendEhh>

000049a6 <_ZN13LiquidCrystal5clearEv>:
    49a6:	61 e0       	ldi	r22, 0x01	; 1
    49a8:	fc df       	rcall	.-8      	; 0x49a2 <_ZN13LiquidCrystal7commandEh>
    49aa:	80 ed       	ldi	r24, 0xD0	; 208
    49ac:	97 e0       	ldi	r25, 0x07	; 7
    49ae:	0c 94 51 39 	jmp	0x72a2	; 0x72a2 <delayMicroseconds>

000049b2 <_ZN13LiquidCrystal9setCursorEhh>:
    49b2:	fc 01       	movw	r30, r24
    49b4:	44 30       	cpi	r20, 0x04	; 4
    49b6:	08 f0       	brcs	.+2      	; 0x49ba <_ZN13LiquidCrystal9setCursorEhh+0x8>
    49b8:	43 e0       	ldi	r20, 0x03	; 3
    49ba:	83 89       	ldd	r24, Z+19	; 0x13
    49bc:	48 17       	cp	r20, r24
    49be:	10 f0       	brcs	.+4      	; 0x49c4 <_ZN13LiquidCrystal9setCursorEhh+0x12>
    49c0:	4f ef       	ldi	r20, 0xFF	; 255
    49c2:	48 0f       	add	r20, r24
    49c4:	df 01       	movw	r26, r30
    49c6:	a4 0f       	add	r26, r20
    49c8:	b1 1d       	adc	r27, r1
    49ca:	54 96       	adiw	r26, 0x14	; 20
    49cc:	9c 91       	ld	r25, X
    49ce:	69 0f       	add	r22, r25
    49d0:	60 68       	ori	r22, 0x80	; 128
    49d2:	cf 01       	movw	r24, r30
    49d4:	e6 cf       	rjmp	.-52     	; 0x49a2 <_ZN13LiquidCrystal7commandEh>

000049d6 <_ZN13LiquidCrystal7displayEv>:
    49d6:	fc 01       	movw	r30, r24
    49d8:	60 89       	ldd	r22, Z+16	; 0x10
    49da:	26 2f       	mov	r18, r22
    49dc:	24 60       	ori	r18, 0x04	; 4
    49de:	20 8b       	std	Z+16, r18	; 0x10
    49e0:	6c 60       	ori	r22, 0x0C	; 12
    49e2:	df cf       	rjmp	.-66     	; 0x49a2 <_ZN13LiquidCrystal7commandEh>

000049e4 <_ZN13LiquidCrystal5beginEhhh>:
    49e4:	ef 92       	push	r14
    49e6:	ff 92       	push	r15
    49e8:	0f 93       	push	r16
    49ea:	1f 93       	push	r17
    49ec:	cf 93       	push	r28
    49ee:	df 93       	push	r29
    49f0:	ec 01       	movw	r28, r24
    49f2:	42 30       	cpi	r20, 0x02	; 2
    49f4:	18 f0       	brcs	.+6      	; 0x49fc <_ZN13LiquidCrystal5beginEhhh+0x18>
    49f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    49f8:	88 60       	ori	r24, 0x08	; 8
    49fa:	8f 87       	std	Y+15, r24	; 0x0f
    49fc:	4b 8b       	std	Y+19, r20	; 0x13
    49fe:	1c 8a       	std	Y+20, r1	; 0x14
    4a00:	80 e4       	ldi	r24, 0x40	; 64
    4a02:	8d 8b       	std	Y+21, r24	; 0x15
    4a04:	6e 8b       	std	Y+22, r22	; 0x16
    4a06:	70 e0       	ldi	r23, 0x00	; 0
    4a08:	60 5c       	subi	r22, 0xC0	; 192
    4a0a:	7f 4f       	sbci	r23, 0xFF	; 255
    4a0c:	6f 8b       	std	Y+23, r22	; 0x17
    4a0e:	22 23       	and	r18, r18
    4a10:	29 f0       	breq	.+10     	; 0x4a1c <_ZN13LiquidCrystal5beginEhhh+0x38>
    4a12:	41 30       	cpi	r20, 0x01	; 1
    4a14:	19 f4       	brne	.+6      	; 0x4a1c <_ZN13LiquidCrystal5beginEhhh+0x38>
    4a16:	8f 85       	ldd	r24, Y+15	; 0x0f
    4a18:	84 60       	ori	r24, 0x04	; 4
    4a1a:	8f 87       	std	Y+15, r24	; 0x0f
    4a1c:	61 e0       	ldi	r22, 0x01	; 1
    4a1e:	8c 81       	ldd	r24, Y+4	; 0x04
    4a20:	0e 94 fe 3a 	call	0x75fc	; 0x75fc <pinMode>
    4a24:	8d 81       	ldd	r24, Y+5	; 0x05
    4a26:	8f 3f       	cpi	r24, 0xFF	; 255
    4a28:	19 f0       	breq	.+6      	; 0x4a30 <_ZN13LiquidCrystal5beginEhhh+0x4c>
    4a2a:	61 e0       	ldi	r22, 0x01	; 1
    4a2c:	0e 94 fe 3a 	call	0x75fc	; 0x75fc <pinMode>
    4a30:	61 e0       	ldi	r22, 0x01	; 1
    4a32:	8e 81       	ldd	r24, Y+6	; 0x06
    4a34:	0e 94 fe 3a 	call	0x75fc	; 0x75fc <pinMode>
    4a38:	7e 01       	movw	r14, r28
    4a3a:	87 e0       	ldi	r24, 0x07	; 7
    4a3c:	e8 0e       	add	r14, r24
    4a3e:	f1 1c       	adc	r15, r1
    4a40:	00 e0       	ldi	r16, 0x00	; 0
    4a42:	10 e0       	ldi	r17, 0x00	; 0
    4a44:	8f 85       	ldd	r24, Y+15	; 0x0f
    4a46:	84 fd       	sbrc	r24, 4
    4a48:	03 c0       	rjmp	.+6      	; 0x4a50 <_ZN13LiquidCrystal5beginEhhh+0x6c>
    4a4a:	84 e0       	ldi	r24, 0x04	; 4
    4a4c:	90 e0       	ldi	r25, 0x00	; 0
    4a4e:	02 c0       	rjmp	.+4      	; 0x4a54 <_ZN13LiquidCrystal5beginEhhh+0x70>
    4a50:	88 e0       	ldi	r24, 0x08	; 8
    4a52:	90 e0       	ldi	r25, 0x00	; 0
    4a54:	08 17       	cp	r16, r24
    4a56:	19 07       	cpc	r17, r25
    4a58:	4c f4       	brge	.+18     	; 0x4a6c <_ZN13LiquidCrystal5beginEhhh+0x88>
    4a5a:	61 e0       	ldi	r22, 0x01	; 1
    4a5c:	f7 01       	movw	r30, r14
    4a5e:	81 91       	ld	r24, Z+
    4a60:	7f 01       	movw	r14, r30
    4a62:	0e 94 fe 3a 	call	0x75fc	; 0x75fc <pinMode>
    4a66:	0f 5f       	subi	r16, 0xFF	; 255
    4a68:	1f 4f       	sbci	r17, 0xFF	; 255
    4a6a:	ec cf       	rjmp	.-40     	; 0x4a44 <_ZN13LiquidCrystal5beginEhhh+0x60>
    4a6c:	80 e5       	ldi	r24, 0x50	; 80
    4a6e:	93 ec       	ldi	r25, 0xC3	; 195
    4a70:	0e 94 51 39 	call	0x72a2	; 0x72a2 <delayMicroseconds>
    4a74:	60 e0       	ldi	r22, 0x00	; 0
    4a76:	8c 81       	ldd	r24, Y+4	; 0x04
    4a78:	0e 94 3a 3b 	call	0x7674	; 0x7674 <digitalWrite>
    4a7c:	60 e0       	ldi	r22, 0x00	; 0
    4a7e:	8e 81       	ldd	r24, Y+6	; 0x06
    4a80:	0e 94 3a 3b 	call	0x7674	; 0x7674 <digitalWrite>
    4a84:	8d 81       	ldd	r24, Y+5	; 0x05
    4a86:	8f 3f       	cpi	r24, 0xFF	; 255
    4a88:	19 f0       	breq	.+6      	; 0x4a90 <_ZN13LiquidCrystal5beginEhhh+0xac>
    4a8a:	60 e0       	ldi	r22, 0x00	; 0
    4a8c:	0e 94 3a 3b 	call	0x7674	; 0x7674 <digitalWrite>
    4a90:	6f 85       	ldd	r22, Y+15	; 0x0f
    4a92:	64 fd       	sbrc	r22, 4
    4a94:	19 c0       	rjmp	.+50     	; 0x4ac8 <_ZN13LiquidCrystal5beginEhhh+0xe4>
    4a96:	63 e0       	ldi	r22, 0x03	; 3
    4a98:	ce 01       	movw	r24, r28
    4a9a:	05 df       	rcall	.-502    	; 0x48a6 <_ZN13LiquidCrystal10write4bitsEh>
    4a9c:	84 e9       	ldi	r24, 0x94	; 148
    4a9e:	91 e1       	ldi	r25, 0x11	; 17
    4aa0:	0e 94 51 39 	call	0x72a2	; 0x72a2 <delayMicroseconds>
    4aa4:	63 e0       	ldi	r22, 0x03	; 3
    4aa6:	ce 01       	movw	r24, r28
    4aa8:	fe de       	rcall	.-516    	; 0x48a6 <_ZN13LiquidCrystal10write4bitsEh>
    4aaa:	84 e9       	ldi	r24, 0x94	; 148
    4aac:	91 e1       	ldi	r25, 0x11	; 17
    4aae:	0e 94 51 39 	call	0x72a2	; 0x72a2 <delayMicroseconds>
    4ab2:	63 e0       	ldi	r22, 0x03	; 3
    4ab4:	ce 01       	movw	r24, r28
    4ab6:	f7 de       	rcall	.-530    	; 0x48a6 <_ZN13LiquidCrystal10write4bitsEh>
    4ab8:	86 e9       	ldi	r24, 0x96	; 150
    4aba:	90 e0       	ldi	r25, 0x00	; 0
    4abc:	0e 94 51 39 	call	0x72a2	; 0x72a2 <delayMicroseconds>
    4ac0:	62 e0       	ldi	r22, 0x02	; 2
    4ac2:	ce 01       	movw	r24, r28
    4ac4:	f0 de       	rcall	.-544    	; 0x48a6 <_ZN13LiquidCrystal10write4bitsEh>
    4ac6:	13 c0       	rjmp	.+38     	; 0x4aee <_ZN13LiquidCrystal5beginEhhh+0x10a>
    4ac8:	60 62       	ori	r22, 0x20	; 32
    4aca:	ce 01       	movw	r24, r28
    4acc:	6a df       	rcall	.-300    	; 0x49a2 <_ZN13LiquidCrystal7commandEh>
    4ace:	84 e9       	ldi	r24, 0x94	; 148
    4ad0:	91 e1       	ldi	r25, 0x11	; 17
    4ad2:	0e 94 51 39 	call	0x72a2	; 0x72a2 <delayMicroseconds>
    4ad6:	6f 85       	ldd	r22, Y+15	; 0x0f
    4ad8:	60 62       	ori	r22, 0x20	; 32
    4ada:	ce 01       	movw	r24, r28
    4adc:	62 df       	rcall	.-316    	; 0x49a2 <_ZN13LiquidCrystal7commandEh>
    4ade:	86 e9       	ldi	r24, 0x96	; 150
    4ae0:	90 e0       	ldi	r25, 0x00	; 0
    4ae2:	0e 94 51 39 	call	0x72a2	; 0x72a2 <delayMicroseconds>
    4ae6:	6f 85       	ldd	r22, Y+15	; 0x0f
    4ae8:	60 62       	ori	r22, 0x20	; 32
    4aea:	ce 01       	movw	r24, r28
    4aec:	5a df       	rcall	.-332    	; 0x49a2 <_ZN13LiquidCrystal7commandEh>
    4aee:	6f 85       	ldd	r22, Y+15	; 0x0f
    4af0:	60 62       	ori	r22, 0x20	; 32
    4af2:	ce 01       	movw	r24, r28
    4af4:	56 df       	rcall	.-340    	; 0x49a2 <_ZN13LiquidCrystal7commandEh>
    4af6:	84 e0       	ldi	r24, 0x04	; 4
    4af8:	88 8b       	std	Y+16, r24	; 0x10
    4afa:	ce 01       	movw	r24, r28
    4afc:	6c df       	rcall	.-296    	; 0x49d6 <_ZN13LiquidCrystal7displayEv>
    4afe:	ce 01       	movw	r24, r28
    4b00:	52 df       	rcall	.-348    	; 0x49a6 <_ZN13LiquidCrystal5clearEv>
    4b02:	82 e0       	ldi	r24, 0x02	; 2
    4b04:	89 8b       	std	Y+17, r24	; 0x11
    4b06:	66 e0       	ldi	r22, 0x06	; 6
    4b08:	ce 01       	movw	r24, r28
    4b0a:	df 91       	pop	r29
    4b0c:	cf 91       	pop	r28
    4b0e:	1f 91       	pop	r17
    4b10:	0f 91       	pop	r16
    4b12:	ff 90       	pop	r15
    4b14:	ef 90       	pop	r14
    4b16:	45 cf       	rjmp	.-374    	; 0x49a2 <_ZN13LiquidCrystal7commandEh>

00004b18 <_ZN13LiquidCrystalC1Ehhhhhh>:
    4b18:	cf 92       	push	r12
    4b1a:	ef 92       	push	r14
    4b1c:	0f 93       	push	r16
    4b1e:	fc 01       	movw	r30, r24
    4b20:	13 82       	std	Z+3, r1	; 0x03
    4b22:	12 82       	std	Z+2, r1	; 0x02
    4b24:	8d eb       	ldi	r24, 0xBD	; 189
    4b26:	93 e0       	ldi	r25, 0x03	; 3
    4b28:	91 83       	std	Z+1, r25	; 0x01
    4b2a:	80 83       	st	Z, r24
    4b2c:	64 83       	std	Z+4, r22	; 0x04
    4b2e:	8f ef       	ldi	r24, 0xFF	; 255
    4b30:	85 83       	std	Z+5, r24	; 0x05
    4b32:	46 83       	std	Z+6, r20	; 0x06
    4b34:	27 83       	std	Z+7, r18	; 0x07
    4b36:	00 87       	std	Z+8, r16	; 0x08
    4b38:	e1 86       	std	Z+9, r14	; 0x09
    4b3a:	c2 86       	std	Z+10, r12	; 0x0a
    4b3c:	13 86       	std	Z+11, r1	; 0x0b
    4b3e:	14 86       	std	Z+12, r1	; 0x0c
    4b40:	15 86       	std	Z+13, r1	; 0x0d
    4b42:	16 86       	std	Z+14, r1	; 0x0e
    4b44:	17 86       	std	Z+15, r1	; 0x0f
    4b46:	20 e0       	ldi	r18, 0x00	; 0
    4b48:	41 e0       	ldi	r20, 0x01	; 1
    4b4a:	60 e1       	ldi	r22, 0x10	; 16
    4b4c:	cf 01       	movw	r24, r30
    4b4e:	0f 91       	pop	r16
    4b50:	ef 90       	pop	r14
    4b52:	cf 90       	pop	r12
    4b54:	47 cf       	rjmp	.-370    	; 0x49e4 <_ZN13LiquidCrystal5beginEhhh>

00004b56 <_ZN13LiquidCrystal10createCharEhPh>:
}

// Allows us to fill the first 8 CGRAM locations
// with custom characters
void LiquidCrystal::createChar(uint8_t location, uint8_t charmap[]) {
    4b56:	ef 92       	push	r14
    4b58:	ff 92       	push	r15
    4b5a:	0f 93       	push	r16
    4b5c:	1f 93       	push	r17
    4b5e:	cf 93       	push	r28
    4b60:	df 93       	push	r29
    4b62:	8c 01       	movw	r16, r24
    4b64:	7a 01       	movw	r14, r20
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
    4b66:	67 70       	andi	r22, 0x07	; 7
    4b68:	88 e0       	ldi	r24, 0x08	; 8
    4b6a:	68 9f       	mul	r22, r24
    4b6c:	b0 01       	movw	r22, r0
    4b6e:	11 24       	eor	r1, r1
    4b70:	60 64       	ori	r22, 0x40	; 64
    4b72:	c8 01       	movw	r24, r16
    4b74:	16 df       	rcall	.-468    	; 0x49a2 <_ZN13LiquidCrystal7commandEh>
    4b76:	e7 01       	movw	r28, r14
    4b78:	a8 e0       	ldi	r26, 0x08	; 8
    4b7a:	ea 0e       	add	r14, r26
    4b7c:	f1 1c       	adc	r15, r1
  for (int i=0; i<8; i++) {
    write(charmap[i]);
    4b7e:	69 91       	ld	r22, Y+
    4b80:	d8 01       	movw	r26, r16
    4b82:	ed 91       	ld	r30, X+
    4b84:	fc 91       	ld	r31, X
    4b86:	01 90       	ld	r0, Z+
    4b88:	f0 81       	ld	r31, Z
    4b8a:	e0 2d       	mov	r30, r0
    4b8c:	c8 01       	movw	r24, r16
    4b8e:	19 95       	eicall
// Allows us to fill the first 8 CGRAM locations
// with custom characters
void LiquidCrystal::createChar(uint8_t location, uint8_t charmap[]) {
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
    4b90:	ce 15       	cp	r28, r14
    4b92:	df 05       	cpc	r29, r15
    4b94:	a1 f7       	brne	.-24     	; 0x4b7e <_ZN13LiquidCrystal10createCharEhPh+0x28>
    write(charmap[i]);
  }
}
    4b96:	df 91       	pop	r29
    4b98:	cf 91       	pop	r28
    4b9a:	1f 91       	pop	r17
    4b9c:	0f 91       	pop	r16
    4b9e:	ff 90       	pop	r15
    4ba0:	ef 90       	pop	r14
    4ba2:	08 95       	ret

00004ba4 <_ZN13LiquidCrystal5writeEh>:
inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
}

inline size_t LiquidCrystal::write(uint8_t value) {
  send(value, HIGH);
    4ba4:	41 e0       	ldi	r20, 0x01	; 1
    4ba6:	d7 de       	rcall	.-594    	; 0x4956 <_ZN13LiquidCrystal4sendEhh>
  return 1; // assume sucess
}
    4ba8:	81 e0       	ldi	r24, 0x01	; 1
    4baa:	90 e0       	ldi	r25, 0x00	; 0
    4bac:	08 95       	ret

00004bae <_ZN7MFRC52219PICC_ReadCardSerialEv>:
	}
	if (cmdBuffer[0] != MF_ACK) {
		return STATUS_MIFARE_NACK;
	}
	return STATUS_OK;
} // End PCD_MIFARE_Transceive()
    4bae:	bc 01       	movw	r22, r24
    4bb0:	6e 5f       	subi	r22, 0xFE	; 254
    4bb2:	7f 4f       	sbci	r23, 0xFF	; 255
    4bb4:	dc 01       	movw	r26, r24
    4bb6:	ed 91       	ld	r30, X+
    4bb8:	fc 91       	ld	r31, X
    4bba:	01 90       	ld	r0, Z+
    4bbc:	f0 81       	ld	r31, Z
    4bbe:	e0 2d       	mov	r30, r0
    4bc0:	40 e0       	ldi	r20, 0x00	; 0
    4bc2:	19 95       	eicall
    4bc4:	91 e0       	ldi	r25, 0x01	; 1
    4bc6:	81 11       	cpse	r24, r1
    4bc8:	90 e0       	ldi	r25, 0x00	; 0
    4bca:	89 2f       	mov	r24, r25
    4bcc:	08 95       	ret

00004bce <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.1.constprop.8>:
    4bce:	af 92       	push	r10
    4bd0:	bf 92       	push	r11
    4bd2:	cf 92       	push	r12
    4bd4:	df 92       	push	r13
    4bd6:	ef 92       	push	r14
    4bd8:	ff 92       	push	r15
    4bda:	0f 93       	push	r16
    4bdc:	1f 93       	push	r17
    4bde:	cf 93       	push	r28
    4be0:	df 93       	push	r29
    4be2:	6c 01       	movw	r12, r24
    4be4:	a4 2e       	mov	r10, r20
    4be6:	79 01       	movw	r14, r18
    4be8:	60 68       	ori	r22, 0x80	; 128
    4bea:	b6 2e       	mov	r11, r22
    4bec:	80 e5       	ldi	r24, 0x50	; 80
    4bee:	90 e0       	ldi	r25, 0x00	; 0
    4bf0:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <_ZN8SPIClass16beginTransactionE11SPISettings>
    4bf4:	60 e0       	ldi	r22, 0x00	; 0
    4bf6:	f6 01       	movw	r30, r12
    4bf8:	86 85       	ldd	r24, Z+14	; 0x0e
    4bfa:	0e 94 3a 3b 	call	0x7674	; 0x7674 <digitalWrite>
    4bfe:	aa 94       	dec	r10
    4c00:	8b 2d       	mov	r24, r11
    4c02:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN8SPIClass8transferEh>
    4c06:	00 23       	and	r16, r16
    4c08:	a1 f0       	breq	.+40     	; 0x4c32 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.1.constprop.8+0x64>
    4c0a:	cf ef       	ldi	r28, 0xFF	; 255
    4c0c:	d0 e0       	ldi	r29, 0x00	; 0
    4c0e:	01 c0       	rjmp	.+2      	; 0x4c12 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.1.constprop.8+0x44>
    4c10:	cc 0f       	add	r28, r28
    4c12:	0a 95       	dec	r16
    4c14:	ea f7       	brpl	.-6      	; 0x4c10 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.1.constprop.8+0x42>
    4c16:	8b 2d       	mov	r24, r11
    4c18:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN8SPIClass8transferEh>
    4c1c:	2c 2f       	mov	r18, r28
    4c1e:	20 95       	com	r18
    4c20:	f7 01       	movw	r30, r14
    4c22:	90 81       	ld	r25, Z
    4c24:	92 23       	and	r25, r18
    4c26:	8c 23       	and	r24, r28
    4c28:	89 2b       	or	r24, r25
    4c2a:	f7 01       	movw	r30, r14
    4c2c:	80 83       	st	Z, r24
    4c2e:	11 e0       	ldi	r17, 0x01	; 1
    4c30:	01 c0       	rjmp	.+2      	; 0x4c34 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.1.constprop.8+0x66>
    4c32:	10 e0       	ldi	r17, 0x00	; 0
    4c34:	81 2f       	mov	r24, r17
    4c36:	90 e0       	ldi	r25, 0x00	; 0
    4c38:	e7 01       	movw	r28, r14
    4c3a:	c8 0f       	add	r28, r24
    4c3c:	d9 1f       	adc	r29, r25
    4c3e:	1a 15       	cp	r17, r10
    4c40:	30 f4       	brcc	.+12     	; 0x4c4e <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.1.constprop.8+0x80>
    4c42:	8b 2d       	mov	r24, r11
    4c44:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN8SPIClass8transferEh>
    4c48:	88 83       	st	Y, r24
    4c4a:	1f 5f       	subi	r17, 0xFF	; 255
    4c4c:	f3 cf       	rjmp	.-26     	; 0x4c34 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.1.constprop.8+0x66>
    4c4e:	80 e0       	ldi	r24, 0x00	; 0
    4c50:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN8SPIClass8transferEh>
    4c54:	88 83       	st	Y, r24
    4c56:	61 e0       	ldi	r22, 0x01	; 1
    4c58:	f6 01       	movw	r30, r12
    4c5a:	86 85       	ldd	r24, Z+14	; 0x0e
    4c5c:	0e 94 3a 3b 	call	0x7674	; 0x7674 <digitalWrite>
    4c60:	df 91       	pop	r29
    4c62:	cf 91       	pop	r28
    4c64:	1f 91       	pop	r17
    4c66:	0f 91       	pop	r16
    4c68:	ff 90       	pop	r15
    4c6a:	ef 90       	pop	r14
    4c6c:	df 90       	pop	r13
    4c6e:	cf 90       	pop	r12
    4c70:	bf 90       	pop	r11
    4c72:	af 90       	pop	r10
    4c74:	0c 94 e6 0e 	jmp	0x1dcc	; 0x1dcc <_ZN8SPIClass14endTransactionEv>

00004c78 <_ZN7MFRC522C1Ehh>:
    4c78:	fc 01       	movw	r30, r24
    4c7a:	89 ec       	ldi	r24, 0xC9	; 201
    4c7c:	93 e0       	ldi	r25, 0x03	; 3
    4c7e:	91 83       	std	Z+1, r25	; 0x01
    4c80:	80 83       	st	Z, r24
    4c82:	66 87       	std	Z+14, r22	; 0x0e
    4c84:	47 87       	std	Z+15, r20	; 0x0f
    4c86:	08 95       	ret

00004c88 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>:
    4c88:	0f 93       	push	r16
    4c8a:	1f 93       	push	r17
    4c8c:	cf 93       	push	r28
    4c8e:	df 93       	push	r29
    4c90:	ec 01       	movw	r28, r24
    4c92:	06 2f       	mov	r16, r22
    4c94:	14 2f       	mov	r17, r20
    4c96:	80 e5       	ldi	r24, 0x50	; 80
    4c98:	90 e0       	ldi	r25, 0x00	; 0
    4c9a:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <_ZN8SPIClass16beginTransactionE11SPISettings>
    4c9e:	60 e0       	ldi	r22, 0x00	; 0
    4ca0:	8e 85       	ldd	r24, Y+14	; 0x0e
    4ca2:	0e 94 3a 3b 	call	0x7674	; 0x7674 <digitalWrite>
    4ca6:	80 2f       	mov	r24, r16
    4ca8:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN8SPIClass8transferEh>
    4cac:	81 2f       	mov	r24, r17
    4cae:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN8SPIClass8transferEh>
    4cb2:	61 e0       	ldi	r22, 0x01	; 1
    4cb4:	8e 85       	ldd	r24, Y+14	; 0x0e
    4cb6:	0e 94 3a 3b 	call	0x7674	; 0x7674 <digitalWrite>
    4cba:	df 91       	pop	r29
    4cbc:	cf 91       	pop	r28
    4cbe:	1f 91       	pop	r17
    4cc0:	0f 91       	pop	r16
    4cc2:	0c 94 e6 0e 	jmp	0x1dcc	; 0x1dcc <_ZN8SPIClass14endTransactionEv>

00004cc6 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEhPh>:
    4cc6:	df 92       	push	r13
    4cc8:	ef 92       	push	r14
    4cca:	ff 92       	push	r15
    4ccc:	0f 93       	push	r16
    4cce:	1f 93       	push	r17
    4cd0:	cf 93       	push	r28
    4cd2:	df 93       	push	r29
    4cd4:	8c 01       	movw	r16, r24
    4cd6:	c6 2f       	mov	r28, r22
    4cd8:	f4 2e       	mov	r15, r20
    4cda:	d2 2e       	mov	r13, r18
    4cdc:	e3 2e       	mov	r14, r19
    4cde:	80 e5       	ldi	r24, 0x50	; 80
    4ce0:	90 e0       	ldi	r25, 0x00	; 0
    4ce2:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <_ZN8SPIClass16beginTransactionE11SPISettings>
    4ce6:	60 e0       	ldi	r22, 0x00	; 0
    4ce8:	f8 01       	movw	r30, r16
    4cea:	86 85       	ldd	r24, Z+14	; 0x0e
    4cec:	0e 94 3a 3b 	call	0x7674	; 0x7674 <digitalWrite>
    4cf0:	8c 2f       	mov	r24, r28
    4cf2:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN8SPIClass8transferEh>
    4cf6:	cd 2d       	mov	r28, r13
    4cf8:	de 2d       	mov	r29, r14
    4cfa:	ce 01       	movw	r24, r28
    4cfc:	8f 0d       	add	r24, r15
    4cfe:	91 1d       	adc	r25, r1
    4d00:	7c 01       	movw	r14, r24
    4d02:	ec 16       	cp	r14, r28
    4d04:	fd 06       	cpc	r15, r29
    4d06:	21 f0       	breq	.+8      	; 0x4d10 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEhPh+0x4a>
    4d08:	89 91       	ld	r24, Y+
    4d0a:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN8SPIClass8transferEh>
    4d0e:	f9 cf       	rjmp	.-14     	; 0x4d02 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEhPh+0x3c>
    4d10:	61 e0       	ldi	r22, 0x01	; 1
    4d12:	f8 01       	movw	r30, r16
    4d14:	86 85       	ldd	r24, Z+14	; 0x0e
    4d16:	0e 94 3a 3b 	call	0x7674	; 0x7674 <digitalWrite>
    4d1a:	df 91       	pop	r29
    4d1c:	cf 91       	pop	r28
    4d1e:	1f 91       	pop	r17
    4d20:	0f 91       	pop	r16
    4d22:	ff 90       	pop	r15
    4d24:	ef 90       	pop	r14
    4d26:	df 90       	pop	r13
    4d28:	0c 94 e6 0e 	jmp	0x1dcc	; 0x1dcc <_ZN8SPIClass14endTransactionEv>

00004d2c <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>:
    4d2c:	1f 93       	push	r17
    4d2e:	cf 93       	push	r28
    4d30:	df 93       	push	r29
    4d32:	ec 01       	movw	r28, r24
    4d34:	16 2f       	mov	r17, r22
    4d36:	80 e5       	ldi	r24, 0x50	; 80
    4d38:	90 e0       	ldi	r25, 0x00	; 0
    4d3a:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <_ZN8SPIClass16beginTransactionE11SPISettings>
    4d3e:	60 e0       	ldi	r22, 0x00	; 0
    4d40:	8e 85       	ldd	r24, Y+14	; 0x0e
    4d42:	0e 94 3a 3b 	call	0x7674	; 0x7674 <digitalWrite>
    4d46:	81 2f       	mov	r24, r17
    4d48:	80 68       	ori	r24, 0x80	; 128
    4d4a:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN8SPIClass8transferEh>
    4d4e:	80 e0       	ldi	r24, 0x00	; 0
    4d50:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN8SPIClass8transferEh>
    4d54:	18 2f       	mov	r17, r24
    4d56:	61 e0       	ldi	r22, 0x01	; 1
    4d58:	8e 85       	ldd	r24, Y+14	; 0x0e
    4d5a:	0e 94 3a 3b 	call	0x7674	; 0x7674 <digitalWrite>
    4d5e:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <_ZN8SPIClass14endTransactionEv>
    4d62:	81 2f       	mov	r24, r17
    4d64:	df 91       	pop	r29
    4d66:	cf 91       	pop	r28
    4d68:	1f 91       	pop	r17
    4d6a:	08 95       	ret

00004d6c <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh>:
    4d6c:	0f 93       	push	r16
    4d6e:	41 11       	cpse	r20, r1
    4d70:	2e df       	rcall	.-420    	; 0x4bce <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.1.constprop.8>
    4d72:	0f 91       	pop	r16
    4d74:	08 95       	ret

00004d76 <_ZN7MFRC52222PCD_SetRegisterBitMaskENS_12PCD_RegisterEh>:
    4d76:	0f 93       	push	r16
    4d78:	1f 93       	push	r17
    4d7a:	cf 93       	push	r28
    4d7c:	df 93       	push	r29
    4d7e:	8c 01       	movw	r16, r24
    4d80:	d6 2f       	mov	r29, r22
    4d82:	c4 2f       	mov	r28, r20
    4d84:	d3 df       	rcall	.-90     	; 0x4d2c <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    4d86:	48 2f       	mov	r20, r24
    4d88:	4c 2b       	or	r20, r28
    4d8a:	6d 2f       	mov	r22, r29
    4d8c:	c8 01       	movw	r24, r16
    4d8e:	df 91       	pop	r29
    4d90:	cf 91       	pop	r28
    4d92:	1f 91       	pop	r17
    4d94:	0f 91       	pop	r16
    4d96:	78 cf       	rjmp	.-272    	; 0x4c88 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>

00004d98 <_ZN7MFRC52224PCD_ClearRegisterBitMaskENS_12PCD_RegisterEh>:
    4d98:	0f 93       	push	r16
    4d9a:	1f 93       	push	r17
    4d9c:	cf 93       	push	r28
    4d9e:	df 93       	push	r29
    4da0:	8c 01       	movw	r16, r24
    4da2:	d6 2f       	mov	r29, r22
    4da4:	c4 2f       	mov	r28, r20
    4da6:	c2 df       	rcall	.-124    	; 0x4d2c <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    4da8:	c0 95       	com	r28
    4daa:	4c 2f       	mov	r20, r28
    4dac:	48 23       	and	r20, r24
    4dae:	6d 2f       	mov	r22, r29
    4db0:	c8 01       	movw	r24, r16
    4db2:	df 91       	pop	r29
    4db4:	cf 91       	pop	r28
    4db6:	1f 91       	pop	r17
    4db8:	0f 91       	pop	r16
    4dba:	66 cf       	rjmp	.-308    	; 0x4c88 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>

00004dbc <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>:
    4dbc:	cf 92       	push	r12
    4dbe:	df 92       	push	r13
    4dc0:	ef 92       	push	r14
    4dc2:	ff 92       	push	r15
    4dc4:	0f 93       	push	r16
    4dc6:	1f 93       	push	r17
    4dc8:	cf 93       	push	r28
    4dca:	df 93       	push	r29
    4dcc:	ec 01       	movw	r28, r24
    4dce:	6b 01       	movw	r12, r22
    4dd0:	f4 2e       	mov	r15, r20
    4dd2:	89 01       	movw	r16, r18
    4dd4:	40 e0       	ldi	r20, 0x00	; 0
    4dd6:	62 e0       	ldi	r22, 0x02	; 2
    4dd8:	57 df       	rcall	.-338    	; 0x4c88 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    4dda:	44 e0       	ldi	r20, 0x04	; 4
    4ddc:	6a e0       	ldi	r22, 0x0A	; 10
    4dde:	ce 01       	movw	r24, r28
    4de0:	53 df       	rcall	.-346    	; 0x4c88 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    4de2:	40 e8       	ldi	r20, 0x80	; 128
    4de4:	64 e1       	ldi	r22, 0x14	; 20
    4de6:	ce 01       	movw	r24, r28
    4de8:	4f df       	rcall	.-354    	; 0x4c88 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    4dea:	96 01       	movw	r18, r12
    4dec:	4f 2d       	mov	r20, r15
    4dee:	62 e1       	ldi	r22, 0x12	; 18
    4df0:	ce 01       	movw	r24, r28
    4df2:	69 df       	rcall	.-302    	; 0x4cc6 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEhPh>
    4df4:	43 e0       	ldi	r20, 0x03	; 3
    4df6:	62 e0       	ldi	r22, 0x02	; 2
    4df8:	ce 01       	movw	r24, r28
    4dfa:	46 df       	rcall	.-372    	; 0x4c88 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    4dfc:	0e 94 e7 38 	call	0x71ce	; 0x71ce <millis>
    4e00:	6b 01       	movw	r12, r22
    4e02:	7c 01       	movw	r14, r24
    4e04:	29 e5       	ldi	r18, 0x59	; 89
    4e06:	c2 0e       	add	r12, r18
    4e08:	d1 1c       	adc	r13, r1
    4e0a:	e1 1c       	adc	r14, r1
    4e0c:	f1 1c       	adc	r15, r1
    4e0e:	6a e0       	ldi	r22, 0x0A	; 10
    4e10:	ce 01       	movw	r24, r28
    4e12:	8c df       	rcall	.-232    	; 0x4d2c <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    4e14:	82 ff       	sbrs	r24, 2
    4e16:	10 c0       	rjmp	.+32     	; 0x4e38 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x7c>
    4e18:	40 e0       	ldi	r20, 0x00	; 0
    4e1a:	62 e0       	ldi	r22, 0x02	; 2
    4e1c:	ce 01       	movw	r24, r28
    4e1e:	34 df       	rcall	.-408    	; 0x4c88 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    4e20:	64 e4       	ldi	r22, 0x44	; 68
    4e22:	ce 01       	movw	r24, r28
    4e24:	83 df       	rcall	.-250    	; 0x4d2c <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    4e26:	f8 01       	movw	r30, r16
    4e28:	80 83       	st	Z, r24
    4e2a:	62 e4       	ldi	r22, 0x42	; 66
    4e2c:	ce 01       	movw	r24, r28
    4e2e:	7e df       	rcall	.-260    	; 0x4d2c <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    4e30:	f8 01       	movw	r30, r16
    4e32:	81 83       	std	Z+1, r24	; 0x01
    4e34:	80 e0       	ldi	r24, 0x00	; 0
    4e36:	0a c0       	rjmp	.+20     	; 0x4e4c <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x90>
    4e38:	0e 94 89 36 	call	0x6d12	; 0x6d12 <yield>
    4e3c:	0e 94 e7 38 	call	0x71ce	; 0x71ce <millis>
    4e40:	6c 15       	cp	r22, r12
    4e42:	7d 05       	cpc	r23, r13
    4e44:	8e 05       	cpc	r24, r14
    4e46:	9f 05       	cpc	r25, r15
    4e48:	10 f3       	brcs	.-60     	; 0x4e0e <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x52>
    4e4a:	83 e0       	ldi	r24, 0x03	; 3
    4e4c:	df 91       	pop	r29
    4e4e:	cf 91       	pop	r28
    4e50:	1f 91       	pop	r17
    4e52:	0f 91       	pop	r16
    4e54:	ff 90       	pop	r15
    4e56:	ef 90       	pop	r14
    4e58:	df 90       	pop	r13
    4e5a:	cf 90       	pop	r12
    4e5c:	08 95       	ret

00004e5e <_ZN7MFRC5229PCD_ResetEv>:
    4e5e:	0f 93       	push	r16
    4e60:	1f 93       	push	r17
    4e62:	cf 93       	push	r28
    4e64:	8c 01       	movw	r16, r24
    4e66:	4f e0       	ldi	r20, 0x0F	; 15
    4e68:	62 e0       	ldi	r22, 0x02	; 2
    4e6a:	0e df       	rcall	.-484    	; 0x4c88 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    4e6c:	c3 e0       	ldi	r28, 0x03	; 3
    4e6e:	62 e3       	ldi	r22, 0x32	; 50
    4e70:	70 e0       	ldi	r23, 0x00	; 0
    4e72:	80 e0       	ldi	r24, 0x00	; 0
    4e74:	90 e0       	ldi	r25, 0x00	; 0
    4e76:	0e 94 18 39 	call	0x7230	; 0x7230 <delay>
    4e7a:	62 e0       	ldi	r22, 0x02	; 2
    4e7c:	c8 01       	movw	r24, r16
    4e7e:	56 df       	rcall	.-340    	; 0x4d2c <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    4e80:	84 ff       	sbrs	r24, 4
    4e82:	02 c0       	rjmp	.+4      	; 0x4e88 <_ZN7MFRC5229PCD_ResetEv+0x2a>
    4e84:	c1 50       	subi	r28, 0x01	; 1
    4e86:	99 f7       	brne	.-26     	; 0x4e6e <_ZN7MFRC5229PCD_ResetEv+0x10>
    4e88:	cf 91       	pop	r28
    4e8a:	1f 91       	pop	r17
    4e8c:	0f 91       	pop	r16
    4e8e:	08 95       	ret

00004e90 <_ZN7MFRC52213PCD_AntennaOnEv>:
    4e90:	cf 93       	push	r28
    4e92:	df 93       	push	r29
    4e94:	ec 01       	movw	r28, r24
    4e96:	68 e2       	ldi	r22, 0x28	; 40
    4e98:	49 df       	rcall	.-366    	; 0x4d2c <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    4e9a:	98 2f       	mov	r25, r24
    4e9c:	93 70       	andi	r25, 0x03	; 3
    4e9e:	93 30       	cpi	r25, 0x03	; 3
    4ea0:	39 f0       	breq	.+14     	; 0x4eb0 <_ZN7MFRC52213PCD_AntennaOnEv+0x20>
    4ea2:	48 2f       	mov	r20, r24
    4ea4:	43 60       	ori	r20, 0x03	; 3
    4ea6:	68 e2       	ldi	r22, 0x28	; 40
    4ea8:	ce 01       	movw	r24, r28
    4eaa:	df 91       	pop	r29
    4eac:	cf 91       	pop	r28
    4eae:	ec ce       	rjmp	.-552    	; 0x4c88 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    4eb0:	df 91       	pop	r29
    4eb2:	cf 91       	pop	r28
    4eb4:	08 95       	ret

00004eb6 <_ZN7MFRC5228PCD_InitEv>:
    4eb6:	cf 93       	push	r28
    4eb8:	df 93       	push	r29
    4eba:	ec 01       	movw	r28, r24
    4ebc:	61 e0       	ldi	r22, 0x01	; 1
    4ebe:	8e 85       	ldd	r24, Y+14	; 0x0e
    4ec0:	0e 94 fe 3a 	call	0x75fc	; 0x75fc <pinMode>
    4ec4:	61 e0       	ldi	r22, 0x01	; 1
    4ec6:	8e 85       	ldd	r24, Y+14	; 0x0e
    4ec8:	0e 94 3a 3b 	call	0x7674	; 0x7674 <digitalWrite>
    4ecc:	8f 85       	ldd	r24, Y+15	; 0x0f
    4ece:	8f 3f       	cpi	r24, 0xFF	; 255
    4ed0:	09 f4       	brne	.+2      	; 0x4ed4 <_ZN7MFRC5228PCD_InitEv+0x1e>
    4ed2:	47 c0       	rjmp	.+142    	; 0x4f62 <_ZN7MFRC5228PCD_InitEv+0xac>
    4ed4:	60 e0       	ldi	r22, 0x00	; 0
    4ed6:	0e 94 fe 3a 	call	0x75fc	; 0x75fc <pinMode>
    4eda:	8f 85       	ldd	r24, Y+15	; 0x0f
    4edc:	0e 94 68 3b 	call	0x76d0	; 0x76d0 <digitalRead>
    4ee0:	89 2b       	or	r24, r25
    4ee2:	09 f0       	breq	.+2      	; 0x4ee6 <_ZN7MFRC5228PCD_InitEv+0x30>
    4ee4:	3e c0       	rjmp	.+124    	; 0x4f62 <_ZN7MFRC5228PCD_InitEv+0xac>
    4ee6:	61 e0       	ldi	r22, 0x01	; 1
    4ee8:	8f 85       	ldd	r24, Y+15	; 0x0f
    4eea:	0e 94 fe 3a 	call	0x75fc	; 0x75fc <pinMode>
    4eee:	60 e0       	ldi	r22, 0x00	; 0
    4ef0:	8f 85       	ldd	r24, Y+15	; 0x0f
    4ef2:	0e 94 3a 3b 	call	0x7674	; 0x7674 <digitalWrite>
    4ef6:	82 e0       	ldi	r24, 0x02	; 2
    4ef8:	90 e0       	ldi	r25, 0x00	; 0
    4efa:	0e 94 51 39 	call	0x72a2	; 0x72a2 <delayMicroseconds>
    4efe:	61 e0       	ldi	r22, 0x01	; 1
    4f00:	8f 85       	ldd	r24, Y+15	; 0x0f
    4f02:	0e 94 3a 3b 	call	0x7674	; 0x7674 <digitalWrite>
    4f06:	62 e3       	ldi	r22, 0x32	; 50
    4f08:	70 e0       	ldi	r23, 0x00	; 0
    4f0a:	80 e0       	ldi	r24, 0x00	; 0
    4f0c:	90 e0       	ldi	r25, 0x00	; 0
    4f0e:	0e 94 18 39 	call	0x7230	; 0x7230 <delay>
    4f12:	40 e0       	ldi	r20, 0x00	; 0
    4f14:	64 e2       	ldi	r22, 0x24	; 36
    4f16:	ce 01       	movw	r24, r28
    4f18:	b7 de       	rcall	.-658    	; 0x4c88 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    4f1a:	40 e0       	ldi	r20, 0x00	; 0
    4f1c:	66 e2       	ldi	r22, 0x26	; 38
    4f1e:	ce 01       	movw	r24, r28
    4f20:	b3 de       	rcall	.-666    	; 0x4c88 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    4f22:	46 e2       	ldi	r20, 0x26	; 38
    4f24:	68 e4       	ldi	r22, 0x48	; 72
    4f26:	ce 01       	movw	r24, r28
    4f28:	af de       	rcall	.-674    	; 0x4c88 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    4f2a:	40 e8       	ldi	r20, 0x80	; 128
    4f2c:	64 e5       	ldi	r22, 0x54	; 84
    4f2e:	ce 01       	movw	r24, r28
    4f30:	ab de       	rcall	.-682    	; 0x4c88 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    4f32:	49 ea       	ldi	r20, 0xA9	; 169
    4f34:	66 e5       	ldi	r22, 0x56	; 86
    4f36:	ce 01       	movw	r24, r28
    4f38:	a7 de       	rcall	.-690    	; 0x4c88 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    4f3a:	43 e0       	ldi	r20, 0x03	; 3
    4f3c:	68 e5       	ldi	r22, 0x58	; 88
    4f3e:	ce 01       	movw	r24, r28
    4f40:	a3 de       	rcall	.-698    	; 0x4c88 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    4f42:	48 ee       	ldi	r20, 0xE8	; 232
    4f44:	6a e5       	ldi	r22, 0x5A	; 90
    4f46:	ce 01       	movw	r24, r28
    4f48:	9f de       	rcall	.-706    	; 0x4c88 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    4f4a:	40 e4       	ldi	r20, 0x40	; 64
    4f4c:	6a e2       	ldi	r22, 0x2A	; 42
    4f4e:	ce 01       	movw	r24, r28
    4f50:	9b de       	rcall	.-714    	; 0x4c88 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    4f52:	4d e3       	ldi	r20, 0x3D	; 61
    4f54:	62 e2       	ldi	r22, 0x22	; 34
    4f56:	ce 01       	movw	r24, r28
    4f58:	97 de       	rcall	.-722    	; 0x4c88 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    4f5a:	ce 01       	movw	r24, r28
    4f5c:	df 91       	pop	r29
    4f5e:	cf 91       	pop	r28
    4f60:	97 cf       	rjmp	.-210    	; 0x4e90 <_ZN7MFRC52213PCD_AntennaOnEv>
    4f62:	ce 01       	movw	r24, r28
    4f64:	7c df       	rcall	.-264    	; 0x4e5e <_ZN7MFRC5229PCD_ResetEv>
    4f66:	d5 cf       	rjmp	.-86     	; 0x4f12 <_ZN7MFRC5228PCD_InitEv+0x5c>

00004f68 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>:
    4f68:	2f 92       	push	r2
    4f6a:	3f 92       	push	r3
    4f6c:	4f 92       	push	r4
    4f6e:	5f 92       	push	r5
    4f70:	6f 92       	push	r6
    4f72:	7f 92       	push	r7
    4f74:	8f 92       	push	r8
    4f76:	9f 92       	push	r9
    4f78:	af 92       	push	r10
    4f7a:	bf 92       	push	r11
    4f7c:	cf 92       	push	r12
    4f7e:	df 92       	push	r13
    4f80:	ef 92       	push	r14
    4f82:	ff 92       	push	r15
    4f84:	0f 93       	push	r16
    4f86:	1f 93       	push	r17
    4f88:	cf 93       	push	r28
    4f8a:	df 93       	push	r29
    4f8c:	1f 92       	push	r1
    4f8e:	1f 92       	push	r1
    4f90:	cd b7       	in	r28, 0x3d	; 61
    4f92:	de b7       	in	r29, 0x3e	; 62
    4f94:	3c 01       	movw	r6, r24
    4f96:	16 2f       	mov	r17, r22
    4f98:	94 2e       	mov	r9, r20
    4f9a:	29 01       	movw	r4, r18
    4f9c:	a1 14       	cp	r10, r1
    4f9e:	b1 04       	cpc	r11, r1
    4fa0:	19 f0       	breq	.+6      	; 0x4fa8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x40>
    4fa2:	f5 01       	movw	r30, r10
    4fa4:	40 81       	ld	r20, Z
    4fa6:	01 c0       	rjmp	.+2      	; 0x4faa <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x42>
    4fa8:	40 e0       	ldi	r20, 0x00	; 0
    4faa:	34 2e       	mov	r3, r20
    4fac:	f0 e1       	ldi	r31, 0x10	; 16
    4fae:	8f 9e       	mul	r8, r31
    4fb0:	30 0c       	add	r3, r0
    4fb2:	11 24       	eor	r1, r1
    4fb4:	40 e0       	ldi	r20, 0x00	; 0
    4fb6:	62 e0       	ldi	r22, 0x02	; 2
    4fb8:	c3 01       	movw	r24, r6
    4fba:	66 de       	rcall	.-820    	; 0x4c88 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    4fbc:	4f e7       	ldi	r20, 0x7F	; 127
    4fbe:	68 e0       	ldi	r22, 0x08	; 8
    4fc0:	c3 01       	movw	r24, r6
    4fc2:	62 de       	rcall	.-828    	; 0x4c88 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    4fc4:	40 e8       	ldi	r20, 0x80	; 128
    4fc6:	64 e1       	ldi	r22, 0x14	; 20
    4fc8:	c3 01       	movw	r24, r6
    4fca:	5e de       	rcall	.-836    	; 0x4c88 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    4fcc:	92 01       	movw	r18, r4
    4fce:	40 2f       	mov	r20, r16
    4fd0:	62 e1       	ldi	r22, 0x12	; 18
    4fd2:	c3 01       	movw	r24, r6
    4fd4:	78 de       	rcall	.-784    	; 0x4cc6 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEhPh>
    4fd6:	43 2d       	mov	r20, r3
    4fd8:	6a e1       	ldi	r22, 0x1A	; 26
    4fda:	c3 01       	movw	r24, r6
    4fdc:	55 de       	rcall	.-854    	; 0x4c88 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    4fde:	41 2f       	mov	r20, r17
    4fe0:	62 e0       	ldi	r22, 0x02	; 2
    4fe2:	c3 01       	movw	r24, r6
    4fe4:	51 de       	rcall	.-862    	; 0x4c88 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    4fe6:	1c 30       	cpi	r17, 0x0C	; 12
    4fe8:	21 f4       	brne	.+8      	; 0x4ff2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x8a>
    4fea:	40 e8       	ldi	r20, 0x80	; 128
    4fec:	6a e1       	ldi	r22, 0x1A	; 26
    4fee:	c3 01       	movw	r24, r6
    4ff0:	c2 de       	rcall	.-636    	; 0x4d76 <_ZN7MFRC52222PCD_SetRegisterBitMaskENS_12PCD_RegisterEh>
    4ff2:	0e 94 e7 38 	call	0x71ce	; 0x71ce <millis>
    4ff6:	1b 01       	movw	r2, r22
    4ff8:	2c 01       	movw	r4, r24
    4ffa:	24 e2       	ldi	r18, 0x24	; 36
    4ffc:	22 0e       	add	r2, r18
    4ffe:	31 1c       	adc	r3, r1
    5000:	41 1c       	adc	r4, r1
    5002:	51 1c       	adc	r5, r1
    5004:	68 e0       	ldi	r22, 0x08	; 8
    5006:	c3 01       	movw	r24, r6
    5008:	91 de       	rcall	.-734    	; 0x4d2c <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    500a:	98 2f       	mov	r25, r24
    500c:	99 21       	and	r25, r9
    500e:	71 f4       	brne	.+28     	; 0x502c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xc4>
    5010:	80 ff       	sbrs	r24, 0
    5012:	02 c0       	rjmp	.+4      	; 0x5018 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xb0>
    5014:	83 e0       	ldi	r24, 0x03	; 3
    5016:	6a c0       	rjmp	.+212    	; 0x50ec <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x184>
    5018:	0e 94 89 36 	call	0x6d12	; 0x6d12 <yield>
    501c:	0e 94 e7 38 	call	0x71ce	; 0x71ce <millis>
    5020:	62 15       	cp	r22, r2
    5022:	73 05       	cpc	r23, r3
    5024:	84 05       	cpc	r24, r4
    5026:	95 05       	cpc	r25, r5
    5028:	68 f3       	brcs	.-38     	; 0x5004 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x9c>
    502a:	f4 cf       	rjmp	.-24     	; 0x5014 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xac>
    502c:	6c e0       	ldi	r22, 0x0C	; 12
    502e:	c3 01       	movw	r24, r6
    5030:	7d de       	rcall	.-774    	; 0x4d2c <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    5032:	18 2f       	mov	r17, r24
    5034:	83 71       	andi	r24, 0x13	; 19
    5036:	09 f0       	breq	.+2      	; 0x503a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xd2>
    5038:	56 c0       	rjmp	.+172    	; 0x50e6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x17e>
    503a:	e1 14       	cp	r14, r1
    503c:	f1 04       	cpc	r15, r1
    503e:	e1 f0       	breq	.+56     	; 0x5078 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x110>
    5040:	c1 14       	cp	r12, r1
    5042:	d1 04       	cpc	r13, r1
    5044:	c9 f0       	breq	.+50     	; 0x5078 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x110>
    5046:	64 e1       	ldi	r22, 0x14	; 20
    5048:	c3 01       	movw	r24, r6
    504a:	70 de       	rcall	.-800    	; 0x4d2c <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    504c:	f6 01       	movw	r30, r12
    504e:	90 81       	ld	r25, Z
    5050:	98 17       	cp	r25, r24
    5052:	08 f4       	brcc	.+2      	; 0x5056 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xee>
    5054:	42 c0       	rjmp	.+132    	; 0x50da <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x172>
    5056:	80 83       	st	Z, r24
    5058:	08 2d       	mov	r16, r8
    505a:	97 01       	movw	r18, r14
    505c:	48 2f       	mov	r20, r24
    505e:	62 e1       	ldi	r22, 0x12	; 18
    5060:	c3 01       	movw	r24, r6
    5062:	84 de       	rcall	.-760    	; 0x4d6c <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh>
    5064:	68 e1       	ldi	r22, 0x18	; 24
    5066:	c3 01       	movw	r24, r6
    5068:	61 de       	rcall	.-830    	; 0x4d2c <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    506a:	87 70       	andi	r24, 0x07	; 7
    506c:	a1 14       	cp	r10, r1
    506e:	b1 04       	cpc	r11, r1
    5070:	21 f0       	breq	.+8      	; 0x507a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x112>
    5072:	f5 01       	movw	r30, r10
    5074:	80 83       	st	Z, r24
    5076:	01 c0       	rjmp	.+2      	; 0x507a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x112>
    5078:	80 e0       	ldi	r24, 0x00	; 0
    507a:	13 fd       	sbrc	r17, 3
    507c:	30 c0       	rjmp	.+96     	; 0x50de <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x176>
    507e:	e1 14       	cp	r14, r1
    5080:	f1 04       	cpc	r15, r1
    5082:	79 f1       	breq	.+94     	; 0x50e2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x17a>
    5084:	c1 14       	cp	r12, r1
    5086:	d1 04       	cpc	r13, r1
    5088:	61 f1       	breq	.+88     	; 0x50e2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x17a>
    508a:	98 8d       	ldd	r25, Y+24	; 0x18
    508c:	99 23       	and	r25, r25
    508e:	49 f1       	breq	.+82     	; 0x50e2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x17a>
    5090:	f6 01       	movw	r30, r12
    5092:	40 81       	ld	r20, Z
    5094:	41 30       	cpi	r20, 0x01	; 1
    5096:	21 f4       	brne	.+8      	; 0x50a0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x138>
    5098:	84 30       	cpi	r24, 0x04	; 4
    509a:	39 f5       	brne	.+78     	; 0x50ea <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x182>
    509c:	8f ef       	ldi	r24, 0xFF	; 255
    509e:	26 c0       	rjmp	.+76     	; 0x50ec <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x184>
    50a0:	42 30       	cpi	r20, 0x02	; 2
    50a2:	18 f1       	brcs	.+70     	; 0x50ea <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x182>
    50a4:	81 11       	cpse	r24, r1
    50a6:	21 c0       	rjmp	.+66     	; 0x50ea <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x182>
    50a8:	42 50       	subi	r20, 0x02	; 2
    50aa:	9e 01       	movw	r18, r28
    50ac:	2f 5f       	subi	r18, 0xFF	; 255
    50ae:	3f 4f       	sbci	r19, 0xFF	; 255
    50b0:	b7 01       	movw	r22, r14
    50b2:	c3 01       	movw	r24, r6
    50b4:	83 de       	rcall	.-762    	; 0x4dbc <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
    50b6:	81 11       	cpse	r24, r1
    50b8:	19 c0       	rjmp	.+50     	; 0x50ec <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x184>
    50ba:	f6 01       	movw	r30, r12
    50bc:	80 81       	ld	r24, Z
    50be:	e8 0e       	add	r14, r24
    50c0:	f1 1c       	adc	r15, r1
    50c2:	f7 01       	movw	r30, r14
    50c4:	32 97       	sbiw	r30, 0x02	; 2
    50c6:	90 81       	ld	r25, Z
    50c8:	89 81       	ldd	r24, Y+1	; 0x01
    50ca:	98 13       	cpse	r25, r24
    50cc:	0e c0       	rjmp	.+28     	; 0x50ea <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x182>
    50ce:	31 96       	adiw	r30, 0x01	; 1
    50d0:	90 81       	ld	r25, Z
    50d2:	8a 81       	ldd	r24, Y+2	; 0x02
    50d4:	98 13       	cpse	r25, r24
    50d6:	09 c0       	rjmp	.+18     	; 0x50ea <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x182>
    50d8:	04 c0       	rjmp	.+8      	; 0x50e2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x17a>
    50da:	84 e0       	ldi	r24, 0x04	; 4
    50dc:	07 c0       	rjmp	.+14     	; 0x50ec <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x184>
    50de:	82 e0       	ldi	r24, 0x02	; 2
    50e0:	05 c0       	rjmp	.+10     	; 0x50ec <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x184>
    50e2:	80 e0       	ldi	r24, 0x00	; 0
    50e4:	03 c0       	rjmp	.+6      	; 0x50ec <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x184>
    50e6:	81 e0       	ldi	r24, 0x01	; 1
    50e8:	01 c0       	rjmp	.+2      	; 0x50ec <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x184>
    50ea:	87 e0       	ldi	r24, 0x07	; 7
    50ec:	0f 90       	pop	r0
    50ee:	0f 90       	pop	r0
    50f0:	df 91       	pop	r29
    50f2:	cf 91       	pop	r28
    50f4:	1f 91       	pop	r17
    50f6:	0f 91       	pop	r16
    50f8:	ff 90       	pop	r15
    50fa:	ef 90       	pop	r14
    50fc:	df 90       	pop	r13
    50fe:	cf 90       	pop	r12
    5100:	bf 90       	pop	r11
    5102:	af 90       	pop	r10
    5104:	9f 90       	pop	r9
    5106:	8f 90       	pop	r8
    5108:	7f 90       	pop	r7
    510a:	6f 90       	pop	r6
    510c:	5f 90       	pop	r5
    510e:	4f 90       	pop	r4
    5110:	3f 90       	pop	r3
    5112:	2f 90       	pop	r2
    5114:	08 95       	ret

00005116 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>:
    5116:	8f 92       	push	r8
    5118:	af 92       	push	r10
    511a:	bf 92       	push	r11
    511c:	cf 92       	push	r12
    511e:	df 92       	push	r13
    5120:	ef 92       	push	r14
    5122:	ff 92       	push	r15
    5124:	0f 93       	push	r16
    5126:	1f 93       	push	r17
    5128:	af 92       	push	r10
    512a:	8c 2c       	mov	r8, r12
    512c:	57 01       	movw	r10, r14
    512e:	68 01       	movw	r12, r16
    5130:	79 01       	movw	r14, r18
    5132:	04 2f       	mov	r16, r20
    5134:	9b 01       	movw	r18, r22
    5136:	40 e3       	ldi	r20, 0x30	; 48
    5138:	6c e0       	ldi	r22, 0x0C	; 12
    513a:	16 df       	rcall	.-468    	; 0x4f68 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
    513c:	0f 90       	pop	r0
    513e:	1f 91       	pop	r17
    5140:	0f 91       	pop	r16
    5142:	ff 90       	pop	r15
    5144:	ef 90       	pop	r14
    5146:	df 90       	pop	r13
    5148:	cf 90       	pop	r12
    514a:	bf 90       	pop	r11
    514c:	af 90       	pop	r10
    514e:	8f 90       	pop	r8
    5150:	08 95       	ret

00005152 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>:
    5152:	2f 92       	push	r2
    5154:	3f 92       	push	r3
    5156:	4f 92       	push	r4
    5158:	5f 92       	push	r5
    515a:	6f 92       	push	r6
    515c:	7f 92       	push	r7
    515e:	8f 92       	push	r8
    5160:	9f 92       	push	r9
    5162:	af 92       	push	r10
    5164:	bf 92       	push	r11
    5166:	cf 92       	push	r12
    5168:	df 92       	push	r13
    516a:	ef 92       	push	r14
    516c:	ff 92       	push	r15
    516e:	0f 93       	push	r16
    5170:	1f 93       	push	r17
    5172:	cf 93       	push	r28
    5174:	df 93       	push	r29
    5176:	cd b7       	in	r28, 0x3d	; 61
    5178:	de b7       	in	r29, 0x3e	; 62
    517a:	2c 97       	sbiw	r28, 0x0c	; 12
    517c:	0f b6       	in	r0, 0x3f	; 63
    517e:	f8 94       	cli
    5180:	de bf       	out	0x3e, r29	; 62
    5182:	0f be       	out	0x3f, r0	; 63
    5184:	cd bf       	out	0x3d, r28	; 61
    5186:	41 35       	cpi	r20, 0x51	; 81
    5188:	08 f0       	brcs	.+2      	; 0x518c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3a>
    518a:	00 c1       	rjmp	.+512    	; 0x538c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x23a>
    518c:	34 2e       	mov	r3, r20
    518e:	3b 01       	movw	r6, r22
    5190:	4c 01       	movw	r8, r24
    5192:	40 e8       	ldi	r20, 0x80	; 128
    5194:	6c e1       	ldi	r22, 0x1C	; 28
    5196:	00 de       	rcall	.-1024   	; 0x4d98 <_ZN7MFRC52224PCD_ClearRegisterBitMaskENS_12PCD_RegisterEh>
    5198:	22 24       	eor	r2, r2
    519a:	23 94       	inc	r2
    519c:	32 e0       	ldi	r19, 0x02	; 2
    519e:	23 16       	cp	r2, r19
    51a0:	91 f0       	breq	.+36     	; 0x51c6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x74>
    51a2:	83 e0       	ldi	r24, 0x03	; 3
    51a4:	28 16       	cp	r2, r24
    51a6:	e1 f0       	breq	.+56     	; 0x51e0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x8e>
    51a8:	91 e0       	ldi	r25, 0x01	; 1
    51aa:	29 12       	cpse	r2, r25
    51ac:	f3 c0       	rjmp	.+486    	; 0x5394 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x242>
    51ae:	83 e9       	ldi	r24, 0x93	; 147
    51b0:	89 83       	std	Y+1, r24	; 0x01
    51b2:	33 20       	and	r3, r3
    51b4:	d1 f0       	breq	.+52     	; 0x51ea <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x98>
    51b6:	81 e0       	ldi	r24, 0x01	; 1
    51b8:	f3 01       	movw	r30, r6
    51ba:	90 81       	ld	r25, Z
    51bc:	95 30       	cpi	r25, 0x05	; 5
    51be:	08 f4       	brcc	.+2      	; 0x51c2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x70>
    51c0:	80 e0       	ldi	r24, 0x00	; 0
    51c2:	b1 2c       	mov	r11, r1
    51c4:	17 c0       	rjmp	.+46     	; 0x51f4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa2>
    51c6:	f5 e9       	ldi	r31, 0x95	; 149
    51c8:	f9 83       	std	Y+1, r31	; 0x01
    51ca:	33 20       	and	r3, r3
    51cc:	81 f0       	breq	.+32     	; 0x51ee <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x9c>
    51ce:	81 e0       	ldi	r24, 0x01	; 1
    51d0:	f3 01       	movw	r30, r6
    51d2:	90 81       	ld	r25, Z
    51d4:	98 30       	cpi	r25, 0x08	; 8
    51d6:	08 f4       	brcc	.+2      	; 0x51da <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x88>
    51d8:	80 e0       	ldi	r24, 0x00	; 0
    51da:	43 e0       	ldi	r20, 0x03	; 3
    51dc:	b4 2e       	mov	r11, r20
    51de:	0a c0       	rjmp	.+20     	; 0x51f4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa2>
    51e0:	87 e9       	ldi	r24, 0x97	; 151
    51e2:	89 83       	std	Y+1, r24	; 0x01
    51e4:	36 e0       	ldi	r19, 0x06	; 6
    51e6:	b3 2e       	mov	r11, r19
    51e8:	04 c0       	rjmp	.+8      	; 0x51f2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa0>
    51ea:	b1 2c       	mov	r11, r1
    51ec:	02 c0       	rjmp	.+4      	; 0x51f2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa0>
    51ee:	23 e0       	ldi	r18, 0x03	; 3
    51f0:	b2 2e       	mov	r11, r18
    51f2:	80 e0       	ldi	r24, 0x00	; 0
    51f4:	d3 2c       	mov	r13, r3
    51f6:	f8 e0       	ldi	r31, 0x08	; 8
    51f8:	bf 9e       	mul	r11, r31
    51fa:	d0 18       	sub	r13, r0
    51fc:	11 24       	eor	r1, r1
    51fe:	d7 fc       	sbrc	r13, 7
    5200:	d1 2c       	mov	r13, r1
    5202:	88 23       	and	r24, r24
    5204:	21 f0       	breq	.+8      	; 0x520e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xbc>
    5206:	98 e8       	ldi	r25, 0x88	; 136
    5208:	9b 83       	std	Y+3, r25	; 0x03
    520a:	33 e0       	ldi	r19, 0x03	; 3
    520c:	01 c0       	rjmp	.+2      	; 0x5210 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xbe>
    520e:	32 e0       	ldi	r19, 0x02	; 2
    5210:	21 e0       	ldi	r18, 0x01	; 1
    5212:	9d 2d       	mov	r25, r13
    5214:	97 70       	andi	r25, 0x07	; 7
    5216:	09 f4       	brne	.+2      	; 0x521a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xc8>
    5218:	20 e0       	ldi	r18, 0x00	; 0
    521a:	9d 2d       	mov	r25, r13
    521c:	95 95       	asr	r25
    521e:	95 95       	asr	r25
    5220:	95 95       	asr	r25
    5222:	29 0f       	add	r18, r25
    5224:	31 f4       	brne	.+12     	; 0x5232 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xe0>
    5226:	88 23       	and	r24, r24
    5228:	09 f4       	brne	.+2      	; 0x522c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xda>
    522a:	8d c0       	rjmp	.+282    	; 0x5346 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1f4>
    522c:	38 e0       	ldi	r19, 0x08	; 8
    522e:	d3 0e       	add	r13, r19
    5230:	8a c0       	rjmp	.+276    	; 0x5346 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1f4>
    5232:	81 11       	cpse	r24, r1
    5234:	02 c0       	rjmp	.+4      	; 0x523a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xe8>
    5236:	94 e0       	ldi	r25, 0x04	; 4
    5238:	01 c0       	rjmp	.+2      	; 0x523c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xea>
    523a:	93 e0       	ldi	r25, 0x03	; 3
    523c:	29 17       	cp	r18, r25
    523e:	08 f4       	brcc	.+2      	; 0x5242 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xf0>
    5240:	92 2f       	mov	r25, r18
    5242:	eb 2d       	mov	r30, r11
    5244:	f0 e0       	ldi	r31, 0x00	; 0
    5246:	31 96       	adiw	r30, 0x01	; 1
    5248:	e6 0d       	add	r30, r6
    524a:	f7 1d       	adc	r31, r7
    524c:	23 2f       	mov	r18, r19
    524e:	41 91       	ld	r20, Z+
    5250:	a1 e0       	ldi	r26, 0x01	; 1
    5252:	b0 e0       	ldi	r27, 0x00	; 0
    5254:	ac 0f       	add	r26, r28
    5256:	bd 1f       	adc	r27, r29
    5258:	a2 0f       	add	r26, r18
    525a:	b1 1d       	adc	r27, r1
    525c:	4c 93       	st	X, r20
    525e:	2f 5f       	subi	r18, 0xFF	; 255
    5260:	42 2f       	mov	r20, r18
    5262:	43 1b       	sub	r20, r19
    5264:	49 17       	cp	r20, r25
    5266:	98 f3       	brcs	.-26     	; 0x524e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xfc>
    5268:	de cf       	rjmp	.-68     	; 0x5226 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xd4>
    526a:	81 11       	cpse	r24, r1
    526c:	d8 c0       	rjmp	.+432    	; 0x541e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2cc>
    526e:	9f e1       	ldi	r25, 0x1F	; 31
    5270:	9d 15       	cp	r25, r13
    5272:	0c f4       	brge	.+2      	; 0x5276 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x124>
    5274:	91 c0       	rjmp	.+290    	; 0x5398 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x246>
    5276:	80 e2       	ldi	r24, 0x20	; 32
    5278:	d8 2e       	mov	r13, r24
    527a:	90 e7       	ldi	r25, 0x70	; 112
    527c:	9a 83       	std	Y+2, r25	; 0x02
    527e:	9b 81       	ldd	r25, Y+3	; 0x03
    5280:	8c 81       	ldd	r24, Y+4	; 0x04
    5282:	89 27       	eor	r24, r25
    5284:	9d 81       	ldd	r25, Y+5	; 0x05
    5286:	89 27       	eor	r24, r25
    5288:	9e 81       	ldd	r25, Y+6	; 0x06
    528a:	89 27       	eor	r24, r25
    528c:	8f 83       	std	Y+7, r24	; 0x07
    528e:	9e 01       	movw	r18, r28
    5290:	28 5f       	subi	r18, 0xF8	; 248
    5292:	3f 4f       	sbci	r19, 0xFF	; 255
    5294:	47 e0       	ldi	r20, 0x07	; 7
    5296:	be 01       	movw	r22, r28
    5298:	6f 5f       	subi	r22, 0xFF	; 255
    529a:	7f 4f       	sbci	r23, 0xFF	; 255
    529c:	c4 01       	movw	r24, r8
    529e:	8e dd       	rcall	.-1252   	; 0x4dbc <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
    52a0:	81 11       	cpse	r24, r1
    52a2:	bd c0       	rjmp	.+378    	; 0x541e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2cc>
    52a4:	1b 86       	std	Y+11, r1	; 0x0b
    52a6:	e3 e0       	ldi	r30, 0x03	; 3
    52a8:	ea 87       	std	Y+10, r30	; 0x0a
    52aa:	ce 01       	movw	r24, r28
    52ac:	07 96       	adiw	r24, 0x07	; 7
    52ae:	2c 01       	movw	r4, r24
    52b0:	99 e0       	ldi	r25, 0x09	; 9
    52b2:	9c 87       	std	Y+12, r25	; 0x0c
    52b4:	cb 84       	ldd	r12, Y+11	; 0x0b
    52b6:	4c 2d       	mov	r20, r12
    52b8:	42 95       	swap	r20
    52ba:	40 7f       	andi	r20, 0xF0	; 240
    52bc:	4c 0d       	add	r20, r12
    52be:	6a e1       	ldi	r22, 0x1A	; 26
    52c0:	c4 01       	movw	r24, r8
    52c2:	e2 dc       	rcall	.-1596   	; 0x4c88 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    52c4:	a1 2c       	mov	r10, r1
    52c6:	ce 01       	movw	r24, r28
    52c8:	0b 96       	adiw	r24, 0x0b	; 11
    52ca:	7c 01       	movw	r14, r24
    52cc:	8e 01       	movw	r16, r28
    52ce:	06 5f       	subi	r16, 0xF6	; 246
    52d0:	1f 4f       	sbci	r17, 0xFF	; 255
    52d2:	92 01       	movw	r18, r4
    52d4:	4c 85       	ldd	r20, Y+12	; 0x0c
    52d6:	be 01       	movw	r22, r28
    52d8:	6f 5f       	subi	r22, 0xFF	; 255
    52da:	7f 4f       	sbci	r23, 0xFF	; 255
    52dc:	c4 01       	movw	r24, r8
    52de:	1b df       	rcall	.-458    	; 0x5116 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
    52e0:	82 30       	cpi	r24, 0x02	; 2
    52e2:	09 f0       	breq	.+2      	; 0x52e6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x194>
    52e4:	c2 cf       	rjmp	.-124    	; 0x526a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x118>
    52e6:	6c e1       	ldi	r22, 0x1C	; 28
    52e8:	c4 01       	movw	r24, r8
    52ea:	20 dd       	rcall	.-1472   	; 0x4d2c <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    52ec:	85 fd       	sbrc	r24, 5
    52ee:	50 c0       	rjmp	.+160    	; 0x5390 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x23e>
    52f0:	8f 71       	andi	r24, 0x1F	; 31
    52f2:	09 f4       	brne	.+2      	; 0x52f6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a4>
    52f4:	80 e2       	ldi	r24, 0x20	; 32
    52f6:	28 2f       	mov	r18, r24
    52f8:	30 e0       	ldi	r19, 0x00	; 0
    52fa:	4d 2d       	mov	r20, r13
    52fc:	dd 0c       	add	r13, r13
    52fe:	55 0b       	sbc	r21, r21
    5300:	42 17       	cp	r20, r18
    5302:	53 07       	cpc	r21, r19
    5304:	0c f0       	brlt	.+2      	; 0x5308 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1b6>
    5306:	46 c0       	rjmp	.+140    	; 0x5394 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x242>
    5308:	d8 2e       	mov	r13, r24
    530a:	85 95       	asr	r24
    530c:	85 95       	asr	r24
    530e:	85 95       	asr	r24
    5310:	91 e0       	ldi	r25, 0x01	; 1
    5312:	98 0f       	add	r25, r24
    5314:	42 2f       	mov	r20, r18
    5316:	47 70       	andi	r20, 0x07	; 7
    5318:	81 e0       	ldi	r24, 0x01	; 1
    531a:	09 f4       	brne	.+2      	; 0x531e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1cc>
    531c:	80 e0       	ldi	r24, 0x00	; 0
    531e:	89 0f       	add	r24, r25
    5320:	e1 e0       	ldi	r30, 0x01	; 1
    5322:	f0 e0       	ldi	r31, 0x00	; 0
    5324:	ec 0f       	add	r30, r28
    5326:	fd 1f       	adc	r31, r29
    5328:	e8 0f       	add	r30, r24
    532a:	f1 1d       	adc	r31, r1
    532c:	21 50       	subi	r18, 0x01	; 1
    532e:	31 09       	sbc	r19, r1
    5330:	27 70       	andi	r18, 0x07	; 7
    5332:	33 27       	eor	r19, r19
    5334:	81 e0       	ldi	r24, 0x01	; 1
    5336:	90 e0       	ldi	r25, 0x00	; 0
    5338:	01 c0       	rjmp	.+2      	; 0x533c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1ea>
    533a:	88 0f       	add	r24, r24
    533c:	2a 95       	dec	r18
    533e:	ea f7       	brpl	.-6      	; 0x533a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1e8>
    5340:	90 81       	ld	r25, Z
    5342:	89 2b       	or	r24, r25
    5344:	80 83       	st	Z, r24
    5346:	8f e1       	ldi	r24, 0x1F	; 31
    5348:	8d 15       	cp	r24, r13
    534a:	0c f4       	brge	.+2      	; 0x534e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1fc>
    534c:	96 cf       	rjmp	.-212    	; 0x527a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x128>
    534e:	9d 2d       	mov	r25, r13
    5350:	97 70       	andi	r25, 0x07	; 7
    5352:	9b 87       	std	Y+11, r25	; 0x0b
    5354:	8d 2d       	mov	r24, r13
    5356:	85 95       	asr	r24
    5358:	85 95       	asr	r24
    535a:	85 95       	asr	r24
    535c:	8e 5f       	subi	r24, 0xFE	; 254
    535e:	29 2f       	mov	r18, r25
    5360:	e0 e1       	ldi	r30, 0x10	; 16
    5362:	8e 9f       	mul	r24, r30
    5364:	20 0d       	add	r18, r0
    5366:	11 24       	eor	r1, r1
    5368:	2a 83       	std	Y+2, r18	; 0x02
    536a:	21 e0       	ldi	r18, 0x01	; 1
    536c:	91 11       	cpse	r25, r1
    536e:	01 c0       	rjmp	.+2      	; 0x5372 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x220>
    5370:	20 e0       	ldi	r18, 0x00	; 0
    5372:	28 0f       	add	r18, r24
    5374:	2c 87       	std	Y+12, r18	; 0x0c
    5376:	44 24       	eor	r4, r4
    5378:	43 94       	inc	r4
    537a:	51 2c       	mov	r5, r1
    537c:	4c 0e       	add	r4, r28
    537e:	5d 1e       	adc	r5, r29
    5380:	48 0e       	add	r4, r24
    5382:	51 1c       	adc	r5, r1
    5384:	f9 e0       	ldi	r31, 0x09	; 9
    5386:	f8 1b       	sub	r31, r24
    5388:	fa 87       	std	Y+10, r31	; 0x0a
    538a:	94 cf       	rjmp	.-216    	; 0x52b4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x162>
    538c:	86 e0       	ldi	r24, 0x06	; 6
    538e:	47 c0       	rjmp	.+142    	; 0x541e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2cc>
    5390:	82 e0       	ldi	r24, 0x02	; 2
    5392:	45 c0       	rjmp	.+138    	; 0x541e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2cc>
    5394:	85 e0       	ldi	r24, 0x05	; 5
    5396:	43 c0       	rjmp	.+134    	; 0x541e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2cc>
    5398:	8b 81       	ldd	r24, Y+3	; 0x03
    539a:	88 38       	cpi	r24, 0x88	; 136
    539c:	e9 f1       	breq	.+122    	; 0x5418 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2c6>
    539e:	82 e0       	ldi	r24, 0x02	; 2
    53a0:	94 e0       	ldi	r25, 0x04	; 4
    53a2:	eb 2d       	mov	r30, r11
    53a4:	f0 e0       	ldi	r31, 0x00	; 0
    53a6:	31 96       	adiw	r30, 0x01	; 1
    53a8:	e6 0d       	add	r30, r6
    53aa:	f7 1d       	adc	r31, r7
    53ac:	98 0f       	add	r25, r24
    53ae:	a1 e0       	ldi	r26, 0x01	; 1
    53b0:	b0 e0       	ldi	r27, 0x00	; 0
    53b2:	ac 0f       	add	r26, r28
    53b4:	bd 1f       	adc	r27, r29
    53b6:	a8 0f       	add	r26, r24
    53b8:	b1 1d       	adc	r27, r1
    53ba:	2c 91       	ld	r18, X
    53bc:	21 93       	st	Z+, r18
    53be:	8f 5f       	subi	r24, 0xFF	; 255
    53c0:	98 13       	cpse	r25, r24
    53c2:	f5 cf       	rjmp	.-22     	; 0x53ae <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x25c>
    53c4:	8a 85       	ldd	r24, Y+10	; 0x0a
    53c6:	83 30       	cpi	r24, 0x03	; 3
    53c8:	19 f5       	brne	.+70     	; 0x5410 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2be>
    53ca:	8b 85       	ldd	r24, Y+11	; 0x0b
    53cc:	81 11       	cpse	r24, r1
    53ce:	20 c0       	rjmp	.+64     	; 0x5410 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2be>
    53d0:	9e 01       	movw	r18, r28
    53d2:	2d 5f       	subi	r18, 0xFD	; 253
    53d4:	3f 4f       	sbci	r19, 0xFF	; 255
    53d6:	41 e0       	ldi	r20, 0x01	; 1
    53d8:	b2 01       	movw	r22, r4
    53da:	c4 01       	movw	r24, r8
    53dc:	ef dc       	rcall	.-1570   	; 0x4dbc <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
    53de:	81 11       	cpse	r24, r1
    53e0:	1e c0       	rjmp	.+60     	; 0x541e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2cc>
    53e2:	9b 81       	ldd	r25, Y+3	; 0x03
    53e4:	f2 01       	movw	r30, r4
    53e6:	81 81       	ldd	r24, Z+1	; 0x01
    53e8:	98 13       	cpse	r25, r24
    53ea:	14 c0       	rjmp	.+40     	; 0x5414 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2c2>
    53ec:	9c 81       	ldd	r25, Y+4	; 0x04
    53ee:	82 81       	ldd	r24, Z+2	; 0x02
    53f0:	98 13       	cpse	r25, r24
    53f2:	10 c0       	rjmp	.+32     	; 0x5414 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2c2>
    53f4:	80 81       	ld	r24, Z
    53f6:	82 ff       	sbrs	r24, 2
    53f8:	02 c0       	rjmp	.+4      	; 0x53fe <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2ac>
    53fa:	23 94       	inc	r2
    53fc:	cf ce       	rjmp	.-610    	; 0x519c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x4a>
    53fe:	f3 01       	movw	r30, r6
    5400:	83 87       	std	Z+11, r24	; 0x0b
    5402:	82 2d       	mov	r24, r2
    5404:	88 0f       	add	r24, r24
    5406:	82 0d       	add	r24, r2
    5408:	8f 5f       	subi	r24, 0xFF	; 255
    540a:	80 83       	st	Z, r24
    540c:	80 e0       	ldi	r24, 0x00	; 0
    540e:	07 c0       	rjmp	.+14     	; 0x541e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2cc>
    5410:	81 e0       	ldi	r24, 0x01	; 1
    5412:	05 c0       	rjmp	.+10     	; 0x541e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2cc>
    5414:	87 e0       	ldi	r24, 0x07	; 7
    5416:	03 c0       	rjmp	.+6      	; 0x541e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2cc>
    5418:	83 e0       	ldi	r24, 0x03	; 3
    541a:	93 e0       	ldi	r25, 0x03	; 3
    541c:	c2 cf       	rjmp	.-124    	; 0x53a2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x250>
    541e:	2c 96       	adiw	r28, 0x0c	; 12
    5420:	0f b6       	in	r0, 0x3f	; 63
    5422:	f8 94       	cli
    5424:	de bf       	out	0x3e, r29	; 62
    5426:	0f be       	out	0x3f, r0	; 63
    5428:	cd bf       	out	0x3d, r28	; 61
    542a:	df 91       	pop	r29
    542c:	cf 91       	pop	r28
    542e:	1f 91       	pop	r17
    5430:	0f 91       	pop	r16
    5432:	ff 90       	pop	r15
    5434:	ef 90       	pop	r14
    5436:	df 90       	pop	r13
    5438:	cf 90       	pop	r12
    543a:	bf 90       	pop	r11
    543c:	af 90       	pop	r10
    543e:	9f 90       	pop	r9
    5440:	8f 90       	pop	r8
    5442:	7f 90       	pop	r7
    5444:	6f 90       	pop	r6
    5446:	5f 90       	pop	r5
    5448:	4f 90       	pop	r4
    544a:	3f 90       	pop	r3
    544c:	2f 90       	pop	r2
    544e:	08 95       	ret

00005450 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>:
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */ 
MFRC522::StatusCode MFRC522::PICC_REQA_or_WUPA(	byte command, 		///< The command to send - PICC_CMD_REQA or PICC_CMD_WUPA
												byte *bufferATQA,	///< The buffer to store the ATQA (Answer to request) in
												byte *bufferSize	///< Buffer size, at least two bytes. Also number of bytes returned if STATUS_OK.
											) {
    5450:	4f 92       	push	r4
    5452:	5f 92       	push	r5
    5454:	6f 92       	push	r6
    5456:	7f 92       	push	r7
    5458:	8f 92       	push	r8
    545a:	9f 92       	push	r9
    545c:	af 92       	push	r10
    545e:	cf 92       	push	r12
    5460:	ef 92       	push	r14
    5462:	ff 92       	push	r15
    5464:	0f 93       	push	r16
    5466:	1f 93       	push	r17
    5468:	cf 93       	push	r28
    546a:	df 93       	push	r29
    546c:	1f 92       	push	r1
    546e:	1f 92       	push	r1
    5470:	cd b7       	in	r28, 0x3d	; 61
    5472:	de b7       	in	r29, 0x3e	; 62
    5474:	6a 83       	std	Y+2, r22	; 0x02
	byte validBits;
	MFRC522::StatusCode status;
	
	if (bufferATQA == nullptr || *bufferSize < 2) {	// The ATQA response is 2 bytes long.
    5476:	41 15       	cp	r20, r1
    5478:	51 05       	cpc	r21, r1
    547a:	29 f1       	breq	.+74     	; 0x54c6 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x76>
    547c:	f9 01       	movw	r30, r18
    547e:	60 81       	ld	r22, Z
    5480:	62 30       	cpi	r22, 0x02	; 2
    5482:	08 f1       	brcs	.+66     	; 0x54c6 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x76>
    5484:	49 01       	movw	r8, r18
    5486:	2a 01       	movw	r4, r20
    5488:	3c 01       	movw	r6, r24
		return STATUS_NO_ROOM;
	}
	PCD_ClearRegisterBitMask(CollReg, 0x80);		// ValuesAfterColl=1 => Bits received after collision are cleared.
    548a:	40 e8       	ldi	r20, 0x80	; 128
    548c:	6c e1       	ldi	r22, 0x1C	; 28
    548e:	84 dc       	rcall	.-1784   	; 0x4d98 <_ZN7MFRC52224PCD_ClearRegisterBitMaskENS_12PCD_RegisterEh>
	validBits = 7;									// For REQA and WUPA we need the short frame format - transmit only 7 bits of the last (and only) byte. TxLastBits = BitFramingReg[2..0]
    5490:	87 e0       	ldi	r24, 0x07	; 7
    5492:	89 83       	std	Y+1, r24	; 0x01
	status = PCD_TransceiveData(&command, 1, bufferATQA, bufferSize, &validBits);
    5494:	a1 2c       	mov	r10, r1
    5496:	c1 2c       	mov	r12, r1
    5498:	ce 01       	movw	r24, r28
    549a:	01 96       	adiw	r24, 0x01	; 1
    549c:	7c 01       	movw	r14, r24
    549e:	84 01       	movw	r16, r8
    54a0:	92 01       	movw	r18, r4
    54a2:	41 e0       	ldi	r20, 0x01	; 1
    54a4:	be 01       	movw	r22, r28
    54a6:	6e 5f       	subi	r22, 0xFE	; 254
    54a8:	7f 4f       	sbci	r23, 0xFF	; 255
    54aa:	c3 01       	movw	r24, r6
    54ac:	34 de       	rcall	.-920    	; 0x5116 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
	if (status != STATUS_OK) {
    54ae:	81 11       	cpse	r24, r1
    54b0:	0d c0       	rjmp	.+26     	; 0x54cc <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x7c>
		return status;
	}
	if (*bufferSize != 2 || validBits != 0) {		// ATQA must be exactly 16 bits.
    54b2:	f4 01       	movw	r30, r8
    54b4:	80 81       	ld	r24, Z
    54b6:	82 30       	cpi	r24, 0x02	; 2
    54b8:	41 f4       	brne	.+16     	; 0x54ca <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x7a>
											) {
	byte validBits;
	MFRC522::StatusCode status;
	
	if (bufferATQA == nullptr || *bufferSize < 2) {	// The ATQA response is 2 bytes long.
		return STATUS_NO_ROOM;
    54ba:	81 e0       	ldi	r24, 0x01	; 1
    54bc:	99 81       	ldd	r25, Y+1	; 0x01
    54be:	91 11       	cpse	r25, r1
    54c0:	05 c0       	rjmp	.+10     	; 0x54cc <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x7c>
    54c2:	80 e0       	ldi	r24, 0x00	; 0
    54c4:	03 c0       	rjmp	.+6      	; 0x54cc <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x7c>
    54c6:	84 e0       	ldi	r24, 0x04	; 4
    54c8:	01 c0       	rjmp	.+2      	; 0x54cc <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x7c>
	status = PCD_TransceiveData(&command, 1, bufferATQA, bufferSize, &validBits);
	if (status != STATUS_OK) {
		return status;
	}
	if (*bufferSize != 2 || validBits != 0) {		// ATQA must be exactly 16 bits.
		return STATUS_ERROR;
    54ca:	81 e0       	ldi	r24, 0x01	; 1
	}
	return STATUS_OK;
} // End PICC_REQA_or_WUPA()
    54cc:	0f 90       	pop	r0
    54ce:	0f 90       	pop	r0
    54d0:	df 91       	pop	r29
    54d2:	cf 91       	pop	r28
    54d4:	1f 91       	pop	r17
    54d6:	0f 91       	pop	r16
    54d8:	ff 90       	pop	r15
    54da:	ef 90       	pop	r14
    54dc:	cf 90       	pop	r12
    54de:	af 90       	pop	r10
    54e0:	9f 90       	pop	r9
    54e2:	8f 90       	pop	r8
    54e4:	7f 90       	pop	r7
    54e6:	6f 90       	pop	r6
    54e8:	5f 90       	pop	r5
    54ea:	4f 90       	pop	r4
    54ec:	08 95       	ret

000054ee <_ZN7MFRC52213PICC_RequestAEPhS0_>:
 * 
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */
MFRC522::StatusCode MFRC522::PICC_RequestA(	byte *bufferATQA,	///< The buffer to store the ATQA (Answer to request) in
											byte *bufferSize	///< Buffer size, at least two bytes. Also number of bytes returned if STATUS_OK.
										) {
    54ee:	9a 01       	movw	r18, r20
	return PICC_REQA_or_WUPA(PICC_CMD_REQA, bufferATQA, bufferSize);
    54f0:	ab 01       	movw	r20, r22
    54f2:	66 e2       	ldi	r22, 0x26	; 38
    54f4:	ad cf       	rjmp	.-166    	; 0x5450 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>

000054f6 <_ZN7MFRC52221PICC_IsNewCardPresentEv>:
 * Returns true if a PICC responds to PICC_CMD_REQA.
 * Only "new" cards in state IDLE are invited. Sleeping cards in state HALT are ignored.
 * 
 * @return bool
 */
bool MFRC522::PICC_IsNewCardPresent() {
    54f6:	0f 93       	push	r16
    54f8:	1f 93       	push	r17
    54fa:	cf 93       	push	r28
    54fc:	df 93       	push	r29
    54fe:	00 d0       	rcall	.+0      	; 0x5500 <_ZN7MFRC52221PICC_IsNewCardPresentEv+0xa>
    5500:	cd b7       	in	r28, 0x3d	; 61
    5502:	de b7       	in	r29, 0x3e	; 62
    5504:	8c 01       	movw	r16, r24
	byte bufferATQA[2];
	byte bufferSize = sizeof(bufferATQA);
    5506:	82 e0       	ldi	r24, 0x02	; 2
    5508:	8b 83       	std	Y+3, r24	; 0x03

	// Reset baud rates
	PCD_WriteRegister(TxModeReg, 0x00);
    550a:	40 e0       	ldi	r20, 0x00	; 0
    550c:	64 e2       	ldi	r22, 0x24	; 36
    550e:	c8 01       	movw	r24, r16
    5510:	bb db       	rcall	.-2186   	; 0x4c88 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
	PCD_WriteRegister(RxModeReg, 0x00);
    5512:	40 e0       	ldi	r20, 0x00	; 0
    5514:	66 e2       	ldi	r22, 0x26	; 38
    5516:	c8 01       	movw	r24, r16
    5518:	b7 db       	rcall	.-2194   	; 0x4c88 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
	// Reset ModWidthReg
	PCD_WriteRegister(ModWidthReg, 0x26);
    551a:	46 e2       	ldi	r20, 0x26	; 38
    551c:	68 e4       	ldi	r22, 0x48	; 72
    551e:	c8 01       	movw	r24, r16
    5520:	b3 db       	rcall	.-2202   	; 0x4c88 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>

	MFRC522::StatusCode result = PICC_RequestA(bufferATQA, &bufferSize);
    5522:	ae 01       	movw	r20, r28
    5524:	4d 5f       	subi	r20, 0xFD	; 253
    5526:	5f 4f       	sbci	r21, 0xFF	; 255
    5528:	be 01       	movw	r22, r28
    552a:	6f 5f       	subi	r22, 0xFF	; 255
    552c:	7f 4f       	sbci	r23, 0xFF	; 255
    552e:	c8 01       	movw	r24, r16
    5530:	de df       	rcall	.-68     	; 0x54ee <_ZN7MFRC52213PICC_RequestAEPhS0_>
    5532:	98 2f       	mov	r25, r24
	return (result == STATUS_OK || result == STATUS_COLLISION);
    5534:	81 e0       	ldi	r24, 0x01	; 1
    5536:	99 23       	and	r25, r25
    5538:	19 f0       	breq	.+6      	; 0x5540 <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x4a>
    553a:	92 30       	cpi	r25, 0x02	; 2
    553c:	09 f0       	breq	.+2      	; 0x5540 <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x4a>
    553e:	80 e0       	ldi	r24, 0x00	; 0
} // End PICC_IsNewCardPresent()
    5540:	0f 90       	pop	r0
    5542:	0f 90       	pop	r0
    5544:	0f 90       	pop	r0
    5546:	df 91       	pop	r29
    5548:	cf 91       	pop	r28
    554a:	1f 91       	pop	r17
    554c:	0f 91       	pop	r16
    554e:	08 95       	ret

00005550 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>:
  return this->servoIndex ;
}

void Servo::detach()
{
  servos[this->servoIndex].Pin.isActive = false;
    5550:	cf 92       	push	r12
    5552:	df 92       	push	r13
    5554:	ef 92       	push	r14
    5556:	ff 92       	push	r15
    5558:	0f 93       	push	r16
    555a:	1f 93       	push	r17
    555c:	cf 93       	push	r28
    555e:	df 93       	push	r29
    5560:	7b 01       	movw	r14, r22
    5562:	6a 01       	movw	r12, r20
    5564:	08 2f       	mov	r16, r24
    5566:	10 e0       	ldi	r17, 0x00	; 0
    5568:	e8 01       	movw	r28, r16
    556a:	c1 5d       	subi	r28, 0xD1	; 209
    556c:	da 4f       	sbci	r29, 0xFA	; 250
    556e:	88 81       	ld	r24, Y
    5570:	87 ff       	sbrs	r24, 7
    5572:	04 c0       	rjmp	.+8      	; 0x557c <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2c>
    5574:	fb 01       	movw	r30, r22
    5576:	11 82       	std	Z+1, r1	; 0x01
    5578:	10 82       	st	Z, r1
    557a:	24 c0       	rjmp	.+72     	; 0x55c4 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x74>
    557c:	8c e0       	ldi	r24, 0x0C	; 12
    557e:	80 9f       	mul	r24, r16
    5580:	90 01       	movw	r18, r0
    5582:	81 9f       	mul	r24, r17
    5584:	30 0d       	add	r19, r0
    5586:	11 24       	eor	r1, r1
    5588:	88 81       	ld	r24, Y
    558a:	a9 01       	movw	r20, r18
    558c:	48 0f       	add	r20, r24
    558e:	51 1d       	adc	r21, r1
    5590:	87 fd       	sbrc	r24, 7
    5592:	5a 95       	dec	r21
    5594:	80 91 2e 05 	lds	r24, 0x052E	; 0x80052e <ServoCount>
    5598:	90 e0       	ldi	r25, 0x00	; 0
    559a:	48 17       	cp	r20, r24
    559c:	59 07       	cpc	r21, r25
    559e:	94 f4       	brge	.+36     	; 0x55c4 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x74>
    55a0:	88 81       	ld	r24, Y
    55a2:	a9 01       	movw	r20, r18
    55a4:	48 0f       	add	r20, r24
    55a6:	51 1d       	adc	r21, r1
    55a8:	87 fd       	sbrc	r24, 7
    55aa:	5a 95       	dec	r21
    55ac:	ca 01       	movw	r24, r20
    55ae:	fa 01       	movw	r30, r20
    55b0:	ee 0f       	add	r30, r30
    55b2:	ff 1f       	adc	r31, r31
    55b4:	8e 0f       	add	r24, r30
    55b6:	9f 1f       	adc	r25, r31
    55b8:	fc 01       	movw	r30, r24
    55ba:	ed 5c       	subi	r30, 0xCD	; 205
    55bc:	fa 4f       	sbci	r31, 0xFA	; 250
    55be:	80 81       	ld	r24, Z
    55c0:	86 fd       	sbrc	r24, 6
    55c2:	19 c0       	rjmp	.+50     	; 0x55f6 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xa6>
    55c4:	88 81       	ld	r24, Y
    55c6:	8f 5f       	subi	r24, 0xFF	; 255
    55c8:	88 83       	st	Y, r24
    55ca:	8c e0       	ldi	r24, 0x0C	; 12
    55cc:	80 9f       	mul	r24, r16
    55ce:	90 01       	movw	r18, r0
    55d0:	81 9f       	mul	r24, r17
    55d2:	30 0d       	add	r19, r0
    55d4:	11 24       	eor	r1, r1
    55d6:	88 81       	ld	r24, Y
    55d8:	a9 01       	movw	r20, r18
    55da:	48 0f       	add	r20, r24
    55dc:	51 1d       	adc	r21, r1
    55de:	87 fd       	sbrc	r24, 7
    55e0:	5a 95       	dec	r21
    55e2:	80 91 2e 05 	lds	r24, 0x052E	; 0x80052e <ServoCount>
    55e6:	90 e0       	ldi	r25, 0x00	; 0
    55e8:	48 17       	cp	r20, r24
    55ea:	59 07       	cpc	r21, r25
    55ec:	bc f4       	brge	.+46     	; 0x561c <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xcc>
    55ee:	88 81       	ld	r24, Y
    55f0:	8c 30       	cpi	r24, 0x0C	; 12
    55f2:	44 f1       	brlt	.+80     	; 0x5644 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xf4>
    55f4:	13 c0       	rjmp	.+38     	; 0x561c <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xcc>
    55f6:	88 81       	ld	r24, Y
    55f8:	28 0f       	add	r18, r24
    55fa:	31 1d       	adc	r19, r1
    55fc:	87 fd       	sbrc	r24, 7
    55fe:	3a 95       	dec	r19
    5600:	f9 01       	movw	r30, r18
    5602:	ee 0f       	add	r30, r30
    5604:	ff 1f       	adc	r31, r31
    5606:	2e 0f       	add	r18, r30
    5608:	3f 1f       	adc	r19, r31
    560a:	f9 01       	movw	r30, r18
    560c:	ed 5c       	subi	r30, 0xCD	; 205
    560e:	fa 4f       	sbci	r31, 0xFA	; 250
    5610:	80 81       	ld	r24, Z
    5612:	60 e0       	ldi	r22, 0x00	; 0
    5614:	8f 73       	andi	r24, 0x3F	; 63
    5616:	0e 94 3a 3b 	call	0x7674	; 0x7674 <digitalWrite>
    561a:	d4 cf       	rjmp	.-88     	; 0x55c4 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x74>
    561c:	f7 01       	movw	r30, r14
    561e:	80 81       	ld	r24, Z
    5620:	91 81       	ldd	r25, Z+1	; 0x01
    5622:	04 96       	adiw	r24, 0x04	; 4
    5624:	80 34       	cpi	r24, 0x40	; 64
    5626:	9c 49       	sbci	r25, 0x9C	; 156
    5628:	18 f4       	brcc	.+6      	; 0x5630 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xe0>
    562a:	80 e4       	ldi	r24, 0x40	; 64
    562c:	9c e9       	ldi	r25, 0x9C	; 156
    562e:	04 c0       	rjmp	.+8      	; 0x5638 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xe8>
    5630:	f7 01       	movw	r30, r14
    5632:	80 81       	ld	r24, Z
    5634:	91 81       	ldd	r25, Z+1	; 0x01
    5636:	04 96       	adiw	r24, 0x04	; 4
    5638:	f6 01       	movw	r30, r12
    563a:	91 83       	std	Z+1, r25	; 0x01
    563c:	80 83       	st	Z, r24
    563e:	8f ef       	ldi	r24, 0xFF	; 255
    5640:	88 83       	st	Y, r24
    5642:	45 c0       	rjmp	.+138    	; 0x56ce <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x17e>
    5644:	f7 01       	movw	r30, r14
    5646:	40 81       	ld	r20, Z
    5648:	51 81       	ldd	r21, Z+1	; 0x01
    564a:	88 81       	ld	r24, Y
    564c:	b9 01       	movw	r22, r18
    564e:	68 0f       	add	r22, r24
    5650:	71 1d       	adc	r23, r1
    5652:	87 fd       	sbrc	r24, 7
    5654:	7a 95       	dec	r23
    5656:	cb 01       	movw	r24, r22
    5658:	fb 01       	movw	r30, r22
    565a:	ee 0f       	add	r30, r30
    565c:	ff 1f       	adc	r31, r31
    565e:	8e 0f       	add	r24, r30
    5660:	9f 1f       	adc	r25, r31
    5662:	fc 01       	movw	r30, r24
    5664:	ed 5c       	subi	r30, 0xCD	; 205
    5666:	fa 4f       	sbci	r31, 0xFA	; 250
    5668:	81 81       	ldd	r24, Z+1	; 0x01
    566a:	92 81       	ldd	r25, Z+2	; 0x02
    566c:	84 0f       	add	r24, r20
    566e:	95 1f       	adc	r25, r21
    5670:	f6 01       	movw	r30, r12
    5672:	91 83       	std	Z+1, r25	; 0x01
    5674:	80 83       	st	Z, r24
    5676:	88 81       	ld	r24, Y
    5678:	a9 01       	movw	r20, r18
    567a:	48 0f       	add	r20, r24
    567c:	51 1d       	adc	r21, r1
    567e:	87 fd       	sbrc	r24, 7
    5680:	5a 95       	dec	r21
    5682:	ca 01       	movw	r24, r20
    5684:	fa 01       	movw	r30, r20
    5686:	ee 0f       	add	r30, r30
    5688:	ff 1f       	adc	r31, r31
    568a:	8e 0f       	add	r24, r30
    568c:	9f 1f       	adc	r25, r31
    568e:	fc 01       	movw	r30, r24
    5690:	ed 5c       	subi	r30, 0xCD	; 205
    5692:	fa 4f       	sbci	r31, 0xFA	; 250
    5694:	80 81       	ld	r24, Z
    5696:	86 ff       	sbrs	r24, 6
    5698:	1a c0       	rjmp	.+52     	; 0x56ce <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x17e>
    569a:	88 81       	ld	r24, Y
    569c:	28 0f       	add	r18, r24
    569e:	31 1d       	adc	r19, r1
    56a0:	87 fd       	sbrc	r24, 7
    56a2:	3a 95       	dec	r19
    56a4:	f9 01       	movw	r30, r18
    56a6:	ee 0f       	add	r30, r30
    56a8:	ff 1f       	adc	r31, r31
    56aa:	2e 0f       	add	r18, r30
    56ac:	3f 1f       	adc	r19, r31
    56ae:	f9 01       	movw	r30, r18
    56b0:	ed 5c       	subi	r30, 0xCD	; 205
    56b2:	fa 4f       	sbci	r31, 0xFA	; 250
    56b4:	80 81       	ld	r24, Z
    56b6:	61 e0       	ldi	r22, 0x01	; 1
    56b8:	8f 73       	andi	r24, 0x3F	; 63
    56ba:	df 91       	pop	r29
    56bc:	cf 91       	pop	r28
    56be:	1f 91       	pop	r17
    56c0:	0f 91       	pop	r16
    56c2:	ff 90       	pop	r15
    56c4:	ef 90       	pop	r14
    56c6:	df 90       	pop	r13
    56c8:	cf 90       	pop	r12
    56ca:	0c 94 3a 3b 	jmp	0x7674	; 0x7674 <digitalWrite>
    56ce:	df 91       	pop	r29
    56d0:	cf 91       	pop	r28
    56d2:	1f 91       	pop	r17
    56d4:	0f 91       	pop	r16
    56d6:	ff 90       	pop	r15
    56d8:	ef 90       	pop	r14
    56da:	df 90       	pop	r13
    56dc:	cf 90       	pop	r12
    56de:	08 95       	ret

000056e0 <__vector_17>:
    56e0:	1f 92       	push	r1
    56e2:	0f 92       	push	r0
    56e4:	0f b6       	in	r0, 0x3f	; 63
    56e6:	0f 92       	push	r0
    56e8:	11 24       	eor	r1, r1
    56ea:	0b b6       	in	r0, 0x3b	; 59
    56ec:	0f 92       	push	r0
    56ee:	2f 93       	push	r18
    56f0:	3f 93       	push	r19
    56f2:	4f 93       	push	r20
    56f4:	5f 93       	push	r21
    56f6:	6f 93       	push	r22
    56f8:	7f 93       	push	r23
    56fa:	8f 93       	push	r24
    56fc:	9f 93       	push	r25
    56fe:	af 93       	push	r26
    5700:	bf 93       	push	r27
    5702:	ef 93       	push	r30
    5704:	ff 93       	push	r31
    5706:	48 e8       	ldi	r20, 0x88	; 136
    5708:	50 e0       	ldi	r21, 0x00	; 0
    570a:	64 e8       	ldi	r22, 0x84	; 132
    570c:	70 e0       	ldi	r23, 0x00	; 0
    570e:	81 e0       	ldi	r24, 0x01	; 1
    5710:	1f df       	rcall	.-450    	; 0x5550 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
    5712:	ff 91       	pop	r31
    5714:	ef 91       	pop	r30
    5716:	bf 91       	pop	r27
    5718:	af 91       	pop	r26
    571a:	9f 91       	pop	r25
    571c:	8f 91       	pop	r24
    571e:	7f 91       	pop	r23
    5720:	6f 91       	pop	r22
    5722:	5f 91       	pop	r21
    5724:	4f 91       	pop	r20
    5726:	3f 91       	pop	r19
    5728:	2f 91       	pop	r18
    572a:	0f 90       	pop	r0
    572c:	0b be       	out	0x3b, r0	; 59
    572e:	0f 90       	pop	r0
    5730:	0f be       	out	0x3f, r0	; 63
    5732:	0f 90       	pop	r0
    5734:	1f 90       	pop	r1
    5736:	18 95       	reti

00005738 <__vector_32>:
    5738:	1f 92       	push	r1
    573a:	0f 92       	push	r0
    573c:	0f b6       	in	r0, 0x3f	; 63
    573e:	0f 92       	push	r0
    5740:	11 24       	eor	r1, r1
    5742:	0b b6       	in	r0, 0x3b	; 59
    5744:	0f 92       	push	r0
    5746:	2f 93       	push	r18
    5748:	3f 93       	push	r19
    574a:	4f 93       	push	r20
    574c:	5f 93       	push	r21
    574e:	6f 93       	push	r22
    5750:	7f 93       	push	r23
    5752:	8f 93       	push	r24
    5754:	9f 93       	push	r25
    5756:	af 93       	push	r26
    5758:	bf 93       	push	r27
    575a:	ef 93       	push	r30
    575c:	ff 93       	push	r31
    575e:	48 e9       	ldi	r20, 0x98	; 152
    5760:	50 e0       	ldi	r21, 0x00	; 0
    5762:	64 e9       	ldi	r22, 0x94	; 148
    5764:	70 e0       	ldi	r23, 0x00	; 0
    5766:	82 e0       	ldi	r24, 0x02	; 2
    5768:	f3 de       	rcall	.-538    	; 0x5550 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
    576a:	ff 91       	pop	r31
    576c:	ef 91       	pop	r30
    576e:	bf 91       	pop	r27
    5770:	af 91       	pop	r26
    5772:	9f 91       	pop	r25
    5774:	8f 91       	pop	r24
    5776:	7f 91       	pop	r23
    5778:	6f 91       	pop	r22
    577a:	5f 91       	pop	r21
    577c:	4f 91       	pop	r20
    577e:	3f 91       	pop	r19
    5780:	2f 91       	pop	r18
    5782:	0f 90       	pop	r0
    5784:	0b be       	out	0x3b, r0	; 59
    5786:	0f 90       	pop	r0
    5788:	0f be       	out	0x3f, r0	; 63
    578a:	0f 90       	pop	r0
    578c:	1f 90       	pop	r1
    578e:	18 95       	reti

00005790 <__vector_42>:
    5790:	1f 92       	push	r1
    5792:	0f 92       	push	r0
    5794:	0f b6       	in	r0, 0x3f	; 63
    5796:	0f 92       	push	r0
    5798:	11 24       	eor	r1, r1
    579a:	0b b6       	in	r0, 0x3b	; 59
    579c:	0f 92       	push	r0
    579e:	2f 93       	push	r18
    57a0:	3f 93       	push	r19
    57a2:	4f 93       	push	r20
    57a4:	5f 93       	push	r21
    57a6:	6f 93       	push	r22
    57a8:	7f 93       	push	r23
    57aa:	8f 93       	push	r24
    57ac:	9f 93       	push	r25
    57ae:	af 93       	push	r26
    57b0:	bf 93       	push	r27
    57b2:	ef 93       	push	r30
    57b4:	ff 93       	push	r31
    57b6:	48 ea       	ldi	r20, 0xA8	; 168
    57b8:	50 e0       	ldi	r21, 0x00	; 0
    57ba:	64 ea       	ldi	r22, 0xA4	; 164
    57bc:	70 e0       	ldi	r23, 0x00	; 0
    57be:	83 e0       	ldi	r24, 0x03	; 3
    57c0:	c7 de       	rcall	.-626    	; 0x5550 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
    57c2:	ff 91       	pop	r31
    57c4:	ef 91       	pop	r30
    57c6:	bf 91       	pop	r27
    57c8:	af 91       	pop	r26
    57ca:	9f 91       	pop	r25
    57cc:	8f 91       	pop	r24
    57ce:	7f 91       	pop	r23
    57d0:	6f 91       	pop	r22
    57d2:	5f 91       	pop	r21
    57d4:	4f 91       	pop	r20
    57d6:	3f 91       	pop	r19
    57d8:	2f 91       	pop	r18
    57da:	0f 90       	pop	r0
    57dc:	0b be       	out	0x3b, r0	; 59
    57de:	0f 90       	pop	r0
    57e0:	0f be       	out	0x3f, r0	; 63
    57e2:	0f 90       	pop	r0
    57e4:	1f 90       	pop	r1
    57e6:	18 95       	reti

000057e8 <__vector_47>:
    57e8:	1f 92       	push	r1
    57ea:	0f 92       	push	r0
    57ec:	0f b6       	in	r0, 0x3f	; 63
    57ee:	0f 92       	push	r0
    57f0:	11 24       	eor	r1, r1
    57f2:	0b b6       	in	r0, 0x3b	; 59
    57f4:	0f 92       	push	r0
    57f6:	2f 93       	push	r18
    57f8:	3f 93       	push	r19
    57fa:	4f 93       	push	r20
    57fc:	5f 93       	push	r21
    57fe:	6f 93       	push	r22
    5800:	7f 93       	push	r23
    5802:	8f 93       	push	r24
    5804:	9f 93       	push	r25
    5806:	af 93       	push	r26
    5808:	bf 93       	push	r27
    580a:	ef 93       	push	r30
    580c:	ff 93       	push	r31
    580e:	48 e2       	ldi	r20, 0x28	; 40
    5810:	51 e0       	ldi	r21, 0x01	; 1
    5812:	64 e2       	ldi	r22, 0x24	; 36
    5814:	71 e0       	ldi	r23, 0x01	; 1
    5816:	80 e0       	ldi	r24, 0x00	; 0
    5818:	9b de       	rcall	.-714    	; 0x5550 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
    581a:	ff 91       	pop	r31
    581c:	ef 91       	pop	r30
    581e:	bf 91       	pop	r27
    5820:	af 91       	pop	r26
    5822:	9f 91       	pop	r25
    5824:	8f 91       	pop	r24
    5826:	7f 91       	pop	r23
    5828:	6f 91       	pop	r22
    582a:	5f 91       	pop	r21
    582c:	4f 91       	pop	r20
    582e:	3f 91       	pop	r19
    5830:	2f 91       	pop	r18
    5832:	0f 90       	pop	r0
    5834:	0b be       	out	0x3b, r0	; 59
    5836:	0f 90       	pop	r0
    5838:	0f be       	out	0x3f, r0	; 63
    583a:	0f 90       	pop	r0
    583c:	1f 90       	pop	r1
    583e:	18 95       	reti

00005840 <_ZN5ServoC1Ev>:
    5840:	fc 01       	movw	r30, r24
    5842:	90 91 2e 05 	lds	r25, 0x052E	; 0x80052e <ServoCount>
    5846:	90 33       	cpi	r25, 0x30	; 48
    5848:	a0 f4       	brcc	.+40     	; 0x5872 <_ZN5ServoC1Ev+0x32>
    584a:	81 e0       	ldi	r24, 0x01	; 1
    584c:	89 0f       	add	r24, r25
    584e:	80 93 2e 05 	sts	0x052E, r24	; 0x80052e <ServoCount>
    5852:	90 83       	st	Z, r25
    5854:	89 2f       	mov	r24, r25
    5856:	90 e0       	ldi	r25, 0x00	; 0
    5858:	fc 01       	movw	r30, r24
    585a:	ee 0f       	add	r30, r30
    585c:	ff 1f       	adc	r31, r31
    585e:	8e 0f       	add	r24, r30
    5860:	9f 1f       	adc	r25, r31
    5862:	fc 01       	movw	r30, r24
    5864:	ed 5c       	subi	r30, 0xCD	; 205
    5866:	fa 4f       	sbci	r31, 0xFA	; 250
    5868:	88 eb       	ldi	r24, 0xB8	; 184
    586a:	9b e0       	ldi	r25, 0x0B	; 11
    586c:	92 83       	std	Z+2, r25	; 0x02
    586e:	81 83       	std	Z+1, r24	; 0x01
    5870:	08 95       	ret
    5872:	8f ef       	ldi	r24, 0xFF	; 255
    5874:	80 83       	st	Z, r24
    5876:	08 95       	ret

00005878 <_ZN5Servo6attachEiii>:
    5878:	df 92       	push	r13
    587a:	ef 92       	push	r14
    587c:	ff 92       	push	r15
    587e:	0f 93       	push	r16
    5880:	1f 93       	push	r17
    5882:	cf 93       	push	r28
    5884:	df 93       	push	r29
    5886:	ec 01       	movw	r28, r24
    5888:	d6 2e       	mov	r13, r22
    588a:	7a 01       	movw	r14, r20
    588c:	89 01       	movw	r16, r18
    588e:	88 81       	ld	r24, Y
    5890:	80 33       	cpi	r24, 0x30	; 48
    5892:	08 f0       	brcs	.+2      	; 0x5896 <_ZN5Servo6attachEiii+0x1e>
    5894:	68 c0       	rjmp	.+208    	; 0x5966 <_ZN5Servo6attachEiii+0xee>
    5896:	61 e0       	ldi	r22, 0x01	; 1
    5898:	8d 2d       	mov	r24, r13
    589a:	0e 94 fe 3a 	call	0x75fc	; 0x75fc <pinMode>
    589e:	88 81       	ld	r24, Y
    58a0:	e8 2f       	mov	r30, r24
    58a2:	f0 e0       	ldi	r31, 0x00	; 0
    58a4:	9f 01       	movw	r18, r30
    58a6:	22 0f       	add	r18, r18
    58a8:	33 1f       	adc	r19, r19
    58aa:	e2 0f       	add	r30, r18
    58ac:	f3 1f       	adc	r31, r19
    58ae:	ed 5c       	subi	r30, 0xCD	; 205
    58b0:	fa 4f       	sbci	r31, 0xFA	; 250
    58b2:	9d 2d       	mov	r25, r13
    58b4:	9f 73       	andi	r25, 0x3F	; 63
    58b6:	20 81       	ld	r18, Z
    58b8:	20 7c       	andi	r18, 0xC0	; 192
    58ba:	d2 2e       	mov	r13, r18
    58bc:	d9 2a       	or	r13, r25
    58be:	d0 82       	st	Z, r13
    58c0:	20 e2       	ldi	r18, 0x20	; 32
    58c2:	32 e0       	ldi	r19, 0x02	; 2
    58c4:	2e 19       	sub	r18, r14
    58c6:	3f 09       	sbc	r19, r15
    58c8:	37 ff       	sbrs	r19, 7
    58ca:	02 c0       	rjmp	.+4      	; 0x58d0 <_ZN5Servo6attachEiii+0x58>
    58cc:	2d 5f       	subi	r18, 0xFD	; 253
    58ce:	3f 4f       	sbci	r19, 0xFF	; 255
    58d0:	35 95       	asr	r19
    58d2:	27 95       	ror	r18
    58d4:	35 95       	asr	r19
    58d6:	27 95       	ror	r18
    58d8:	29 83       	std	Y+1, r18	; 0x01
    58da:	20 e6       	ldi	r18, 0x60	; 96
    58dc:	39 e0       	ldi	r19, 0x09	; 9
    58de:	20 1b       	sub	r18, r16
    58e0:	31 0b       	sbc	r19, r17
    58e2:	37 ff       	sbrs	r19, 7
    58e4:	02 c0       	rjmp	.+4      	; 0x58ea <_ZN5Servo6attachEiii+0x72>
    58e6:	2d 5f       	subi	r18, 0xFD	; 253
    58e8:	3f 4f       	sbci	r19, 0xFF	; 255
    58ea:	35 95       	asr	r19
    58ec:	27 95       	ror	r18
    58ee:	35 95       	asr	r19
    58f0:	27 95       	ror	r18
    58f2:	2a 83       	std	Y+2, r18	; 0x02
    58f4:	2c e0       	ldi	r18, 0x0C	; 12
    58f6:	62 2f       	mov	r22, r18
    58f8:	0e 94 5a 3e 	call	0x7cb4	; 0x7cb4 <__udivmodqi4>
    58fc:	28 9f       	mul	r18, r24
    58fe:	b0 01       	movw	r22, r0
    5900:	11 24       	eor	r1, r1
    5902:	40 e0       	ldi	r20, 0x00	; 0
    5904:	50 e0       	ldi	r21, 0x00	; 0
    5906:	9b 01       	movw	r18, r22
    5908:	24 0f       	add	r18, r20
    590a:	35 1f       	adc	r19, r21
    590c:	f9 01       	movw	r30, r18
    590e:	ee 0f       	add	r30, r30
    5910:	ff 1f       	adc	r31, r31
    5912:	2e 0f       	add	r18, r30
    5914:	3f 1f       	adc	r19, r31
    5916:	f9 01       	movw	r30, r18
    5918:	ed 5c       	subi	r30, 0xCD	; 205
    591a:	fa 4f       	sbci	r31, 0xFA	; 250
    591c:	90 81       	ld	r25, Z
    591e:	96 fd       	sbrc	r25, 6
    5920:	16 c0       	rjmp	.+44     	; 0x594e <_ZN5Servo6attachEiii+0xd6>
    5922:	4f 5f       	subi	r20, 0xFF	; 255
    5924:	5f 4f       	sbci	r21, 0xFF	; 255
    5926:	4c 30       	cpi	r20, 0x0C	; 12
    5928:	51 05       	cpc	r21, r1
    592a:	69 f7       	brne	.-38     	; 0x5906 <_ZN5Servo6attachEiii+0x8e>
    592c:	81 30       	cpi	r24, 0x01	; 1
    592e:	21 f5       	brne	.+72     	; 0x5978 <_ZN5Servo6attachEiii+0x100>
    5930:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    5934:	82 e0       	ldi	r24, 0x02	; 2
    5936:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
    593a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
    593e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
    5942:	b1 9a       	sbi	0x16, 1	; 22
    5944:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7c006f>
    5948:	82 60       	ori	r24, 0x02	; 2
    594a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7c006f>
    594e:	e8 81       	ld	r30, Y
    5950:	f0 e0       	ldi	r31, 0x00	; 0
    5952:	cf 01       	movw	r24, r30
    5954:	88 0f       	add	r24, r24
    5956:	99 1f       	adc	r25, r25
    5958:	e8 0f       	add	r30, r24
    595a:	f9 1f       	adc	r31, r25
    595c:	ed 5c       	subi	r30, 0xCD	; 205
    595e:	fa 4f       	sbci	r31, 0xFA	; 250
    5960:	80 81       	ld	r24, Z
    5962:	80 64       	ori	r24, 0x40	; 64
    5964:	80 83       	st	Z, r24
    5966:	88 81       	ld	r24, Y
    5968:	df 91       	pop	r29
    596a:	cf 91       	pop	r28
    596c:	1f 91       	pop	r17
    596e:	0f 91       	pop	r16
    5970:	ff 90       	pop	r15
    5972:	ef 90       	pop	r14
    5974:	df 90       	pop	r13
    5976:	08 95       	ret
    5978:	82 30       	cpi	r24, 0x02	; 2
    597a:	61 f4       	brne	.+24     	; 0x5994 <_ZN5Servo6attachEiii+0x11c>
    597c:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    5980:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7c0091>
    5984:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7c0095>
    5988:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7c0094>
    598c:	88 bb       	out	0x18, r24	; 24
    598e:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7c0071>
    5992:	dd cf       	rjmp	.-70     	; 0x594e <_ZN5Servo6attachEiii+0xd6>
    5994:	83 30       	cpi	r24, 0x03	; 3
    5996:	69 f4       	brne	.+26     	; 0x59b2 <_ZN5Servo6attachEiii+0x13a>
    5998:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    599c:	82 e0       	ldi	r24, 0x02	; 2
    599e:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7c00a1>
    59a2:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7c00a5>
    59a6:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7c00a4>
    59aa:	89 bb       	out	0x19, r24	; 25
    59ac:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x7c0072>
    59b0:	ce cf       	rjmp	.-100    	; 0x594e <_ZN5Servo6attachEiii+0xd6>
    59b2:	81 11       	cpse	r24, r1
    59b4:	cc cf       	rjmp	.-104    	; 0x594e <_ZN5Servo6attachEiii+0xd6>
    59b6:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    59ba:	82 e0       	ldi	r24, 0x02	; 2
    59bc:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x7c0121>
    59c0:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <__TEXT_REGION_LENGTH__+0x7c0125>
    59c4:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x7c0124>
    59c8:	8a bb       	out	0x1a, r24	; 26
    59ca:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7c0073>
    59ce:	bf cf       	rjmp	.-130    	; 0x594e <_ZN5Servo6attachEiii+0xd6>

000059d0 <_ZN5Servo6attachEi>:
    59d0:	20 e6       	ldi	r18, 0x60	; 96
    59d2:	39 e0       	ldi	r19, 0x09	; 9
    59d4:	40 e2       	ldi	r20, 0x20	; 32
    59d6:	52 e0       	ldi	r21, 0x02	; 2
    59d8:	4f cf       	rjmp	.-354    	; 0x5878 <_ZN5Servo6attachEiii>

000059da <_ZN5Servo17writeMicrosecondsEi>:
  }
  this->writeMicroseconds(value);
}

void Servo::writeMicroseconds(int value)
{
    59da:	fc 01       	movw	r30, r24
  // calculate and store the values for the given channel
  byte channel = this->servoIndex;
    59dc:	90 81       	ld	r25, Z
  if( (channel < MAX_SERVOS) )   // ensure channel is valid
    59de:	90 33       	cpi	r25, 0x30	; 48
    59e0:	88 f5       	brcc	.+98     	; 0x5a44 <_ZN5Servo17writeMicrosecondsEi+0x6a>
  {
    if( value < SERVO_MIN() )          // ensure pulse width is valid
    59e2:	81 81       	ldd	r24, Z+1	; 0x01
    59e4:	28 e8       	ldi	r18, 0x88	; 136
    59e6:	30 e0       	ldi	r19, 0x00	; 0
    59e8:	28 1b       	sub	r18, r24
    59ea:	31 09       	sbc	r19, r1
    59ec:	87 fd       	sbrc	r24, 7
    59ee:	33 95       	inc	r19
    59f0:	22 0f       	add	r18, r18
    59f2:	33 1f       	adc	r19, r19
    59f4:	22 0f       	add	r18, r18
    59f6:	33 1f       	adc	r19, r19
    59f8:	62 17       	cp	r22, r18
    59fa:	73 07       	cpc	r23, r19
    59fc:	84 f0       	brlt	.+32     	; 0x5a1e <_ZN5Servo17writeMicrosecondsEi+0x44>
      value = SERVO_MIN();
    else if( value > SERVO_MAX() )
    59fe:	82 81       	ldd	r24, Z+2	; 0x02
    5a00:	48 e5       	ldi	r20, 0x58	; 88
    5a02:	52 e0       	ldi	r21, 0x02	; 2
    5a04:	48 1b       	sub	r20, r24
    5a06:	51 09       	sbc	r21, r1
    5a08:	87 fd       	sbrc	r24, 7
    5a0a:	53 95       	inc	r21
    5a0c:	44 0f       	add	r20, r20
    5a0e:	55 1f       	adc	r21, r21
    5a10:	44 0f       	add	r20, r20
    5a12:	55 1f       	adc	r21, r21
    5a14:	9b 01       	movw	r18, r22
    5a16:	46 17       	cp	r20, r22
    5a18:	57 07       	cpc	r21, r23
    5a1a:	0c f4       	brge	.+2      	; 0x5a1e <_ZN5Servo17writeMicrosecondsEi+0x44>
    5a1c:	9a 01       	movw	r18, r20
      value = SERVO_MAX();

    value = value - TRIM_DURATION;
    value = usToTicks(value);  // convert to ticks after compensating for interrupt overhead - 12 Aug 2009
    5a1e:	22 50       	subi	r18, 0x02	; 2
    5a20:	31 09       	sbc	r19, r1
    5a22:	22 0f       	add	r18, r18
    5a24:	33 1f       	adc	r19, r19

    uint8_t oldSREG = SREG;
    5a26:	4f b7       	in	r20, 0x3f	; 63
    cli();
    5a28:	f8 94       	cli
    servos[channel].ticks = value;
    5a2a:	89 2f       	mov	r24, r25
    5a2c:	90 e0       	ldi	r25, 0x00	; 0
    5a2e:	fc 01       	movw	r30, r24
    5a30:	ee 0f       	add	r30, r30
    5a32:	ff 1f       	adc	r31, r31
    5a34:	8e 0f       	add	r24, r30
    5a36:	9f 1f       	adc	r25, r31
    5a38:	fc 01       	movw	r30, r24
    5a3a:	ed 5c       	subi	r30, 0xCD	; 205
    5a3c:	fa 4f       	sbci	r31, 0xFA	; 250
    5a3e:	32 83       	std	Z+2, r19	; 0x02
    5a40:	21 83       	std	Z+1, r18	; 0x01
    SREG = oldSREG;
    5a42:	4f bf       	out	0x3f, r20	; 63
    5a44:	08 95       	ret

00005a46 <_ZN5Servo5writeEi>:
    finISR(timer);
  }
}

void Servo::write(int value)
{
    5a46:	af 92       	push	r10
    5a48:	bf 92       	push	r11
    5a4a:	cf 92       	push	r12
    5a4c:	df 92       	push	r13
    5a4e:	ef 92       	push	r14
    5a50:	ff 92       	push	r15
    5a52:	0f 93       	push	r16
    5a54:	1f 93       	push	r17
    5a56:	cf 93       	push	r28
    5a58:	df 93       	push	r29
    5a5a:	ec 01       	movw	r28, r24
  if(value < MIN_PULSE_WIDTH)
    5a5c:	60 32       	cpi	r22, 0x20	; 32
    5a5e:	82 e0       	ldi	r24, 0x02	; 2
    5a60:	78 07       	cpc	r23, r24
    5a62:	0c f0       	brlt	.+2      	; 0x5a66 <_ZN5Servo5writeEi+0x20>
    5a64:	3f c0       	rjmp	.+126    	; 0x5ae4 <_ZN5Servo5writeEi+0x9e>
  {  // treat values less than 544 as angles in degrees (valid values in microseconds are handled as microseconds)
    if(value < 0) value = 0;
    5a66:	77 fd       	sbrc	r23, 7
    5a68:	06 c0       	rjmp	.+12     	; 0x5a76 <_ZN5Servo5writeEi+0x30>
    if(value > 180) value = 180;
    5a6a:	65 3b       	cpi	r22, 0xB5	; 181
    5a6c:	71 05       	cpc	r23, r1
    5a6e:	2c f0       	brlt	.+10     	; 0x5a7a <_ZN5Servo5writeEi+0x34>
    5a70:	64 eb       	ldi	r22, 0xB4	; 180
    5a72:	70 e0       	ldi	r23, 0x00	; 0
    5a74:	02 c0       	rjmp	.+4      	; 0x5a7a <_ZN5Servo5writeEi+0x34>

void Servo::write(int value)
{
  if(value < MIN_PULSE_WIDTH)
  {  // treat values less than 544 as angles in degrees (valid values in microseconds are handled as microseconds)
    if(value < 0) value = 0;
    5a76:	60 e0       	ldi	r22, 0x00	; 0
    5a78:	70 e0       	ldi	r23, 0x00	; 0
    if(value > 180) value = 180;
    value = map(value, 0, 180, SERVO_MIN(),  SERVO_MAX());
    5a7a:	89 81       	ldd	r24, Y+1	; 0x01
    5a7c:	28 e8       	ldi	r18, 0x88	; 136
    5a7e:	30 e0       	ldi	r19, 0x00	; 0
    5a80:	59 01       	movw	r10, r18
    5a82:	a8 1a       	sub	r10, r24
    5a84:	b1 08       	sbc	r11, r1
    5a86:	87 fd       	sbrc	r24, 7
    5a88:	b3 94       	inc	r11
    5a8a:	aa 0c       	add	r10, r10
    5a8c:	bb 1c       	adc	r11, r11
    5a8e:	aa 0c       	add	r10, r10
    5a90:	bb 1c       	adc	r11, r11
    5a92:	0b 2c       	mov	r0, r11
    5a94:	00 0c       	add	r0, r0
    5a96:	cc 08       	sbc	r12, r12
    5a98:	dd 08       	sbc	r13, r13
    5a9a:	07 2e       	mov	r0, r23
    5a9c:	00 0c       	add	r0, r0
    5a9e:	88 0b       	sbc	r24, r24
    5aa0:	99 0b       	sbc	r25, r25
    5aa2:	2a 81       	ldd	r18, Y+2	; 0x02
    5aa4:	08 e5       	ldi	r16, 0x58	; 88
    5aa6:	12 e0       	ldi	r17, 0x02	; 2
    5aa8:	02 1b       	sub	r16, r18
    5aaa:	11 09       	sbc	r17, r1
    5aac:	27 fd       	sbrc	r18, 7
    5aae:	13 95       	inc	r17
    5ab0:	00 0f       	add	r16, r16
    5ab2:	11 1f       	adc	r17, r17
    5ab4:	00 0f       	add	r16, r16
    5ab6:	11 1f       	adc	r17, r17
    5ab8:	01 2e       	mov	r0, r17
    5aba:	00 0c       	add	r0, r0
    5abc:	22 0b       	sbc	r18, r18
    5abe:	33 0b       	sbc	r19, r19
    5ac0:	3f 93       	push	r19
    5ac2:	2f 93       	push	r18
    5ac4:	1f 93       	push	r17
    5ac6:	0f 93       	push	r16
    5ac8:	14 eb       	ldi	r17, 0xB4	; 180
    5aca:	e1 2e       	mov	r14, r17
    5acc:	f1 2c       	mov	r15, r1
    5ace:	00 e0       	ldi	r16, 0x00	; 0
    5ad0:	10 e0       	ldi	r17, 0x00	; 0
    5ad2:	20 e0       	ldi	r18, 0x00	; 0
    5ad4:	30 e0       	ldi	r19, 0x00	; 0
    5ad6:	a9 01       	movw	r20, r18
    5ad8:	0e 94 90 3b 	call	0x7720	; 0x7720 <_Z3maplllll>
    5adc:	0f 90       	pop	r0
    5ade:	0f 90       	pop	r0
    5ae0:	0f 90       	pop	r0
    5ae2:	0f 90       	pop	r0
  }
  this->writeMicroseconds(value);
    5ae4:	ce 01       	movw	r24, r28
}
    5ae6:	df 91       	pop	r29
    5ae8:	cf 91       	pop	r28
    5aea:	1f 91       	pop	r17
    5aec:	0f 91       	pop	r16
    5aee:	ff 90       	pop	r15
    5af0:	ef 90       	pop	r14
    5af2:	df 90       	pop	r13
    5af4:	cf 90       	pop	r12
    5af6:	bf 90       	pop	r11
    5af8:	af 90       	pop	r10
  {  // treat values less than 544 as angles in degrees (valid values in microseconds are handled as microseconds)
    if(value < 0) value = 0;
    if(value > 180) value = 180;
    value = map(value, 0, 180, SERVO_MIN(),  SERVO_MAX());
  }
  this->writeMicroseconds(value);
    5afa:	6f cf       	rjmp	.-290    	; 0x59da <_ZN5Servo17writeMicrosecondsEi>

00005afc <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    5afc:	cf 93       	push	r28
  uint8_t sreg = SREG;
    5afe:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    5b00:	f8 94       	cli
  if (!initialized) {
    5b02:	80 91 c6 05 	lds	r24, 0x05C6	; 0x8005c6 <_ZN8SPIClass11initializedE>
    5b06:	81 11       	cpse	r24, r1
    5b08:	27 c0       	rjmp	.+78     	; 0x5b58 <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    5b0a:	ec eb       	ldi	r30, 0xBC	; 188
    5b0c:	fc e0       	ldi	r31, 0x0C	; 12
    5b0e:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    5b10:	e6 e7       	ldi	r30, 0x76	; 118
    5b12:	fc e0       	ldi	r31, 0x0C	; 12
    5b14:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    5b16:	e8 2f       	mov	r30, r24
    5b18:	f0 e0       	ldi	r31, 0x00	; 0
    5b1a:	ee 0f       	add	r30, r30
    5b1c:	ff 1f       	adc	r31, r31
    5b1e:	ef 5f       	subi	r30, 0xFF	; 255
    5b20:	f2 4f       	sbci	r31, 0xF2	; 242
    5b22:	a5 91       	lpm	r26, Z+
    5b24:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    5b26:	ec 91       	ld	r30, X
    5b28:	e9 23       	and	r30, r25
    5b2a:	21 f4       	brne	.+8      	; 0x5b34 <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    5b2c:	61 e0       	ldi	r22, 0x01	; 1
    5b2e:	85 e3       	ldi	r24, 0x35	; 53
    5b30:	0e 94 3a 3b 	call	0x7674	; 0x7674 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    5b34:	61 e0       	ldi	r22, 0x01	; 1
    5b36:	85 e3       	ldi	r24, 0x35	; 53
    5b38:	0e 94 fe 3a 	call	0x75fc	; 0x75fc <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    5b3c:	8c b5       	in	r24, 0x2c	; 44
    5b3e:	80 61       	ori	r24, 0x10	; 16
    5b40:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    5b42:	8c b5       	in	r24, 0x2c	; 44
    5b44:	80 64       	ori	r24, 0x40	; 64
    5b46:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    5b48:	61 e0       	ldi	r22, 0x01	; 1
    5b4a:	84 e3       	ldi	r24, 0x34	; 52
    5b4c:	0e 94 fe 3a 	call	0x75fc	; 0x75fc <pinMode>
    pinMode(MOSI, OUTPUT);
    5b50:	61 e0       	ldi	r22, 0x01	; 1
    5b52:	83 e3       	ldi	r24, 0x33	; 51
    5b54:	0e 94 fe 3a 	call	0x75fc	; 0x75fc <pinMode>
  }
  initialized++; // reference count
    5b58:	80 91 c6 05 	lds	r24, 0x05C6	; 0x8005c6 <_ZN8SPIClass11initializedE>
    5b5c:	8f 5f       	subi	r24, 0xFF	; 255
    5b5e:	80 93 c6 05 	sts	0x05C6, r24	; 0x8005c6 <_ZN8SPIClass11initializedE>
  SREG = sreg;
    5b62:	cf bf       	out	0x3f, r28	; 63
}
    5b64:	cf 91       	pop	r28
    5b66:	08 95       	ret

00005b68 <__vector_20>:
void (*TimerOne::isrCallback)() = NULL;

// interrupt service routine that wraps a user defined function supplied by attachInterrupt
#if defined(__AVR__)
ISR(TIMER1_OVF_vect)
{
    5b68:	1f 92       	push	r1
    5b6a:	0f 92       	push	r0
    5b6c:	0f b6       	in	r0, 0x3f	; 63
    5b6e:	0f 92       	push	r0
    5b70:	11 24       	eor	r1, r1
    5b72:	0b b6       	in	r0, 0x3b	; 59
    5b74:	0f 92       	push	r0
    5b76:	2f 93       	push	r18
    5b78:	3f 93       	push	r19
    5b7a:	4f 93       	push	r20
    5b7c:	5f 93       	push	r21
    5b7e:	6f 93       	push	r22
    5b80:	7f 93       	push	r23
    5b82:	8f 93       	push	r24
    5b84:	9f 93       	push	r25
    5b86:	af 93       	push	r26
    5b88:	bf 93       	push	r27
    5b8a:	ef 93       	push	r30
    5b8c:	ff 93       	push	r31
  Timer1.isrCallback();
    5b8e:	e0 91 c7 05 	lds	r30, 0x05C7	; 0x8005c7 <_ZN8TimerOne11isrCallbackE>
    5b92:	f0 91 c8 05 	lds	r31, 0x05C8	; 0x8005c8 <_ZN8TimerOne11isrCallbackE+0x1>
    5b96:	19 95       	eicall
}
    5b98:	ff 91       	pop	r31
    5b9a:	ef 91       	pop	r30
    5b9c:	bf 91       	pop	r27
    5b9e:	af 91       	pop	r26
    5ba0:	9f 91       	pop	r25
    5ba2:	8f 91       	pop	r24
    5ba4:	7f 91       	pop	r23
    5ba6:	6f 91       	pop	r22
    5ba8:	5f 91       	pop	r21
    5baa:	4f 91       	pop	r20
    5bac:	3f 91       	pop	r19
    5bae:	2f 91       	pop	r18
    5bb0:	0f 90       	pop	r0
    5bb2:	0b be       	out	0x3b, r0	; 59
    5bb4:	0f 90       	pop	r0
    5bb6:	0f be       	out	0x3f, r0	; 63
    5bb8:	0f 90       	pop	r0
    5bba:	1f 90       	pop	r1
    5bbc:	18 95       	reti

00005bbe <twi_init>:
  bool flag = twi_timed_out_flag;
  if (clear_flag){
    twi_timed_out_flag = false;
  }
  return(flag);
}
    5bbe:	10 92 3c 06 	sts	0x063C, r1	; 0x80063c <twi_state>
    5bc2:	81 e0       	ldi	r24, 0x01	; 1
    5bc4:	80 93 3a 06 	sts	0x063A, r24	; 0x80063a <twi_sendStop>
    5bc8:	10 92 39 06 	sts	0x0639, r1	; 0x800639 <twi_inRepStart>
    5bcc:	61 e0       	ldi	r22, 0x01	; 1
    5bce:	84 e1       	ldi	r24, 0x14	; 20
    5bd0:	0e 94 3a 3b 	call	0x7674	; 0x7674 <digitalWrite>
    5bd4:	61 e0       	ldi	r22, 0x01	; 1
    5bd6:	85 e1       	ldi	r24, 0x15	; 21
    5bd8:	0e 94 3a 3b 	call	0x7674	; 0x7674 <digitalWrite>
    5bdc:	e9 eb       	ldi	r30, 0xB9	; 185
    5bde:	f0 e0       	ldi	r31, 0x00	; 0
    5be0:	80 81       	ld	r24, Z
    5be2:	8e 7f       	andi	r24, 0xFE	; 254
    5be4:	80 83       	st	Z, r24
    5be6:	80 81       	ld	r24, Z
    5be8:	8d 7f       	andi	r24, 0xFD	; 253
    5bea:	80 83       	st	Z, r24
    5bec:	88 e4       	ldi	r24, 0x48	; 72
    5bee:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5bf2:	85 e4       	ldi	r24, 0x45	; 69
    5bf4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5bf8:	08 95       	ret

00005bfa <twi_disable>:
    5bfa:	ec eb       	ldi	r30, 0xBC	; 188
    5bfc:	f0 e0       	ldi	r31, 0x00	; 0
    5bfe:	80 81       	ld	r24, Z
    5c00:	8a 7b       	andi	r24, 0xBA	; 186
    5c02:	80 83       	st	Z, r24
    5c04:	60 e0       	ldi	r22, 0x00	; 0
    5c06:	84 e1       	ldi	r24, 0x14	; 20
    5c08:	0e 94 3a 3b 	call	0x7674	; 0x7674 <digitalWrite>
    5c0c:	60 e0       	ldi	r22, 0x00	; 0
    5c0e:	85 e1       	ldi	r24, 0x15	; 21
    5c10:	0c 94 3a 3b 	jmp	0x7674	; 0x7674 <digitalWrite>

00005c14 <twi_setFrequency>:
    5c14:	9b 01       	movw	r18, r22
    5c16:	ac 01       	movw	r20, r24
    5c18:	60 e0       	ldi	r22, 0x00	; 0
    5c1a:	74 e2       	ldi	r23, 0x24	; 36
    5c1c:	84 ef       	ldi	r24, 0xF4	; 244
    5c1e:	90 e0       	ldi	r25, 0x00	; 0
    5c20:	0e 94 66 3e 	call	0x7ccc	; 0x7ccc <__udivmodsi4>
    5c24:	da 01       	movw	r26, r20
    5c26:	c9 01       	movw	r24, r18
    5c28:	40 97       	sbiw	r24, 0x10	; 16
    5c2a:	a1 09       	sbc	r26, r1
    5c2c:	b1 09       	sbc	r27, r1
    5c2e:	b6 95       	lsr	r27
    5c30:	a7 95       	ror	r26
    5c32:	97 95       	ror	r25
    5c34:	87 95       	ror	r24
    5c36:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5c3a:	08 95       	ret

00005c3c <twi_transmit>:
    5c3c:	40 91 eb 05 	lds	r20, 0x05EB	; 0x8005eb <twi_txBufferLength>
    5c40:	26 2f       	mov	r18, r22
    5c42:	30 e0       	ldi	r19, 0x00	; 0
    5c44:	24 0f       	add	r18, r20
    5c46:	31 1d       	adc	r19, r1
    5c48:	21 32       	cpi	r18, 0x21	; 33
    5c4a:	31 05       	cpc	r19, r1
    5c4c:	dc f4       	brge	.+54     	; 0x5c84 <twi_transmit+0x48>
    5c4e:	20 91 3c 06 	lds	r18, 0x063C	; 0x80063c <twi_state>
    5c52:	24 30       	cpi	r18, 0x04	; 4
    5c54:	c9 f4       	brne	.+50     	; 0x5c88 <twi_transmit+0x4c>
    5c56:	fc 01       	movw	r30, r24
    5c58:	80 e0       	ldi	r24, 0x00	; 0
    5c5a:	90 e0       	ldi	r25, 0x00	; 0
    5c5c:	86 17       	cp	r24, r22
    5c5e:	58 f4       	brcc	.+22     	; 0x5c76 <twi_transmit+0x3a>
    5c60:	30 91 eb 05 	lds	r19, 0x05EB	; 0x8005eb <twi_txBufferLength>
    5c64:	21 91       	ld	r18, Z+
    5c66:	dc 01       	movw	r26, r24
    5c68:	a3 51       	subi	r26, 0x13	; 19
    5c6a:	ba 4f       	sbci	r27, 0xFA	; 250
    5c6c:	a3 0f       	add	r26, r19
    5c6e:	b1 1d       	adc	r27, r1
    5c70:	2c 93       	st	X, r18
    5c72:	01 96       	adiw	r24, 0x01	; 1
    5c74:	f3 cf       	rjmp	.-26     	; 0x5c5c <twi_transmit+0x20>
    5c76:	80 91 eb 05 	lds	r24, 0x05EB	; 0x8005eb <twi_txBufferLength>
    5c7a:	68 0f       	add	r22, r24
    5c7c:	60 93 eb 05 	sts	0x05EB, r22	; 0x8005eb <twi_txBufferLength>
    5c80:	80 e0       	ldi	r24, 0x00	; 0
    5c82:	08 95       	ret
    5c84:	81 e0       	ldi	r24, 0x01	; 1
    5c86:	08 95       	ret
    5c88:	82 e0       	ldi	r24, 0x02	; 2
    5c8a:	08 95       	ret

00005c8c <twi_attachSlaveRxEvent>:
    5c8c:	90 93 30 06 	sts	0x0630, r25	; 0x800630 <twi_onSlaveReceive+0x1>
    5c90:	80 93 2f 06 	sts	0x062F, r24	; 0x80062f <twi_onSlaveReceive>
    5c94:	08 95       	ret

00005c96 <twi_attachSlaveTxEvent>:
    5c96:	90 93 32 06 	sts	0x0632, r25	; 0x800632 <twi_onSlaveTransmit+0x1>
    5c9a:	80 93 31 06 	sts	0x0631, r24	; 0x800631 <twi_onSlaveTransmit>
    5c9e:	08 95       	ret

00005ca0 <twi_releaseBus>:
    5ca0:	85 ec       	ldi	r24, 0xC5	; 197
    5ca2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5ca6:	10 92 3c 06 	sts	0x063C, r1	; 0x80063c <twi_state>
    5caa:	08 95       	ret

00005cac <twi_handleTimeout>:
    5cac:	cf 93       	push	r28
    5cae:	df 93       	push	r29
    5cb0:	91 e0       	ldi	r25, 0x01	; 1
    5cb2:	90 93 34 06 	sts	0x0634, r25	; 0x800634 <twi_timed_out_flag>
    5cb6:	88 23       	and	r24, r24
    5cb8:	51 f0       	breq	.+20     	; 0x5cce <twi_handleTimeout+0x22>
    5cba:	c0 91 b8 00 	lds	r28, 0x00B8	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5cbe:	d0 91 ba 00 	lds	r29, 0x00BA	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7c00ba>
    5cc2:	9b df       	rcall	.-202    	; 0x5bfa <twi_disable>
    5cc4:	7c df       	rcall	.-264    	; 0x5bbe <twi_init>
    5cc6:	d0 93 ba 00 	sts	0x00BA, r29	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7c00ba>
    5cca:	c0 93 b8 00 	sts	0x00B8, r28	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5cce:	df 91       	pop	r29
    5cd0:	cf 91       	pop	r28
    5cd2:	08 95       	ret

00005cd4 <twi_readFrom>:
    5cd4:	4f 92       	push	r4
    5cd6:	5f 92       	push	r5
    5cd8:	6f 92       	push	r6
    5cda:	7f 92       	push	r7
    5cdc:	8f 92       	push	r8
    5cde:	9f 92       	push	r9
    5ce0:	af 92       	push	r10
    5ce2:	bf 92       	push	r11
    5ce4:	cf 92       	push	r12
    5ce6:	df 92       	push	r13
    5ce8:	ef 92       	push	r14
    5cea:	ff 92       	push	r15
    5cec:	0f 93       	push	r16
    5cee:	1f 93       	push	r17
    5cf0:	cf 93       	push	r28
    5cf2:	df 93       	push	r29
    5cf4:	f8 2e       	mov	r15, r24
    5cf6:	16 2f       	mov	r17, r22
    5cf8:	07 2f       	mov	r16, r23
    5cfa:	c4 2f       	mov	r28, r20
    5cfc:	e2 2e       	mov	r14, r18
    5cfe:	41 32       	cpi	r20, 0x21	; 33
    5d00:	08 f0       	brcs	.+2      	; 0x5d04 <twi_readFrom+0x30>
    5d02:	bc c0       	rjmp	.+376    	; 0x5e7c <twi_readFrom+0x1a8>
    5d04:	0e 94 f3 38 	call	0x71e6	; 0x71e6 <micros>
    5d08:	4b 01       	movw	r8, r22
    5d0a:	5c 01       	movw	r10, r24
    5d0c:	d0 91 3c 06 	lds	r29, 0x063C	; 0x80063c <twi_state>
    5d10:	dd 23       	and	r29, r29
    5d12:	29 f1       	breq	.+74     	; 0x5d5e <twi_readFrom+0x8a>
    5d14:	80 91 35 06 	lds	r24, 0x0635	; 0x800635 <twi_timeout_us>
    5d18:	90 91 36 06 	lds	r25, 0x0636	; 0x800636 <twi_timeout_us+0x1>
    5d1c:	a0 91 37 06 	lds	r26, 0x0637	; 0x800637 <twi_timeout_us+0x2>
    5d20:	b0 91 38 06 	lds	r27, 0x0638	; 0x800638 <twi_timeout_us+0x3>
    5d24:	89 2b       	or	r24, r25
    5d26:	8a 2b       	or	r24, r26
    5d28:	8b 2b       	or	r24, r27
    5d2a:	81 f3       	breq	.-32     	; 0x5d0c <twi_readFrom+0x38>
    5d2c:	0e 94 f3 38 	call	0x71e6	; 0x71e6 <micros>
    5d30:	40 90 35 06 	lds	r4, 0x0635	; 0x800635 <twi_timeout_us>
    5d34:	50 90 36 06 	lds	r5, 0x0636	; 0x800636 <twi_timeout_us+0x1>
    5d38:	60 90 37 06 	lds	r6, 0x0637	; 0x800637 <twi_timeout_us+0x2>
    5d3c:	70 90 38 06 	lds	r7, 0x0638	; 0x800638 <twi_timeout_us+0x3>
    5d40:	dc 01       	movw	r26, r24
    5d42:	cb 01       	movw	r24, r22
    5d44:	88 19       	sub	r24, r8
    5d46:	99 09       	sbc	r25, r9
    5d48:	aa 09       	sbc	r26, r10
    5d4a:	bb 09       	sbc	r27, r11
    5d4c:	48 16       	cp	r4, r24
    5d4e:	59 06       	cpc	r5, r25
    5d50:	6a 06       	cpc	r6, r26
    5d52:	7b 06       	cpc	r7, r27
    5d54:	d8 f6       	brcc	.-74     	; 0x5d0c <twi_readFrom+0x38>
    5d56:	80 91 33 06 	lds	r24, 0x0633	; 0x800633 <twi_do_reset_on_timeout>
    5d5a:	a8 df       	rcall	.-176    	; 0x5cac <twi_handleTimeout>
    5d5c:	8f c0       	rjmp	.+286    	; 0x5e7c <twi_readFrom+0x1a8>
    5d5e:	81 e0       	ldi	r24, 0x01	; 1
    5d60:	80 93 3c 06 	sts	0x063C, r24	; 0x80063c <twi_state>
    5d64:	e0 92 3a 06 	sts	0x063A, r14	; 0x80063a <twi_sendStop>
    5d68:	9f ef       	ldi	r25, 0xFF	; 255
    5d6a:	90 93 c9 05 	sts	0x05C9, r25	; 0x8005c9 <twi_error>
    5d6e:	10 92 0e 06 	sts	0x060E, r1	; 0x80060e <twi_masterBufferIndex>
    5d72:	9c 0f       	add	r25, r28
    5d74:	90 93 0d 06 	sts	0x060D, r25	; 0x80060d <twi_masterBufferLength>
    5d78:	80 93 3b 06 	sts	0x063B, r24	; 0x80063b <twi_slarw>
    5d7c:	90 91 3b 06 	lds	r25, 0x063B	; 0x80063b <twi_slarw>
    5d80:	8f 2d       	mov	r24, r15
    5d82:	88 0f       	add	r24, r24
    5d84:	89 2b       	or	r24, r25
    5d86:	80 93 3b 06 	sts	0x063B, r24	; 0x80063b <twi_slarw>
    5d8a:	80 91 39 06 	lds	r24, 0x0639	; 0x800639 <twi_inRepStart>
    5d8e:	81 30       	cpi	r24, 0x01	; 1
    5d90:	89 f5       	brne	.+98     	; 0x5df4 <twi_readFrom+0x120>
    5d92:	10 92 39 06 	sts	0x0639, r1	; 0x800639 <twi_inRepStart>
    5d96:	0e 94 f3 38 	call	0x71e6	; 0x71e6 <micros>
    5d9a:	6b 01       	movw	r12, r22
    5d9c:	7c 01       	movw	r14, r24
    5d9e:	80 91 3b 06 	lds	r24, 0x063B	; 0x80063b <twi_slarw>
    5da2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5da6:	80 91 35 06 	lds	r24, 0x0635	; 0x800635 <twi_timeout_us>
    5daa:	90 91 36 06 	lds	r25, 0x0636	; 0x800636 <twi_timeout_us+0x1>
    5dae:	a0 91 37 06 	lds	r26, 0x0637	; 0x800637 <twi_timeout_us+0x2>
    5db2:	b0 91 38 06 	lds	r27, 0x0638	; 0x800638 <twi_timeout_us+0x3>
    5db6:	89 2b       	or	r24, r25
    5db8:	8a 2b       	or	r24, r26
    5dba:	8b 2b       	or	r24, r27
    5dbc:	a9 f0       	breq	.+42     	; 0x5de8 <twi_readFrom+0x114>
    5dbe:	0e 94 f3 38 	call	0x71e6	; 0x71e6 <micros>
    5dc2:	80 90 35 06 	lds	r8, 0x0635	; 0x800635 <twi_timeout_us>
    5dc6:	90 90 36 06 	lds	r9, 0x0636	; 0x800636 <twi_timeout_us+0x1>
    5dca:	a0 90 37 06 	lds	r10, 0x0637	; 0x800637 <twi_timeout_us+0x2>
    5dce:	b0 90 38 06 	lds	r11, 0x0638	; 0x800638 <twi_timeout_us+0x3>
    5dd2:	dc 01       	movw	r26, r24
    5dd4:	cb 01       	movw	r24, r22
    5dd6:	8c 19       	sub	r24, r12
    5dd8:	9d 09       	sbc	r25, r13
    5dda:	ae 09       	sbc	r26, r14
    5ddc:	bf 09       	sbc	r27, r15
    5dde:	88 16       	cp	r8, r24
    5de0:	99 06       	cpc	r9, r25
    5de2:	aa 06       	cpc	r10, r26
    5de4:	bb 06       	cpc	r11, r27
    5de6:	90 f1       	brcs	.+100    	; 0x5e4c <twi_readFrom+0x178>
    5de8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5dec:	83 fd       	sbrc	r24, 3
    5dee:	d7 cf       	rjmp	.-82     	; 0x5d9e <twi_readFrom+0xca>
    5df0:	85 ec       	ldi	r24, 0xC5	; 197
    5df2:	01 c0       	rjmp	.+2      	; 0x5df6 <twi_readFrom+0x122>
    5df4:	85 ee       	ldi	r24, 0xE5	; 229
    5df6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5dfa:	0e 94 f3 38 	call	0x71e6	; 0x71e6 <micros>
    5dfe:	6b 01       	movw	r12, r22
    5e00:	7c 01       	movw	r14, r24
    5e02:	80 91 3c 06 	lds	r24, 0x063C	; 0x80063c <twi_state>
    5e06:	81 30       	cpi	r24, 0x01	; 1
    5e08:	29 f5       	brne	.+74     	; 0x5e54 <twi_readFrom+0x180>
    5e0a:	80 91 35 06 	lds	r24, 0x0635	; 0x800635 <twi_timeout_us>
    5e0e:	90 91 36 06 	lds	r25, 0x0636	; 0x800636 <twi_timeout_us+0x1>
    5e12:	a0 91 37 06 	lds	r26, 0x0637	; 0x800637 <twi_timeout_us+0x2>
    5e16:	b0 91 38 06 	lds	r27, 0x0638	; 0x800638 <twi_timeout_us+0x3>
    5e1a:	89 2b       	or	r24, r25
    5e1c:	8a 2b       	or	r24, r26
    5e1e:	8b 2b       	or	r24, r27
    5e20:	81 f3       	breq	.-32     	; 0x5e02 <twi_readFrom+0x12e>
    5e22:	0e 94 f3 38 	call	0x71e6	; 0x71e6 <micros>
    5e26:	80 90 35 06 	lds	r8, 0x0635	; 0x800635 <twi_timeout_us>
    5e2a:	90 90 36 06 	lds	r9, 0x0636	; 0x800636 <twi_timeout_us+0x1>
    5e2e:	a0 90 37 06 	lds	r10, 0x0637	; 0x800637 <twi_timeout_us+0x2>
    5e32:	b0 90 38 06 	lds	r11, 0x0638	; 0x800638 <twi_timeout_us+0x3>
    5e36:	dc 01       	movw	r26, r24
    5e38:	cb 01       	movw	r24, r22
    5e3a:	8c 19       	sub	r24, r12
    5e3c:	9d 09       	sbc	r25, r13
    5e3e:	ae 09       	sbc	r26, r14
    5e40:	bf 09       	sbc	r27, r15
    5e42:	88 16       	cp	r8, r24
    5e44:	99 06       	cpc	r9, r25
    5e46:	aa 06       	cpc	r10, r26
    5e48:	bb 06       	cpc	r11, r27
    5e4a:	d8 f6       	brcc	.-74     	; 0x5e02 <twi_readFrom+0x12e>
    5e4c:	80 91 33 06 	lds	r24, 0x0633	; 0x800633 <twi_do_reset_on_timeout>
    5e50:	2d df       	rcall	.-422    	; 0x5cac <twi_handleTimeout>
    5e52:	15 c0       	rjmp	.+42     	; 0x5e7e <twi_readFrom+0x1aa>
    5e54:	80 91 0e 06 	lds	r24, 0x060E	; 0x80060e <twi_masterBufferIndex>
    5e58:	8c 17       	cp	r24, r28
    5e5a:	10 f4       	brcc	.+4      	; 0x5e60 <twi_readFrom+0x18c>
    5e5c:	c0 91 0e 06 	lds	r28, 0x060E	; 0x80060e <twi_masterBufferIndex>
    5e60:	af e0       	ldi	r26, 0x0F	; 15
    5e62:	b6 e0       	ldi	r27, 0x06	; 6
    5e64:	91 2f       	mov	r25, r17
    5e66:	e1 2f       	mov	r30, r17
    5e68:	f0 2f       	mov	r31, r16
    5e6a:	8e 2f       	mov	r24, r30
    5e6c:	89 1b       	sub	r24, r25
    5e6e:	8c 17       	cp	r24, r28
    5e70:	18 f4       	brcc	.+6      	; 0x5e78 <twi_readFrom+0x1a4>
    5e72:	8d 91       	ld	r24, X+
    5e74:	81 93       	st	Z+, r24
    5e76:	f9 cf       	rjmp	.-14     	; 0x5e6a <twi_readFrom+0x196>
    5e78:	dc 2f       	mov	r29, r28
    5e7a:	01 c0       	rjmp	.+2      	; 0x5e7e <twi_readFrom+0x1aa>
    5e7c:	d0 e0       	ldi	r29, 0x00	; 0
    5e7e:	8d 2f       	mov	r24, r29
    5e80:	df 91       	pop	r29
    5e82:	cf 91       	pop	r28
    5e84:	1f 91       	pop	r17
    5e86:	0f 91       	pop	r16
    5e88:	ff 90       	pop	r15
    5e8a:	ef 90       	pop	r14
    5e8c:	df 90       	pop	r13
    5e8e:	cf 90       	pop	r12
    5e90:	bf 90       	pop	r11
    5e92:	af 90       	pop	r10
    5e94:	9f 90       	pop	r9
    5e96:	8f 90       	pop	r8
    5e98:	7f 90       	pop	r7
    5e9a:	6f 90       	pop	r6
    5e9c:	5f 90       	pop	r5
    5e9e:	4f 90       	pop	r4
    5ea0:	08 95       	ret

00005ea2 <twi_writeTo>:
    5ea2:	4f 92       	push	r4
    5ea4:	5f 92       	push	r5
    5ea6:	6f 92       	push	r6
    5ea8:	7f 92       	push	r7
    5eaa:	8f 92       	push	r8
    5eac:	9f 92       	push	r9
    5eae:	af 92       	push	r10
    5eb0:	bf 92       	push	r11
    5eb2:	cf 92       	push	r12
    5eb4:	df 92       	push	r13
    5eb6:	ef 92       	push	r14
    5eb8:	ff 92       	push	r15
    5eba:	0f 93       	push	r16
    5ebc:	1f 93       	push	r17
    5ebe:	cf 93       	push	r28
    5ec0:	df 93       	push	r29
    5ec2:	41 32       	cpi	r20, 0x21	; 33
    5ec4:	08 f0       	brcs	.+2      	; 0x5ec8 <twi_writeTo+0x26>
    5ec6:	c5 c0       	rjmp	.+394    	; 0x6052 <twi_writeTo+0x1b0>
    5ec8:	12 2f       	mov	r17, r18
    5eca:	f4 2e       	mov	r15, r20
    5ecc:	d7 2e       	mov	r13, r23
    5ece:	e6 2e       	mov	r14, r22
    5ed0:	d8 2f       	mov	r29, r24
    5ed2:	0e 94 f3 38 	call	0x71e6	; 0x71e6 <micros>
    5ed6:	4b 01       	movw	r8, r22
    5ed8:	5c 01       	movw	r10, r24
    5eda:	c0 91 3c 06 	lds	r28, 0x063C	; 0x80063c <twi_state>
    5ede:	cc 23       	and	r28, r28
    5ee0:	11 f1       	breq	.+68     	; 0x5f26 <twi_writeTo+0x84>
    5ee2:	80 91 35 06 	lds	r24, 0x0635	; 0x800635 <twi_timeout_us>
    5ee6:	90 91 36 06 	lds	r25, 0x0636	; 0x800636 <twi_timeout_us+0x1>
    5eea:	a0 91 37 06 	lds	r26, 0x0637	; 0x800637 <twi_timeout_us+0x2>
    5eee:	b0 91 38 06 	lds	r27, 0x0638	; 0x800638 <twi_timeout_us+0x3>
    5ef2:	89 2b       	or	r24, r25
    5ef4:	8a 2b       	or	r24, r26
    5ef6:	8b 2b       	or	r24, r27
    5ef8:	81 f3       	breq	.-32     	; 0x5eda <twi_writeTo+0x38>
    5efa:	0e 94 f3 38 	call	0x71e6	; 0x71e6 <micros>
    5efe:	40 90 35 06 	lds	r4, 0x0635	; 0x800635 <twi_timeout_us>
    5f02:	50 90 36 06 	lds	r5, 0x0636	; 0x800636 <twi_timeout_us+0x1>
    5f06:	60 90 37 06 	lds	r6, 0x0637	; 0x800637 <twi_timeout_us+0x2>
    5f0a:	70 90 38 06 	lds	r7, 0x0638	; 0x800638 <twi_timeout_us+0x3>
    5f0e:	dc 01       	movw	r26, r24
    5f10:	cb 01       	movw	r24, r22
    5f12:	88 19       	sub	r24, r8
    5f14:	99 09       	sbc	r25, r9
    5f16:	aa 09       	sbc	r26, r10
    5f18:	bb 09       	sbc	r27, r11
    5f1a:	48 16       	cp	r4, r24
    5f1c:	59 06       	cpc	r5, r25
    5f1e:	6a 06       	cpc	r6, r26
    5f20:	7b 06       	cpc	r7, r27
    5f22:	d8 f6       	brcc	.-74     	; 0x5eda <twi_writeTo+0x38>
    5f24:	83 c0       	rjmp	.+262    	; 0x602c <twi_writeTo+0x18a>
    5f26:	82 e0       	ldi	r24, 0x02	; 2
    5f28:	80 93 3c 06 	sts	0x063C, r24	; 0x80063c <twi_state>
    5f2c:	00 93 3a 06 	sts	0x063A, r16	; 0x80063a <twi_sendStop>
    5f30:	8f ef       	ldi	r24, 0xFF	; 255
    5f32:	80 93 c9 05 	sts	0x05C9, r24	; 0x8005c9 <twi_error>
    5f36:	10 92 0e 06 	sts	0x060E, r1	; 0x80060e <twi_masterBufferIndex>
    5f3a:	f0 92 0d 06 	sts	0x060D, r15	; 0x80060d <twi_masterBufferLength>
    5f3e:	9e 2d       	mov	r25, r14
    5f40:	af e0       	ldi	r26, 0x0F	; 15
    5f42:	b6 e0       	ldi	r27, 0x06	; 6
    5f44:	ee 2d       	mov	r30, r14
    5f46:	fd 2d       	mov	r31, r13
    5f48:	8e 2f       	mov	r24, r30
    5f4a:	89 1b       	sub	r24, r25
    5f4c:	8f 15       	cp	r24, r15
    5f4e:	18 f4       	brcc	.+6      	; 0x5f56 <twi_writeTo+0xb4>
    5f50:	81 91       	ld	r24, Z+
    5f52:	8d 93       	st	X+, r24
    5f54:	f9 cf       	rjmp	.-14     	; 0x5f48 <twi_writeTo+0xa6>
    5f56:	10 92 3b 06 	sts	0x063B, r1	; 0x80063b <twi_slarw>
    5f5a:	90 91 3b 06 	lds	r25, 0x063B	; 0x80063b <twi_slarw>
    5f5e:	dd 0f       	add	r29, r29
    5f60:	d9 2b       	or	r29, r25
    5f62:	d0 93 3b 06 	sts	0x063B, r29	; 0x80063b <twi_slarw>
    5f66:	80 91 39 06 	lds	r24, 0x0639	; 0x800639 <twi_inRepStart>
    5f6a:	81 30       	cpi	r24, 0x01	; 1
    5f6c:	89 f5       	brne	.+98     	; 0x5fd0 <twi_writeTo+0x12e>
    5f6e:	10 92 39 06 	sts	0x0639, r1	; 0x800639 <twi_inRepStart>
    5f72:	0e 94 f3 38 	call	0x71e6	; 0x71e6 <micros>
    5f76:	6b 01       	movw	r12, r22
    5f78:	7c 01       	movw	r14, r24
    5f7a:	80 91 3b 06 	lds	r24, 0x063B	; 0x80063b <twi_slarw>
    5f7e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5f82:	80 91 35 06 	lds	r24, 0x0635	; 0x800635 <twi_timeout_us>
    5f86:	90 91 36 06 	lds	r25, 0x0636	; 0x800636 <twi_timeout_us+0x1>
    5f8a:	a0 91 37 06 	lds	r26, 0x0637	; 0x800637 <twi_timeout_us+0x2>
    5f8e:	b0 91 38 06 	lds	r27, 0x0638	; 0x800638 <twi_timeout_us+0x3>
    5f92:	89 2b       	or	r24, r25
    5f94:	8a 2b       	or	r24, r26
    5f96:	8b 2b       	or	r24, r27
    5f98:	a9 f0       	breq	.+42     	; 0x5fc4 <twi_writeTo+0x122>
    5f9a:	0e 94 f3 38 	call	0x71e6	; 0x71e6 <micros>
    5f9e:	80 90 35 06 	lds	r8, 0x0635	; 0x800635 <twi_timeout_us>
    5fa2:	90 90 36 06 	lds	r9, 0x0636	; 0x800636 <twi_timeout_us+0x1>
    5fa6:	a0 90 37 06 	lds	r10, 0x0637	; 0x800637 <twi_timeout_us+0x2>
    5faa:	b0 90 38 06 	lds	r11, 0x0638	; 0x800638 <twi_timeout_us+0x3>
    5fae:	dc 01       	movw	r26, r24
    5fb0:	cb 01       	movw	r24, r22
    5fb2:	8c 19       	sub	r24, r12
    5fb4:	9d 09       	sbc	r25, r13
    5fb6:	ae 09       	sbc	r26, r14
    5fb8:	bf 09       	sbc	r27, r15
    5fba:	88 16       	cp	r8, r24
    5fbc:	99 06       	cpc	r9, r25
    5fbe:	aa 06       	cpc	r10, r26
    5fc0:	bb 06       	cpc	r11, r27
    5fc2:	a0 f1       	brcs	.+104    	; 0x602c <twi_writeTo+0x18a>
    5fc4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5fc8:	83 fd       	sbrc	r24, 3
    5fca:	d7 cf       	rjmp	.-82     	; 0x5f7a <twi_writeTo+0xd8>
    5fcc:	85 ec       	ldi	r24, 0xC5	; 197
    5fce:	01 c0       	rjmp	.+2      	; 0x5fd2 <twi_writeTo+0x130>
    5fd0:	85 ee       	ldi	r24, 0xE5	; 229
    5fd2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5fd6:	0e 94 f3 38 	call	0x71e6	; 0x71e6 <micros>
    5fda:	6b 01       	movw	r12, r22
    5fdc:	7c 01       	movw	r14, r24
    5fde:	11 23       	and	r17, r17
    5fe0:	51 f1       	breq	.+84     	; 0x6036 <twi_writeTo+0x194>
    5fe2:	80 91 3c 06 	lds	r24, 0x063C	; 0x80063c <twi_state>
    5fe6:	82 30       	cpi	r24, 0x02	; 2
    5fe8:	31 f5       	brne	.+76     	; 0x6036 <twi_writeTo+0x194>
    5fea:	80 91 35 06 	lds	r24, 0x0635	; 0x800635 <twi_timeout_us>
    5fee:	90 91 36 06 	lds	r25, 0x0636	; 0x800636 <twi_timeout_us+0x1>
    5ff2:	a0 91 37 06 	lds	r26, 0x0637	; 0x800637 <twi_timeout_us+0x2>
    5ff6:	b0 91 38 06 	lds	r27, 0x0638	; 0x800638 <twi_timeout_us+0x3>
    5ffa:	89 2b       	or	r24, r25
    5ffc:	8a 2b       	or	r24, r26
    5ffe:	8b 2b       	or	r24, r27
    6000:	71 f3       	breq	.-36     	; 0x5fde <twi_writeTo+0x13c>
    6002:	0e 94 f3 38 	call	0x71e6	; 0x71e6 <micros>
    6006:	80 90 35 06 	lds	r8, 0x0635	; 0x800635 <twi_timeout_us>
    600a:	90 90 36 06 	lds	r9, 0x0636	; 0x800636 <twi_timeout_us+0x1>
    600e:	a0 90 37 06 	lds	r10, 0x0637	; 0x800637 <twi_timeout_us+0x2>
    6012:	b0 90 38 06 	lds	r11, 0x0638	; 0x800638 <twi_timeout_us+0x3>
    6016:	dc 01       	movw	r26, r24
    6018:	cb 01       	movw	r24, r22
    601a:	8c 19       	sub	r24, r12
    601c:	9d 09       	sbc	r25, r13
    601e:	ae 09       	sbc	r26, r14
    6020:	bf 09       	sbc	r27, r15
    6022:	88 16       	cp	r8, r24
    6024:	99 06       	cpc	r9, r25
    6026:	aa 06       	cpc	r10, r26
    6028:	bb 06       	cpc	r11, r27
    602a:	c8 f6       	brcc	.-78     	; 0x5fde <twi_writeTo+0x13c>
    602c:	80 91 33 06 	lds	r24, 0x0633	; 0x800633 <twi_do_reset_on_timeout>
    6030:	3d de       	rcall	.-902    	; 0x5cac <twi_handleTimeout>
    6032:	c5 e0       	ldi	r28, 0x05	; 5
    6034:	13 c0       	rjmp	.+38     	; 0x605c <twi_writeTo+0x1ba>
    6036:	80 91 c9 05 	lds	r24, 0x05C9	; 0x8005c9 <twi_error>
    603a:	8f 3f       	cpi	r24, 0xFF	; 255
    603c:	79 f0       	breq	.+30     	; 0x605c <twi_writeTo+0x1ba>
    603e:	80 91 c9 05 	lds	r24, 0x05C9	; 0x8005c9 <twi_error>
    6042:	80 32       	cpi	r24, 0x20	; 32
    6044:	41 f0       	breq	.+16     	; 0x6056 <twi_writeTo+0x1b4>
    6046:	80 91 c9 05 	lds	r24, 0x05C9	; 0x8005c9 <twi_error>
    604a:	80 33       	cpi	r24, 0x30	; 48
    604c:	31 f0       	breq	.+12     	; 0x605a <twi_writeTo+0x1b8>
    604e:	c4 e0       	ldi	r28, 0x04	; 4
    6050:	05 c0       	rjmp	.+10     	; 0x605c <twi_writeTo+0x1ba>
    6052:	c1 e0       	ldi	r28, 0x01	; 1
    6054:	03 c0       	rjmp	.+6      	; 0x605c <twi_writeTo+0x1ba>
    6056:	c2 e0       	ldi	r28, 0x02	; 2
    6058:	01 c0       	rjmp	.+2      	; 0x605c <twi_writeTo+0x1ba>
    605a:	c3 e0       	ldi	r28, 0x03	; 3
    605c:	8c 2f       	mov	r24, r28
    605e:	df 91       	pop	r29
    6060:	cf 91       	pop	r28
    6062:	1f 91       	pop	r17
    6064:	0f 91       	pop	r16
    6066:	ff 90       	pop	r15
    6068:	ef 90       	pop	r14
    606a:	df 90       	pop	r13
    606c:	cf 90       	pop	r12
    606e:	bf 90       	pop	r11
    6070:	af 90       	pop	r10
    6072:	9f 90       	pop	r9
    6074:	8f 90       	pop	r8
    6076:	7f 90       	pop	r7
    6078:	6f 90       	pop	r6
    607a:	5f 90       	pop	r5
    607c:	4f 90       	pop	r4
    607e:	08 95       	ret

00006080 <twi_stop>:
    6080:	85 ed       	ldi	r24, 0xD5	; 213
    6082:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    6086:	80 91 35 06 	lds	r24, 0x0635	; 0x800635 <twi_timeout_us>
    608a:	90 91 36 06 	lds	r25, 0x0636	; 0x800636 <twi_timeout_us+0x1>
    608e:	a0 91 37 06 	lds	r26, 0x0637	; 0x800637 <twi_timeout_us+0x2>
    6092:	b0 91 38 06 	lds	r27, 0x0638	; 0x800638 <twi_timeout_us+0x3>
    6096:	07 96       	adiw	r24, 0x07	; 7
    6098:	a1 1d       	adc	r26, r1
    609a:	b1 1d       	adc	r27, r1
    609c:	23 e0       	ldi	r18, 0x03	; 3
    609e:	b6 95       	lsr	r27
    60a0:	a7 95       	ror	r26
    60a2:	97 95       	ror	r25
    60a4:	87 95       	ror	r24
    60a6:	2a 95       	dec	r18
    60a8:	d1 f7       	brne	.-12     	; 0x609e <twi_stop+0x1e>
    60aa:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    60ae:	24 ff       	sbrs	r18, 4
    60b0:	1b c0       	rjmp	.+54     	; 0x60e8 <twi_stop+0x68>
    60b2:	40 91 35 06 	lds	r20, 0x0635	; 0x800635 <twi_timeout_us>
    60b6:	50 91 36 06 	lds	r21, 0x0636	; 0x800636 <twi_timeout_us+0x1>
    60ba:	60 91 37 06 	lds	r22, 0x0637	; 0x800637 <twi_timeout_us+0x2>
    60be:	70 91 38 06 	lds	r23, 0x0638	; 0x800638 <twi_timeout_us+0x3>
    60c2:	45 2b       	or	r20, r21
    60c4:	46 2b       	or	r20, r22
    60c6:	47 2b       	or	r20, r23
    60c8:	81 f3       	breq	.-32     	; 0x60aa <twi_stop+0x2a>
    60ca:	00 97       	sbiw	r24, 0x00	; 0
    60cc:	a1 05       	cpc	r26, r1
    60ce:	b1 05       	cpc	r27, r1
    60d0:	41 f0       	breq	.+16     	; 0x60e2 <twi_stop+0x62>
    60d2:	25 e3       	ldi	r18, 0x35	; 53
    60d4:	2a 95       	dec	r18
    60d6:	f1 f7       	brne	.-4      	; 0x60d4 <twi_stop+0x54>
    60d8:	00 00       	nop
    60da:	01 97       	sbiw	r24, 0x01	; 1
    60dc:	a1 09       	sbc	r26, r1
    60de:	b1 09       	sbc	r27, r1
    60e0:	e4 cf       	rjmp	.-56     	; 0x60aa <twi_stop+0x2a>
    60e2:	80 91 33 06 	lds	r24, 0x0633	; 0x800633 <twi_do_reset_on_timeout>
    60e6:	e2 cd       	rjmp	.-1084   	; 0x5cac <twi_handleTimeout>
    60e8:	10 92 3c 06 	sts	0x063C, r1	; 0x80063c <twi_state>
    60ec:	08 95       	ret

000060ee <__vector_39>:

ISR(TWI_vect)
{
    60ee:	1f 92       	push	r1
    60f0:	0f 92       	push	r0
    60f2:	0f b6       	in	r0, 0x3f	; 63
    60f4:	0f 92       	push	r0
    60f6:	11 24       	eor	r1, r1
    60f8:	0b b6       	in	r0, 0x3b	; 59
    60fa:	0f 92       	push	r0
    60fc:	2f 93       	push	r18
    60fe:	3f 93       	push	r19
    6100:	4f 93       	push	r20
    6102:	5f 93       	push	r21
    6104:	6f 93       	push	r22
    6106:	7f 93       	push	r23
    6108:	8f 93       	push	r24
    610a:	9f 93       	push	r25
    610c:	af 93       	push	r26
    610e:	bf 93       	push	r27
    6110:	ef 93       	push	r30
    6112:	ff 93       	push	r31
  switch(TW_STATUS){
    6114:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    6118:	88 7f       	andi	r24, 0xF8	; 248
    611a:	80 36       	cpi	r24, 0x60	; 96
    611c:	09 f4       	brne	.+2      	; 0x6120 <__vector_39+0x32>
    611e:	9d c0       	rjmp	.+314    	; 0x625a <__vector_39+0x16c>
    6120:	70 f5       	brcc	.+92     	; 0x617e <__vector_39+0x90>
    6122:	88 32       	cpi	r24, 0x28	; 40
    6124:	09 f4       	brne	.+2      	; 0x6128 <__vector_39+0x3a>
    6126:	5c c0       	rjmp	.+184    	; 0x61e0 <__vector_39+0xf2>
    6128:	90 f4       	brcc	.+36     	; 0x614e <__vector_39+0x60>
    612a:	80 31       	cpi	r24, 0x10	; 16
    612c:	09 f4       	brne	.+2      	; 0x6130 <__vector_39+0x42>
    612e:	55 c0       	rjmp	.+170    	; 0x61da <__vector_39+0xec>
    6130:	38 f4       	brcc	.+14     	; 0x6140 <__vector_39+0x52>
    6132:	88 23       	and	r24, r24
    6134:	09 f4       	brne	.+2      	; 0x6138 <__vector_39+0x4a>
    6136:	f3 c0       	rjmp	.+486    	; 0x631e <__vector_39+0x230>
    6138:	88 30       	cpi	r24, 0x08	; 8
    613a:	09 f4       	brne	.+2      	; 0x613e <__vector_39+0x50>
    613c:	4e c0       	rjmp	.+156    	; 0x61da <__vector_39+0xec>
    613e:	f2 c0       	rjmp	.+484    	; 0x6324 <__vector_39+0x236>
    6140:	88 31       	cpi	r24, 0x18	; 24
    6142:	09 f4       	brne	.+2      	; 0x6146 <__vector_39+0x58>
    6144:	4d c0       	rjmp	.+154    	; 0x61e0 <__vector_39+0xf2>
    6146:	80 32       	cpi	r24, 0x20	; 32
    6148:	09 f4       	brne	.+2      	; 0x614c <__vector_39+0x5e>
    614a:	5e c0       	rjmp	.+188    	; 0x6208 <__vector_39+0x11a>
    614c:	eb c0       	rjmp	.+470    	; 0x6324 <__vector_39+0x236>
    614e:	80 34       	cpi	r24, 0x40	; 64
    6150:	09 f4       	brne	.+2      	; 0x6154 <__vector_39+0x66>
    6152:	69 c0       	rjmp	.+210    	; 0x6226 <__vector_39+0x138>
    6154:	50 f4       	brcc	.+20     	; 0x616a <__vector_39+0x7c>
    6156:	80 33       	cpi	r24, 0x30	; 48
    6158:	09 f4       	brne	.+2      	; 0x615c <__vector_39+0x6e>
    615a:	56 c0       	rjmp	.+172    	; 0x6208 <__vector_39+0x11a>
    615c:	88 33       	cpi	r24, 0x38	; 56
    615e:	09 f0       	breq	.+2      	; 0x6162 <__vector_39+0x74>
    6160:	e1 c0       	rjmp	.+450    	; 0x6324 <__vector_39+0x236>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    6162:	80 93 c9 05 	sts	0x05C9, r24	; 0x8005c9 <twi_error>
      twi_releaseBus();
    6166:	9c dd       	rcall	.-1224   	; 0x5ca0 <twi_releaseBus>
      break;
    6168:	dd c0       	rjmp	.+442    	; 0x6324 <__vector_39+0x236>
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    616a:	80 35       	cpi	r24, 0x50	; 80
    616c:	09 f4       	brne	.+2      	; 0x6170 <__vector_39+0x82>
    616e:	4f c0       	rjmp	.+158    	; 0x620e <__vector_39+0x120>
    6170:	88 35       	cpi	r24, 0x58	; 88
    6172:	09 f4       	brne	.+2      	; 0x6176 <__vector_39+0x88>
    6174:	5d c0       	rjmp	.+186    	; 0x6230 <__vector_39+0x142>
    6176:	88 34       	cpi	r24, 0x48	; 72
    6178:	09 f0       	breq	.+2      	; 0x617c <__vector_39+0x8e>
    617a:	d4 c0       	rjmp	.+424    	; 0x6324 <__vector_39+0x236>
    617c:	d2 c0       	rjmp	.+420    	; 0x6322 <__vector_39+0x234>
    617e:	88 39       	cpi	r24, 0x98	; 152
    6180:	09 f4       	brne	.+2      	; 0x6184 <__vector_39+0x96>
    6182:	c3 c0       	rjmp	.+390    	; 0x630a <__vector_39+0x21c>
    6184:	a8 f4       	brcc	.+42     	; 0x61b0 <__vector_39+0xc2>
    6186:	88 37       	cpi	r24, 0x78	; 120
    6188:	09 f4       	brne	.+2      	; 0x618c <__vector_39+0x9e>
    618a:	67 c0       	rjmp	.+206    	; 0x625a <__vector_39+0x16c>
    618c:	38 f4       	brcc	.+14     	; 0x619c <__vector_39+0xae>
    618e:	88 36       	cpi	r24, 0x68	; 104
    6190:	09 f4       	brne	.+2      	; 0x6194 <__vector_39+0xa6>
    6192:	63 c0       	rjmp	.+198    	; 0x625a <__vector_39+0x16c>
    6194:	80 37       	cpi	r24, 0x70	; 112
    6196:	09 f4       	brne	.+2      	; 0x619a <__vector_39+0xac>
    6198:	60 c0       	rjmp	.+192    	; 0x625a <__vector_39+0x16c>
    619a:	c4 c0       	rjmp	.+392    	; 0x6324 <__vector_39+0x236>
    619c:	88 38       	cpi	r24, 0x88	; 136
    619e:	09 f4       	brne	.+2      	; 0x61a2 <__vector_39+0xb4>
    61a0:	b4 c0       	rjmp	.+360    	; 0x630a <__vector_39+0x21c>
    61a2:	80 39       	cpi	r24, 0x90	; 144
    61a4:	09 f4       	brne	.+2      	; 0x61a8 <__vector_39+0xba>
    61a6:	5f c0       	rjmp	.+190    	; 0x6266 <__vector_39+0x178>
    61a8:	80 38       	cpi	r24, 0x80	; 128
    61aa:	09 f0       	breq	.+2      	; 0x61ae <__vector_39+0xc0>
    61ac:	bb c0       	rjmp	.+374    	; 0x6324 <__vector_39+0x236>
    61ae:	5b c0       	rjmp	.+182    	; 0x6266 <__vector_39+0x178>
    61b0:	80 3b       	cpi	r24, 0xB0	; 176
    61b2:	09 f4       	brne	.+2      	; 0x61b6 <__vector_39+0xc8>
    61b4:	82 c0       	rjmp	.+260    	; 0x62ba <__vector_39+0x1cc>
    61b6:	38 f4       	brcc	.+14     	; 0x61c6 <__vector_39+0xd8>
    61b8:	80 3a       	cpi	r24, 0xA0	; 160
    61ba:	09 f4       	brne	.+2      	; 0x61be <__vector_39+0xd0>
    61bc:	66 c0       	rjmp	.+204    	; 0x628a <__vector_39+0x19c>
    61be:	88 3a       	cpi	r24, 0xA8	; 168
    61c0:	09 f4       	brne	.+2      	; 0x61c4 <__vector_39+0xd6>
    61c2:	7b c0       	rjmp	.+246    	; 0x62ba <__vector_39+0x1cc>
    61c4:	af c0       	rjmp	.+350    	; 0x6324 <__vector_39+0x236>
    61c6:	80 3c       	cpi	r24, 0xC0	; 192
    61c8:	09 f4       	brne	.+2      	; 0x61cc <__vector_39+0xde>
    61ca:	a3 c0       	rjmp	.+326    	; 0x6312 <__vector_39+0x224>
    61cc:	88 3c       	cpi	r24, 0xC8	; 200
    61ce:	09 f4       	brne	.+2      	; 0x61d2 <__vector_39+0xe4>
    61d0:	a0 c0       	rjmp	.+320    	; 0x6312 <__vector_39+0x224>
    61d2:	88 3b       	cpi	r24, 0xB8	; 184
    61d4:	09 f4       	brne	.+2      	; 0x61d8 <__vector_39+0xea>
    61d6:	86 c0       	rjmp	.+268    	; 0x62e4 <__vector_39+0x1f6>
    61d8:	a5 c0       	rjmp	.+330    	; 0x6324 <__vector_39+0x236>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    61da:	80 91 3b 06 	lds	r24, 0x063B	; 0x80063b <twi_slarw>
    61de:	10 c0       	rjmp	.+32     	; 0x6200 <__vector_39+0x112>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    61e0:	90 91 0e 06 	lds	r25, 0x060E	; 0x80060e <twi_masterBufferIndex>
    61e4:	80 91 0d 06 	lds	r24, 0x060D	; 0x80060d <twi_masterBufferLength>
    61e8:	98 17       	cp	r25, r24
    61ea:	70 f5       	brcc	.+92     	; 0x6248 <__vector_39+0x15a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    61ec:	e0 91 0e 06 	lds	r30, 0x060E	; 0x80060e <twi_masterBufferIndex>
    61f0:	81 e0       	ldi	r24, 0x01	; 1
    61f2:	8e 0f       	add	r24, r30
    61f4:	80 93 0e 06 	sts	0x060E, r24	; 0x80060e <twi_masterBufferIndex>
    61f8:	f0 e0       	ldi	r31, 0x00	; 0
    61fa:	e1 5f       	subi	r30, 0xF1	; 241
    61fc:	f9 4f       	sbci	r31, 0xF9	; 249
    61fe:	80 81       	ld	r24, Z
    6200:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    6204:	85 ec       	ldi	r24, 0xC5	; 197
    6206:	82 c0       	rjmp	.+260    	; 0x630c <__vector_39+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    6208:	80 93 c9 05 	sts	0x05C9, r24	; 0x8005c9 <twi_error>
    620c:	8a c0       	rjmp	.+276    	; 0x6322 <__vector_39+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    620e:	e0 91 0e 06 	lds	r30, 0x060E	; 0x80060e <twi_masterBufferIndex>
    6212:	81 e0       	ldi	r24, 0x01	; 1
    6214:	8e 0f       	add	r24, r30
    6216:	80 93 0e 06 	sts	0x060E, r24	; 0x80060e <twi_masterBufferIndex>
    621a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    621e:	f0 e0       	ldi	r31, 0x00	; 0
    6220:	e1 5f       	subi	r30, 0xF1	; 241
    6222:	f9 4f       	sbci	r31, 0xF9	; 249
    6224:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    6226:	90 91 0e 06 	lds	r25, 0x060E	; 0x80060e <twi_masterBufferIndex>
    622a:	80 91 0d 06 	lds	r24, 0x060D	; 0x80060d <twi_masterBufferLength>
    622e:	6a c0       	rjmp	.+212    	; 0x6304 <__vector_39+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    6230:	e0 91 0e 06 	lds	r30, 0x060E	; 0x80060e <twi_masterBufferIndex>
    6234:	81 e0       	ldi	r24, 0x01	; 1
    6236:	8e 0f       	add	r24, r30
    6238:	80 93 0e 06 	sts	0x060E, r24	; 0x80060e <twi_masterBufferIndex>
    623c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    6240:	f0 e0       	ldi	r31, 0x00	; 0
    6242:	e1 5f       	subi	r30, 0xF1	; 241
    6244:	f9 4f       	sbci	r31, 0xF9	; 249
    6246:	80 83       	st	Z, r24
      if (twi_sendStop){
    6248:	80 91 3a 06 	lds	r24, 0x063A	; 0x80063a <twi_sendStop>
    624c:	81 11       	cpse	r24, r1
    624e:	69 c0       	rjmp	.+210    	; 0x6322 <__vector_39+0x234>
        twi_stop();
      } else {
        twi_inRepStart = true;	// we're gonna send the START
    6250:	81 e0       	ldi	r24, 0x01	; 1
    6252:	80 93 39 06 	sts	0x0639, r24	; 0x800639 <twi_inRepStart>
        // don't enable the interrupt. We'll generate the start, but we
        // avoid handling the interrupt until we're in the next transaction,
        // at the point where we would normally issue the start.
        TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    6256:	84 ea       	ldi	r24, 0xA4	; 164
    6258:	5d c0       	rjmp	.+186    	; 0x6314 <__vector_39+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    625a:	83 e0       	ldi	r24, 0x03	; 3
    625c:	80 93 3c 06 	sts	0x063C, r24	; 0x80063c <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    6260:	10 92 ca 05 	sts	0x05CA, r1	; 0x8005ca <twi_rxBufferIndex>
    6264:	cf cf       	rjmp	.-98     	; 0x6204 <__vector_39+0x116>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    6266:	80 91 ca 05 	lds	r24, 0x05CA	; 0x8005ca <twi_rxBufferIndex>
    626a:	80 32       	cpi	r24, 0x20	; 32
    626c:	08 f0       	brcs	.+2      	; 0x6270 <__vector_39+0x182>
    626e:	4d c0       	rjmp	.+154    	; 0x630a <__vector_39+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    6270:	e0 91 ca 05 	lds	r30, 0x05CA	; 0x8005ca <twi_rxBufferIndex>
    6274:	81 e0       	ldi	r24, 0x01	; 1
    6276:	8e 0f       	add	r24, r30
    6278:	80 93 ca 05 	sts	0x05CA, r24	; 0x8005ca <twi_rxBufferIndex>
    627c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    6280:	f0 e0       	ldi	r31, 0x00	; 0
    6282:	e5 53       	subi	r30, 0x35	; 53
    6284:	fa 4f       	sbci	r31, 0xFA	; 250
    6286:	80 83       	st	Z, r24
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    6288:	bd cf       	rjmp	.-134    	; 0x6204 <__vector_39+0x116>
    628a:	0a dd       	rcall	.-1516   	; 0x5ca0 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    628c:	80 91 ca 05 	lds	r24, 0x05CA	; 0x8005ca <twi_rxBufferIndex>
    6290:	80 32       	cpi	r24, 0x20	; 32
    6292:	30 f4       	brcc	.+12     	; 0x62a0 <__vector_39+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    6294:	e0 91 ca 05 	lds	r30, 0x05CA	; 0x8005ca <twi_rxBufferIndex>
    6298:	f0 e0       	ldi	r31, 0x00	; 0
    629a:	e5 53       	subi	r30, 0x35	; 53
    629c:	fa 4f       	sbci	r31, 0xFA	; 250
    629e:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    62a0:	60 91 ca 05 	lds	r22, 0x05CA	; 0x8005ca <twi_rxBufferIndex>
    62a4:	70 e0       	ldi	r23, 0x00	; 0
    62a6:	e0 91 2f 06 	lds	r30, 0x062F	; 0x80062f <twi_onSlaveReceive>
    62aa:	f0 91 30 06 	lds	r31, 0x0630	; 0x800630 <twi_onSlaveReceive+0x1>
    62ae:	8b ec       	ldi	r24, 0xCB	; 203
    62b0:	95 e0       	ldi	r25, 0x05	; 5
    62b2:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    62b4:	10 92 ca 05 	sts	0x05CA, r1	; 0x8005ca <twi_rxBufferIndex>
      break;
    62b8:	35 c0       	rjmp	.+106    	; 0x6324 <__vector_39+0x236>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    62ba:	84 e0       	ldi	r24, 0x04	; 4
    62bc:	80 93 3c 06 	sts	0x063C, r24	; 0x80063c <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    62c0:	10 92 ec 05 	sts	0x05EC, r1	; 0x8005ec <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    62c4:	10 92 eb 05 	sts	0x05EB, r1	; 0x8005eb <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    62c8:	e0 91 31 06 	lds	r30, 0x0631	; 0x800631 <twi_onSlaveTransmit>
    62cc:	f0 91 32 06 	lds	r31, 0x0632	; 0x800632 <twi_onSlaveTransmit+0x1>
    62d0:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    62d2:	80 91 eb 05 	lds	r24, 0x05EB	; 0x8005eb <twi_txBufferLength>
    62d6:	81 11       	cpse	r24, r1
    62d8:	05 c0       	rjmp	.+10     	; 0x62e4 <__vector_39+0x1f6>
        twi_txBufferLength = 1;
    62da:	81 e0       	ldi	r24, 0x01	; 1
    62dc:	80 93 eb 05 	sts	0x05EB, r24	; 0x8005eb <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    62e0:	10 92 ed 05 	sts	0x05ED, r1	; 0x8005ed <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    62e4:	e0 91 ec 05 	lds	r30, 0x05EC	; 0x8005ec <twi_txBufferIndex>
    62e8:	81 e0       	ldi	r24, 0x01	; 1
    62ea:	8e 0f       	add	r24, r30
    62ec:	80 93 ec 05 	sts	0x05EC, r24	; 0x8005ec <twi_txBufferIndex>
    62f0:	f0 e0       	ldi	r31, 0x00	; 0
    62f2:	e3 51       	subi	r30, 0x13	; 19
    62f4:	fa 4f       	sbci	r31, 0xFA	; 250
    62f6:	80 81       	ld	r24, Z
    62f8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    62fc:	90 91 ec 05 	lds	r25, 0x05EC	; 0x8005ec <twi_txBufferIndex>
    6300:	80 91 eb 05 	lds	r24, 0x05EB	; 0x8005eb <twi_txBufferLength>
    6304:	98 17       	cp	r25, r24
    6306:	08 f4       	brcc	.+2      	; 0x630a <__vector_39+0x21c>
    6308:	7d cf       	rjmp	.-262    	; 0x6204 <__vector_39+0x116>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    630a:	85 e8       	ldi	r24, 0x85	; 133
    630c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    6310:	09 c0       	rjmp	.+18     	; 0x6324 <__vector_39+0x236>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    6312:	85 ec       	ldi	r24, 0xC5	; 197
    6314:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    6318:	10 92 3c 06 	sts	0x063C, r1	; 0x80063c <twi_state>
      break;
    631c:	03 c0       	rjmp	.+6      	; 0x6324 <__vector_39+0x236>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    631e:	10 92 c9 05 	sts	0x05C9, r1	; 0x8005c9 <twi_error>
      twi_stop();
    6322:	ae de       	rcall	.-676    	; 0x6080 <twi_stop>
      break;
  }
}
    6324:	ff 91       	pop	r31
    6326:	ef 91       	pop	r30
    6328:	bf 91       	pop	r27
    632a:	af 91       	pop	r26
    632c:	9f 91       	pop	r25
    632e:	8f 91       	pop	r24
    6330:	7f 91       	pop	r23
    6332:	6f 91       	pop	r22
    6334:	5f 91       	pop	r21
    6336:	4f 91       	pop	r20
    6338:	3f 91       	pop	r19
    633a:	2f 91       	pop	r18
    633c:	0f 90       	pop	r0
    633e:	0b be       	out	0x3b, r0	; 59
    6340:	0f 90       	pop	r0
    6342:	0f be       	out	0x3f, r0	; 63
    6344:	0f 90       	pop	r0
    6346:	1f 90       	pop	r1
    6348:	18 95       	reti

0000634a <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    634a:	80 91 71 06 	lds	r24, 0x0671	; 0x800671 <_ZN7TwoWire14rxBufferLengthE>
    634e:	90 e0       	ldi	r25, 0x00	; 0
    6350:	20 91 72 06 	lds	r18, 0x0672	; 0x800672 <_ZN7TwoWire13rxBufferIndexE>
    6354:	82 1b       	sub	r24, r18
    6356:	91 09       	sbc	r25, r1
    6358:	08 95       	ret

0000635a <_ZN7TwoWire4readEv>:
    635a:	90 91 72 06 	lds	r25, 0x0672	; 0x800672 <_ZN7TwoWire13rxBufferIndexE>
    635e:	80 91 71 06 	lds	r24, 0x0671	; 0x800671 <_ZN7TwoWire14rxBufferLengthE>
    6362:	98 17       	cp	r25, r24
    6364:	50 f4       	brcc	.+20     	; 0x637a <_ZN7TwoWire4readEv+0x20>
    6366:	e9 2f       	mov	r30, r25
    6368:	f0 e0       	ldi	r31, 0x00	; 0
    636a:	ed 58       	subi	r30, 0x8D	; 141
    636c:	f9 4f       	sbci	r31, 0xF9	; 249
    636e:	20 81       	ld	r18, Z
    6370:	30 e0       	ldi	r19, 0x00	; 0
    6372:	9f 5f       	subi	r25, 0xFF	; 255
    6374:	90 93 72 06 	sts	0x0672, r25	; 0x800672 <_ZN7TwoWire13rxBufferIndexE>
    6378:	02 c0       	rjmp	.+4      	; 0x637e <_ZN7TwoWire4readEv+0x24>
    637a:	2f ef       	ldi	r18, 0xFF	; 255
    637c:	3f ef       	ldi	r19, 0xFF	; 255
    637e:	c9 01       	movw	r24, r18
    6380:	08 95       	ret

00006382 <_ZN7TwoWire4peekEv>:
    6382:	e0 91 72 06 	lds	r30, 0x0672	; 0x800672 <_ZN7TwoWire13rxBufferIndexE>
    6386:	80 91 71 06 	lds	r24, 0x0671	; 0x800671 <_ZN7TwoWire14rxBufferLengthE>
    638a:	e8 17       	cp	r30, r24
    638c:	30 f4       	brcc	.+12     	; 0x639a <_ZN7TwoWire4peekEv+0x18>
    638e:	f0 e0       	ldi	r31, 0x00	; 0
    6390:	ed 58       	subi	r30, 0x8D	; 141
    6392:	f9 4f       	sbci	r31, 0xF9	; 249
    6394:	80 81       	ld	r24, Z
    6396:	90 e0       	ldi	r25, 0x00	; 0
    6398:	08 95       	ret
    639a:	8f ef       	ldi	r24, 0xFF	; 255
    639c:	9f ef       	ldi	r25, 0xFF	; 255
    639e:	08 95       	ret

000063a0 <_ZN7TwoWire5flushEv>:
    63a0:	08 95       	ret

000063a2 <_ZN7TwoWire16onReceiveServiceEPhi>:
    63a2:	cf 93       	push	r28
    63a4:	df 93       	push	r29
    63a6:	ec 01       	movw	r28, r24
    63a8:	e0 91 49 06 	lds	r30, 0x0649	; 0x800649 <_ZN7TwoWire14user_onReceiveE>
    63ac:	f0 91 4a 06 	lds	r31, 0x064A	; 0x80064a <_ZN7TwoWire14user_onReceiveE+0x1>
    63b0:	30 97       	sbiw	r30, 0x00	; 0
    63b2:	f1 f0       	breq	.+60     	; 0x63f0 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    63b4:	90 91 72 06 	lds	r25, 0x0672	; 0x800672 <_ZN7TwoWire13rxBufferIndexE>
    63b8:	80 91 71 06 	lds	r24, 0x0671	; 0x800671 <_ZN7TwoWire14rxBufferLengthE>
    63bc:	98 17       	cp	r25, r24
    63be:	c0 f0       	brcs	.+48     	; 0x63f0 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    63c0:	90 e0       	ldi	r25, 0x00	; 0
    63c2:	29 2f       	mov	r18, r25
    63c4:	30 e0       	ldi	r19, 0x00	; 0
    63c6:	26 17       	cp	r18, r22
    63c8:	37 07       	cpc	r19, r23
    63ca:	54 f4       	brge	.+20     	; 0x63e0 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    63cc:	de 01       	movw	r26, r28
    63ce:	a2 0f       	add	r26, r18
    63d0:	b3 1f       	adc	r27, r19
    63d2:	4c 91       	ld	r20, X
    63d4:	d9 01       	movw	r26, r18
    63d6:	ad 58       	subi	r26, 0x8D	; 141
    63d8:	b9 4f       	sbci	r27, 0xF9	; 249
    63da:	4c 93       	st	X, r20
    63dc:	9f 5f       	subi	r25, 0xFF	; 255
    63de:	f1 cf       	rjmp	.-30     	; 0x63c2 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    63e0:	10 92 72 06 	sts	0x0672, r1	; 0x800672 <_ZN7TwoWire13rxBufferIndexE>
    63e4:	60 93 71 06 	sts	0x0671, r22	; 0x800671 <_ZN7TwoWire14rxBufferLengthE>
    63e8:	cb 01       	movw	r24, r22
    63ea:	df 91       	pop	r29
    63ec:	cf 91       	pop	r28
    63ee:	19 94       	eijmp
    63f0:	df 91       	pop	r29
    63f2:	cf 91       	pop	r28
    63f4:	08 95       	ret

000063f6 <_ZN7TwoWire16onRequestServiceEv>:
    63f6:	e0 91 4b 06 	lds	r30, 0x064B	; 0x80064b <_ZN7TwoWire14user_onRequestE>
    63fa:	f0 91 4c 06 	lds	r31, 0x064C	; 0x80064c <_ZN7TwoWire14user_onRequestE+0x1>
    63fe:	30 97       	sbiw	r30, 0x00	; 0
    6400:	29 f0       	breq	.+10     	; 0x640c <_ZN7TwoWire16onRequestServiceEv+0x16>
    6402:	10 92 4f 06 	sts	0x064F, r1	; 0x80064f <_ZN7TwoWire13txBufferIndexE>
    6406:	10 92 4e 06 	sts	0x064E, r1	; 0x80064e <_ZN7TwoWire14txBufferLengthE>
    640a:	19 94       	eijmp
    640c:	08 95       	ret

0000640e <_ZN7TwoWire5writeEPKhj>:
    640e:	cf 92       	push	r12
    6410:	df 92       	push	r13
    6412:	ef 92       	push	r14
    6414:	ff 92       	push	r15
    6416:	0f 93       	push	r16
    6418:	1f 93       	push	r17
    641a:	cf 93       	push	r28
    641c:	df 93       	push	r29
    641e:	7c 01       	movw	r14, r24
    6420:	cb 01       	movw	r24, r22
    6422:	8a 01       	movw	r16, r20
    6424:	20 91 4d 06 	lds	r18, 0x064D	; 0x80064d <_ZN7TwoWire12transmittingE>
    6428:	22 23       	and	r18, r18
    642a:	89 f0       	breq	.+34     	; 0x644e <_ZN7TwoWire5writeEPKhj+0x40>
    642c:	eb 01       	movw	r28, r22
    642e:	6b 01       	movw	r12, r22
    6430:	c4 0e       	add	r12, r20
    6432:	d5 1e       	adc	r13, r21
    6434:	cc 15       	cp	r28, r12
    6436:	dd 05       	cpc	r29, r13
    6438:	61 f0       	breq	.+24     	; 0x6452 <_ZN7TwoWire5writeEPKhj+0x44>
    643a:	69 91       	ld	r22, Y+
    643c:	d7 01       	movw	r26, r14
    643e:	ed 91       	ld	r30, X+
    6440:	fc 91       	ld	r31, X
    6442:	01 90       	ld	r0, Z+
    6444:	f0 81       	ld	r31, Z
    6446:	e0 2d       	mov	r30, r0
    6448:	c7 01       	movw	r24, r14
    644a:	19 95       	eicall
    644c:	f3 cf       	rjmp	.-26     	; 0x6434 <_ZN7TwoWire5writeEPKhj+0x26>
    644e:	64 2f       	mov	r22, r20
    6450:	f5 db       	rcall	.-2070   	; 0x5c3c <twi_transmit>
    6452:	c8 01       	movw	r24, r16
    6454:	df 91       	pop	r29
    6456:	cf 91       	pop	r28
    6458:	1f 91       	pop	r17
    645a:	0f 91       	pop	r16
    645c:	ff 90       	pop	r15
    645e:	ef 90       	pop	r14
    6460:	df 90       	pop	r13
    6462:	cf 90       	pop	r12
    6464:	08 95       	ret

00006466 <_ZN7TwoWire5writeEh>:
    6466:	cf 93       	push	r28
    6468:	df 93       	push	r29
    646a:	1f 92       	push	r1
    646c:	cd b7       	in	r28, 0x3d	; 61
    646e:	de b7       	in	r29, 0x3e	; 62
    6470:	69 83       	std	Y+1, r22	; 0x01
    6472:	20 91 4d 06 	lds	r18, 0x064D	; 0x80064d <_ZN7TwoWire12transmittingE>
    6476:	22 23       	and	r18, r18
    6478:	d1 f0       	breq	.+52     	; 0x64ae <_ZN7TwoWire5writeEh+0x48>
    647a:	20 91 4e 06 	lds	r18, 0x064E	; 0x80064e <_ZN7TwoWire14txBufferLengthE>
    647e:	20 32       	cpi	r18, 0x20	; 32
    6480:	40 f0       	brcs	.+16     	; 0x6492 <_ZN7TwoWire5writeEh+0x2c>
    6482:	21 e0       	ldi	r18, 0x01	; 1
    6484:	30 e0       	ldi	r19, 0x00	; 0
    6486:	fc 01       	movw	r30, r24
    6488:	33 83       	std	Z+3, r19	; 0x03
    648a:	22 83       	std	Z+2, r18	; 0x02
    648c:	80 e0       	ldi	r24, 0x00	; 0
    648e:	90 e0       	ldi	r25, 0x00	; 0
    6490:	14 c0       	rjmp	.+40     	; 0x64ba <_ZN7TwoWire5writeEh+0x54>
    6492:	80 91 4f 06 	lds	r24, 0x064F	; 0x80064f <_ZN7TwoWire13txBufferIndexE>
    6496:	e8 2f       	mov	r30, r24
    6498:	f0 e0       	ldi	r31, 0x00	; 0
    649a:	e0 5b       	subi	r30, 0xB0	; 176
    649c:	f9 4f       	sbci	r31, 0xF9	; 249
    649e:	99 81       	ldd	r25, Y+1	; 0x01
    64a0:	90 83       	st	Z, r25
    64a2:	8f 5f       	subi	r24, 0xFF	; 255
    64a4:	80 93 4f 06 	sts	0x064F, r24	; 0x80064f <_ZN7TwoWire13txBufferIndexE>
    64a8:	80 93 4e 06 	sts	0x064E, r24	; 0x80064e <_ZN7TwoWire14txBufferLengthE>
    64ac:	04 c0       	rjmp	.+8      	; 0x64b6 <_ZN7TwoWire5writeEh+0x50>
    64ae:	61 e0       	ldi	r22, 0x01	; 1
    64b0:	ce 01       	movw	r24, r28
    64b2:	01 96       	adiw	r24, 0x01	; 1
    64b4:	c3 db       	rcall	.-2170   	; 0x5c3c <twi_transmit>
    64b6:	81 e0       	ldi	r24, 0x01	; 1
    64b8:	90 e0       	ldi	r25, 0x00	; 0
    64ba:	0f 90       	pop	r0
    64bc:	df 91       	pop	r29
    64be:	cf 91       	pop	r28
    64c0:	08 95       	ret

000064c2 <_ZN7TwoWireC1Ev>:
    64c2:	fc 01       	movw	r30, r24
    64c4:	13 82       	std	Z+3, r1	; 0x03
    64c6:	12 82       	std	Z+2, r1	; 0x02
    64c8:	88 ee       	ldi	r24, 0xE8	; 232
    64ca:	93 e0       	ldi	r25, 0x03	; 3
    64cc:	a0 e0       	ldi	r26, 0x00	; 0
    64ce:	b0 e0       	ldi	r27, 0x00	; 0
    64d0:	84 83       	std	Z+4, r24	; 0x04
    64d2:	95 83       	std	Z+5, r25	; 0x05
    64d4:	a6 83       	std	Z+6, r26	; 0x06
    64d6:	b7 83       	std	Z+7, r27	; 0x07
    64d8:	83 ed       	ldi	r24, 0xD3	; 211
    64da:	93 e0       	ldi	r25, 0x03	; 3
    64dc:	91 83       	std	Z+1, r25	; 0x01
    64de:	80 83       	st	Z, r24
    64e0:	08 95       	ret

000064e2 <_ZN7TwoWire5beginEv>:
    64e2:	10 92 72 06 	sts	0x0672, r1	; 0x800672 <_ZN7TwoWire13rxBufferIndexE>
    64e6:	10 92 71 06 	sts	0x0671, r1	; 0x800671 <_ZN7TwoWire14rxBufferLengthE>
    64ea:	10 92 4f 06 	sts	0x064F, r1	; 0x80064f <_ZN7TwoWire13txBufferIndexE>
    64ee:	10 92 4e 06 	sts	0x064E, r1	; 0x80064e <_ZN7TwoWire14txBufferLengthE>
    64f2:	65 db       	rcall	.-2358   	; 0x5bbe <twi_init>
    64f4:	8b ef       	ldi	r24, 0xFB	; 251
    64f6:	91 e3       	ldi	r25, 0x31	; 49
    64f8:	ce db       	rcall	.-2148   	; 0x5c96 <twi_attachSlaveTxEvent>
    64fa:	81 ed       	ldi	r24, 0xD1	; 209
    64fc:	91 e3       	ldi	r25, 0x31	; 49
    64fe:	c6 cb       	rjmp	.-2164   	; 0x5c8c <twi_attachSlaveRxEvent>

00006500 <_ZN7TwoWire8setClockEm>:
    6500:	cb 01       	movw	r24, r22
    6502:	ba 01       	movw	r22, r20
    6504:	87 cb       	rjmp	.-2290   	; 0x5c14 <twi_setFrequency>

00006506 <_ZN7TwoWire17beginTransmissionEh>:
    6506:	81 e0       	ldi	r24, 0x01	; 1
    6508:	80 93 4d 06 	sts	0x064D, r24	; 0x80064d <_ZN7TwoWire12transmittingE>
    650c:	60 93 70 06 	sts	0x0670, r22	; 0x800670 <_ZN7TwoWire9txAddressE>
    6510:	10 92 4f 06 	sts	0x064F, r1	; 0x80064f <_ZN7TwoWire13txBufferIndexE>
    6514:	10 92 4e 06 	sts	0x064E, r1	; 0x80064e <_ZN7TwoWire14txBufferLengthE>
    6518:	08 95       	ret

0000651a <_ZN7TwoWire17beginTransmissionEi>:
    651a:	f5 cf       	rjmp	.-22     	; 0x6506 <_ZN7TwoWire17beginTransmissionEh>

0000651c <_ZN7TwoWire15endTransmissionEh>:
    651c:	0f 93       	push	r16
    651e:	06 2f       	mov	r16, r22
    6520:	21 e0       	ldi	r18, 0x01	; 1
    6522:	40 91 4e 06 	lds	r20, 0x064E	; 0x80064e <_ZN7TwoWire14txBufferLengthE>
    6526:	60 e5       	ldi	r22, 0x50	; 80
    6528:	76 e0       	ldi	r23, 0x06	; 6
    652a:	80 91 70 06 	lds	r24, 0x0670	; 0x800670 <_ZN7TwoWire9txAddressE>
    652e:	b9 dc       	rcall	.-1678   	; 0x5ea2 <twi_writeTo>
    6530:	10 92 4f 06 	sts	0x064F, r1	; 0x80064f <_ZN7TwoWire13txBufferIndexE>
    6534:	10 92 4e 06 	sts	0x064E, r1	; 0x80064e <_ZN7TwoWire14txBufferLengthE>
    6538:	10 92 4d 06 	sts	0x064D, r1	; 0x80064d <_ZN7TwoWire12transmittingE>
    653c:	0f 91       	pop	r16
    653e:	08 95       	ret

00006540 <_ZN7TwoWire11requestFromEhhmhh>:
    6540:	4f 92       	push	r4
    6542:	5f 92       	push	r5
    6544:	6f 92       	push	r6
    6546:	7f 92       	push	r7
    6548:	af 92       	push	r10
    654a:	bf 92       	push	r11
    654c:	cf 92       	push	r12
    654e:	ef 92       	push	r14
    6550:	ff 92       	push	r15
    6552:	0f 93       	push	r16
    6554:	1f 93       	push	r17
    6556:	cf 93       	push	r28
    6558:	df 93       	push	r29
    655a:	5c 01       	movw	r10, r24
    655c:	f6 2e       	mov	r15, r22
    655e:	d4 2f       	mov	r29, r20
    6560:	28 01       	movw	r4, r16
    6562:	39 01       	movw	r6, r18
    6564:	ee 20       	and	r14, r14
    6566:	11 f1       	breq	.+68     	; 0x65ac <_ZN7TwoWire11requestFromEhhmhh+0x6c>
    6568:	ce df       	rcall	.-100    	; 0x6506 <_ZN7TwoWire17beginTransmissionEh>
    656a:	ce 2d       	mov	r28, r14
    656c:	c4 30       	cpi	r28, 0x04	; 4
    656e:	08 f0       	brcs	.+2      	; 0x6572 <_ZN7TwoWire11requestFromEhhmhh+0x32>
    6570:	c3 e0       	ldi	r28, 0x03	; 3
    6572:	c1 50       	subi	r28, 0x01	; 1
    6574:	c0 f0       	brcs	.+48     	; 0x65a6 <_ZN7TwoWire11requestFromEhhmhh+0x66>
    6576:	28 e0       	ldi	r18, 0x08	; 8
    6578:	c2 9f       	mul	r28, r18
    657a:	c0 01       	movw	r24, r0
    657c:	11 24       	eor	r1, r1
    657e:	a3 01       	movw	r20, r6
    6580:	92 01       	movw	r18, r4
    6582:	04 c0       	rjmp	.+8      	; 0x658c <_ZN7TwoWire11requestFromEhhmhh+0x4c>
    6584:	56 95       	lsr	r21
    6586:	47 95       	ror	r20
    6588:	37 95       	ror	r19
    658a:	27 95       	ror	r18
    658c:	8a 95       	dec	r24
    658e:	d2 f7       	brpl	.-12     	; 0x6584 <_ZN7TwoWire11requestFromEhhmhh+0x44>
    6590:	ca 01       	movw	r24, r20
    6592:	b9 01       	movw	r22, r18
    6594:	d5 01       	movw	r26, r10
    6596:	ed 91       	ld	r30, X+
    6598:	fc 91       	ld	r31, X
    659a:	01 90       	ld	r0, Z+
    659c:	f0 81       	ld	r31, Z
    659e:	e0 2d       	mov	r30, r0
    65a0:	c5 01       	movw	r24, r10
    65a2:	19 95       	eicall
    65a4:	e6 cf       	rjmp	.-52     	; 0x6572 <_ZN7TwoWire11requestFromEhhmhh+0x32>
    65a6:	60 e0       	ldi	r22, 0x00	; 0
    65a8:	c5 01       	movw	r24, r10
    65aa:	b8 df       	rcall	.-144    	; 0x651c <_ZN7TwoWire15endTransmissionEh>
    65ac:	4d 2f       	mov	r20, r29
    65ae:	d1 32       	cpi	r29, 0x21	; 33
    65b0:	08 f0       	brcs	.+2      	; 0x65b4 <_ZN7TwoWire11requestFromEhhmhh+0x74>
    65b2:	40 e2       	ldi	r20, 0x20	; 32
    65b4:	2c 2d       	mov	r18, r12
    65b6:	63 e7       	ldi	r22, 0x73	; 115
    65b8:	76 e0       	ldi	r23, 0x06	; 6
    65ba:	8f 2d       	mov	r24, r15
    65bc:	8b db       	rcall	.-2282   	; 0x5cd4 <twi_readFrom>
    65be:	10 92 72 06 	sts	0x0672, r1	; 0x800672 <_ZN7TwoWire13rxBufferIndexE>
    65c2:	80 93 71 06 	sts	0x0671, r24	; 0x800671 <_ZN7TwoWire14rxBufferLengthE>
    65c6:	df 91       	pop	r29
    65c8:	cf 91       	pop	r28
    65ca:	1f 91       	pop	r17
    65cc:	0f 91       	pop	r16
    65ce:	ff 90       	pop	r15
    65d0:	ef 90       	pop	r14
    65d2:	cf 90       	pop	r12
    65d4:	bf 90       	pop	r11
    65d6:	af 90       	pop	r10
    65d8:	7f 90       	pop	r7
    65da:	6f 90       	pop	r6
    65dc:	5f 90       	pop	r5
    65de:	4f 90       	pop	r4
    65e0:	08 95       	ret

000065e2 <_ZN7TwoWire11requestFromEhhh>:
    65e2:	cf 92       	push	r12
    65e4:	ef 92       	push	r14
    65e6:	0f 93       	push	r16
    65e8:	1f 93       	push	r17
    65ea:	c2 2e       	mov	r12, r18
    65ec:	e1 2c       	mov	r14, r1
    65ee:	00 e0       	ldi	r16, 0x00	; 0
    65f0:	10 e0       	ldi	r17, 0x00	; 0
    65f2:	98 01       	movw	r18, r16
    65f4:	a5 df       	rcall	.-182    	; 0x6540 <_ZN7TwoWire11requestFromEhhmhh>
    65f6:	1f 91       	pop	r17
    65f8:	0f 91       	pop	r16
    65fa:	ef 90       	pop	r14
    65fc:	cf 90       	pop	r12
    65fe:	08 95       	ret

00006600 <_ZN7TwoWire11requestFromEii>:
    6600:	21 e0       	ldi	r18, 0x01	; 1
    6602:	ef cf       	rjmp	.-34     	; 0x65e2 <_ZN7TwoWire11requestFromEhhh>

00006604 <_ZN7TwoWire15endTransmissionEv>:
    6604:	61 e0       	ldi	r22, 0x01	; 1
    6606:	8a cf       	rjmp	.-236    	; 0x651c <_ZN7TwoWire15endTransmissionEh>

00006608 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    6608:	8d e3       	ldi	r24, 0x3D	; 61
    660a:	96 e0       	ldi	r25, 0x06	; 6
    660c:	5a cf       	rjmp	.-332    	; 0x64c2 <_ZN7TwoWireC1Ev>

0000660e <__subsf3>:
    660e:	50 58       	subi	r21, 0x80	; 128

00006610 <__addsf3>:
    6610:	bb 27       	eor	r27, r27
    6612:	aa 27       	eor	r26, r26
    6614:	0e d0       	rcall	.+28     	; 0x6632 <__addsf3x>
    6616:	d8 c0       	rjmp	.+432    	; 0x67c8 <__fp_round>
    6618:	c9 d0       	rcall	.+402    	; 0x67ac <__fp_pscA>
    661a:	30 f0       	brcs	.+12     	; 0x6628 <__addsf3+0x18>
    661c:	ce d0       	rcall	.+412    	; 0x67ba <__fp_pscB>
    661e:	20 f0       	brcs	.+8      	; 0x6628 <__addsf3+0x18>
    6620:	31 f4       	brne	.+12     	; 0x662e <__addsf3+0x1e>
    6622:	9f 3f       	cpi	r25, 0xFF	; 255
    6624:	11 f4       	brne	.+4      	; 0x662a <__addsf3+0x1a>
    6626:	1e f4       	brtc	.+6      	; 0x662e <__addsf3+0x1e>
    6628:	be c0       	rjmp	.+380    	; 0x67a6 <__fp_nan>
    662a:	0e f4       	brtc	.+2      	; 0x662e <__addsf3+0x1e>
    662c:	e0 95       	com	r30
    662e:	e7 fb       	bst	r30, 7
    6630:	b4 c0       	rjmp	.+360    	; 0x679a <__fp_inf>

00006632 <__addsf3x>:
    6632:	e9 2f       	mov	r30, r25
    6634:	da d0       	rcall	.+436    	; 0x67ea <__fp_split3>
    6636:	80 f3       	brcs	.-32     	; 0x6618 <__addsf3+0x8>
    6638:	ba 17       	cp	r27, r26
    663a:	62 07       	cpc	r22, r18
    663c:	73 07       	cpc	r23, r19
    663e:	84 07       	cpc	r24, r20
    6640:	95 07       	cpc	r25, r21
    6642:	18 f0       	brcs	.+6      	; 0x664a <__addsf3x+0x18>
    6644:	71 f4       	brne	.+28     	; 0x6662 <__addsf3x+0x30>
    6646:	9e f5       	brtc	.+102    	; 0x66ae <__addsf3x+0x7c>
    6648:	f2 c0       	rjmp	.+484    	; 0x682e <__fp_zero>
    664a:	0e f4       	brtc	.+2      	; 0x664e <__addsf3x+0x1c>
    664c:	e0 95       	com	r30
    664e:	0b 2e       	mov	r0, r27
    6650:	ba 2f       	mov	r27, r26
    6652:	a0 2d       	mov	r26, r0
    6654:	0b 01       	movw	r0, r22
    6656:	b9 01       	movw	r22, r18
    6658:	90 01       	movw	r18, r0
    665a:	0c 01       	movw	r0, r24
    665c:	ca 01       	movw	r24, r20
    665e:	a0 01       	movw	r20, r0
    6660:	11 24       	eor	r1, r1
    6662:	ff 27       	eor	r31, r31
    6664:	59 1b       	sub	r21, r25
    6666:	99 f0       	breq	.+38     	; 0x668e <__addsf3x+0x5c>
    6668:	59 3f       	cpi	r21, 0xF9	; 249
    666a:	50 f4       	brcc	.+20     	; 0x6680 <__addsf3x+0x4e>
    666c:	50 3e       	cpi	r21, 0xE0	; 224
    666e:	68 f1       	brcs	.+90     	; 0x66ca <__addsf3x+0x98>
    6670:	1a 16       	cp	r1, r26
    6672:	f0 40       	sbci	r31, 0x00	; 0
    6674:	a2 2f       	mov	r26, r18
    6676:	23 2f       	mov	r18, r19
    6678:	34 2f       	mov	r19, r20
    667a:	44 27       	eor	r20, r20
    667c:	58 5f       	subi	r21, 0xF8	; 248
    667e:	f3 cf       	rjmp	.-26     	; 0x6666 <__addsf3x+0x34>
    6680:	46 95       	lsr	r20
    6682:	37 95       	ror	r19
    6684:	27 95       	ror	r18
    6686:	a7 95       	ror	r26
    6688:	f0 40       	sbci	r31, 0x00	; 0
    668a:	53 95       	inc	r21
    668c:	c9 f7       	brne	.-14     	; 0x6680 <__addsf3x+0x4e>
    668e:	7e f4       	brtc	.+30     	; 0x66ae <__addsf3x+0x7c>
    6690:	1f 16       	cp	r1, r31
    6692:	ba 0b       	sbc	r27, r26
    6694:	62 0b       	sbc	r22, r18
    6696:	73 0b       	sbc	r23, r19
    6698:	84 0b       	sbc	r24, r20
    669a:	ba f0       	brmi	.+46     	; 0x66ca <__addsf3x+0x98>
    669c:	91 50       	subi	r25, 0x01	; 1
    669e:	a1 f0       	breq	.+40     	; 0x66c8 <__addsf3x+0x96>
    66a0:	ff 0f       	add	r31, r31
    66a2:	bb 1f       	adc	r27, r27
    66a4:	66 1f       	adc	r22, r22
    66a6:	77 1f       	adc	r23, r23
    66a8:	88 1f       	adc	r24, r24
    66aa:	c2 f7       	brpl	.-16     	; 0x669c <__addsf3x+0x6a>
    66ac:	0e c0       	rjmp	.+28     	; 0x66ca <__addsf3x+0x98>
    66ae:	ba 0f       	add	r27, r26
    66b0:	62 1f       	adc	r22, r18
    66b2:	73 1f       	adc	r23, r19
    66b4:	84 1f       	adc	r24, r20
    66b6:	48 f4       	brcc	.+18     	; 0x66ca <__addsf3x+0x98>
    66b8:	87 95       	ror	r24
    66ba:	77 95       	ror	r23
    66bc:	67 95       	ror	r22
    66be:	b7 95       	ror	r27
    66c0:	f7 95       	ror	r31
    66c2:	9e 3f       	cpi	r25, 0xFE	; 254
    66c4:	08 f0       	brcs	.+2      	; 0x66c8 <__addsf3x+0x96>
    66c6:	b3 cf       	rjmp	.-154    	; 0x662e <__addsf3+0x1e>
    66c8:	93 95       	inc	r25
    66ca:	88 0f       	add	r24, r24
    66cc:	08 f0       	brcs	.+2      	; 0x66d0 <__addsf3x+0x9e>
    66ce:	99 27       	eor	r25, r25
    66d0:	ee 0f       	add	r30, r30
    66d2:	97 95       	ror	r25
    66d4:	87 95       	ror	r24
    66d6:	08 95       	ret

000066d8 <__floatunsisf>:
    66d8:	e8 94       	clt
    66da:	09 c0       	rjmp	.+18     	; 0x66ee <__floatsisf+0x12>

000066dc <__floatsisf>:
    66dc:	97 fb       	bst	r25, 7
    66de:	3e f4       	brtc	.+14     	; 0x66ee <__floatsisf+0x12>
    66e0:	90 95       	com	r25
    66e2:	80 95       	com	r24
    66e4:	70 95       	com	r23
    66e6:	61 95       	neg	r22
    66e8:	7f 4f       	sbci	r23, 0xFF	; 255
    66ea:	8f 4f       	sbci	r24, 0xFF	; 255
    66ec:	9f 4f       	sbci	r25, 0xFF	; 255
    66ee:	99 23       	and	r25, r25
    66f0:	a9 f0       	breq	.+42     	; 0x671c <__floatsisf+0x40>
    66f2:	f9 2f       	mov	r31, r25
    66f4:	96 e9       	ldi	r25, 0x96	; 150
    66f6:	bb 27       	eor	r27, r27
    66f8:	93 95       	inc	r25
    66fa:	f6 95       	lsr	r31
    66fc:	87 95       	ror	r24
    66fe:	77 95       	ror	r23
    6700:	67 95       	ror	r22
    6702:	b7 95       	ror	r27
    6704:	f1 11       	cpse	r31, r1
    6706:	f8 cf       	rjmp	.-16     	; 0x66f8 <__floatsisf+0x1c>
    6708:	fa f4       	brpl	.+62     	; 0x6748 <__floatsisf+0x6c>
    670a:	bb 0f       	add	r27, r27
    670c:	11 f4       	brne	.+4      	; 0x6712 <__floatsisf+0x36>
    670e:	60 ff       	sbrs	r22, 0
    6710:	1b c0       	rjmp	.+54     	; 0x6748 <__floatsisf+0x6c>
    6712:	6f 5f       	subi	r22, 0xFF	; 255
    6714:	7f 4f       	sbci	r23, 0xFF	; 255
    6716:	8f 4f       	sbci	r24, 0xFF	; 255
    6718:	9f 4f       	sbci	r25, 0xFF	; 255
    671a:	16 c0       	rjmp	.+44     	; 0x6748 <__floatsisf+0x6c>
    671c:	88 23       	and	r24, r24
    671e:	11 f0       	breq	.+4      	; 0x6724 <__floatsisf+0x48>
    6720:	96 e9       	ldi	r25, 0x96	; 150
    6722:	11 c0       	rjmp	.+34     	; 0x6746 <__floatsisf+0x6a>
    6724:	77 23       	and	r23, r23
    6726:	21 f0       	breq	.+8      	; 0x6730 <__floatsisf+0x54>
    6728:	9e e8       	ldi	r25, 0x8E	; 142
    672a:	87 2f       	mov	r24, r23
    672c:	76 2f       	mov	r23, r22
    672e:	05 c0       	rjmp	.+10     	; 0x673a <__floatsisf+0x5e>
    6730:	66 23       	and	r22, r22
    6732:	71 f0       	breq	.+28     	; 0x6750 <__floatsisf+0x74>
    6734:	96 e8       	ldi	r25, 0x86	; 134
    6736:	86 2f       	mov	r24, r22
    6738:	70 e0       	ldi	r23, 0x00	; 0
    673a:	60 e0       	ldi	r22, 0x00	; 0
    673c:	2a f0       	brmi	.+10     	; 0x6748 <__floatsisf+0x6c>
    673e:	9a 95       	dec	r25
    6740:	66 0f       	add	r22, r22
    6742:	77 1f       	adc	r23, r23
    6744:	88 1f       	adc	r24, r24
    6746:	da f7       	brpl	.-10     	; 0x673e <__floatsisf+0x62>
    6748:	88 0f       	add	r24, r24
    674a:	96 95       	lsr	r25
    674c:	87 95       	ror	r24
    674e:	97 f9       	bld	r25, 7
    6750:	08 95       	ret

00006752 <__fp_cmp>:
    6752:	99 0f       	add	r25, r25
    6754:	00 08       	sbc	r0, r0
    6756:	55 0f       	add	r21, r21
    6758:	aa 0b       	sbc	r26, r26
    675a:	e0 e8       	ldi	r30, 0x80	; 128
    675c:	fe ef       	ldi	r31, 0xFE	; 254
    675e:	16 16       	cp	r1, r22
    6760:	17 06       	cpc	r1, r23
    6762:	e8 07       	cpc	r30, r24
    6764:	f9 07       	cpc	r31, r25
    6766:	c0 f0       	brcs	.+48     	; 0x6798 <__fp_cmp+0x46>
    6768:	12 16       	cp	r1, r18
    676a:	13 06       	cpc	r1, r19
    676c:	e4 07       	cpc	r30, r20
    676e:	f5 07       	cpc	r31, r21
    6770:	98 f0       	brcs	.+38     	; 0x6798 <__fp_cmp+0x46>
    6772:	62 1b       	sub	r22, r18
    6774:	73 0b       	sbc	r23, r19
    6776:	84 0b       	sbc	r24, r20
    6778:	95 0b       	sbc	r25, r21
    677a:	39 f4       	brne	.+14     	; 0x678a <__fp_cmp+0x38>
    677c:	0a 26       	eor	r0, r26
    677e:	61 f0       	breq	.+24     	; 0x6798 <__fp_cmp+0x46>
    6780:	23 2b       	or	r18, r19
    6782:	24 2b       	or	r18, r20
    6784:	25 2b       	or	r18, r21
    6786:	21 f4       	brne	.+8      	; 0x6790 <__fp_cmp+0x3e>
    6788:	08 95       	ret
    678a:	0a 26       	eor	r0, r26
    678c:	09 f4       	brne	.+2      	; 0x6790 <__fp_cmp+0x3e>
    678e:	a1 40       	sbci	r26, 0x01	; 1
    6790:	a6 95       	lsr	r26
    6792:	8f ef       	ldi	r24, 0xFF	; 255
    6794:	81 1d       	adc	r24, r1
    6796:	81 1d       	adc	r24, r1
    6798:	08 95       	ret

0000679a <__fp_inf>:
    679a:	97 f9       	bld	r25, 7
    679c:	9f 67       	ori	r25, 0x7F	; 127
    679e:	80 e8       	ldi	r24, 0x80	; 128
    67a0:	70 e0       	ldi	r23, 0x00	; 0
    67a2:	60 e0       	ldi	r22, 0x00	; 0
    67a4:	08 95       	ret

000067a6 <__fp_nan>:
    67a6:	9f ef       	ldi	r25, 0xFF	; 255
    67a8:	80 ec       	ldi	r24, 0xC0	; 192
    67aa:	08 95       	ret

000067ac <__fp_pscA>:
    67ac:	00 24       	eor	r0, r0
    67ae:	0a 94       	dec	r0
    67b0:	16 16       	cp	r1, r22
    67b2:	17 06       	cpc	r1, r23
    67b4:	18 06       	cpc	r1, r24
    67b6:	09 06       	cpc	r0, r25
    67b8:	08 95       	ret

000067ba <__fp_pscB>:
    67ba:	00 24       	eor	r0, r0
    67bc:	0a 94       	dec	r0
    67be:	12 16       	cp	r1, r18
    67c0:	13 06       	cpc	r1, r19
    67c2:	14 06       	cpc	r1, r20
    67c4:	05 06       	cpc	r0, r21
    67c6:	08 95       	ret

000067c8 <__fp_round>:
    67c8:	09 2e       	mov	r0, r25
    67ca:	03 94       	inc	r0
    67cc:	00 0c       	add	r0, r0
    67ce:	11 f4       	brne	.+4      	; 0x67d4 <__fp_round+0xc>
    67d0:	88 23       	and	r24, r24
    67d2:	52 f0       	brmi	.+20     	; 0x67e8 <__fp_round+0x20>
    67d4:	bb 0f       	add	r27, r27
    67d6:	40 f4       	brcc	.+16     	; 0x67e8 <__fp_round+0x20>
    67d8:	bf 2b       	or	r27, r31
    67da:	11 f4       	brne	.+4      	; 0x67e0 <__fp_round+0x18>
    67dc:	60 ff       	sbrs	r22, 0
    67de:	04 c0       	rjmp	.+8      	; 0x67e8 <__fp_round+0x20>
    67e0:	6f 5f       	subi	r22, 0xFF	; 255
    67e2:	7f 4f       	sbci	r23, 0xFF	; 255
    67e4:	8f 4f       	sbci	r24, 0xFF	; 255
    67e6:	9f 4f       	sbci	r25, 0xFF	; 255
    67e8:	08 95       	ret

000067ea <__fp_split3>:
    67ea:	57 fd       	sbrc	r21, 7
    67ec:	90 58       	subi	r25, 0x80	; 128
    67ee:	44 0f       	add	r20, r20
    67f0:	55 1f       	adc	r21, r21
    67f2:	59 f0       	breq	.+22     	; 0x680a <__fp_splitA+0x10>
    67f4:	5f 3f       	cpi	r21, 0xFF	; 255
    67f6:	71 f0       	breq	.+28     	; 0x6814 <__fp_splitA+0x1a>
    67f8:	47 95       	ror	r20

000067fa <__fp_splitA>:
    67fa:	88 0f       	add	r24, r24
    67fc:	97 fb       	bst	r25, 7
    67fe:	99 1f       	adc	r25, r25
    6800:	61 f0       	breq	.+24     	; 0x681a <__fp_splitA+0x20>
    6802:	9f 3f       	cpi	r25, 0xFF	; 255
    6804:	79 f0       	breq	.+30     	; 0x6824 <__fp_splitA+0x2a>
    6806:	87 95       	ror	r24
    6808:	08 95       	ret
    680a:	12 16       	cp	r1, r18
    680c:	13 06       	cpc	r1, r19
    680e:	14 06       	cpc	r1, r20
    6810:	55 1f       	adc	r21, r21
    6812:	f2 cf       	rjmp	.-28     	; 0x67f8 <__fp_split3+0xe>
    6814:	46 95       	lsr	r20
    6816:	f1 df       	rcall	.-30     	; 0x67fa <__fp_splitA>
    6818:	08 c0       	rjmp	.+16     	; 0x682a <__fp_splitA+0x30>
    681a:	16 16       	cp	r1, r22
    681c:	17 06       	cpc	r1, r23
    681e:	18 06       	cpc	r1, r24
    6820:	99 1f       	adc	r25, r25
    6822:	f1 cf       	rjmp	.-30     	; 0x6806 <__fp_splitA+0xc>
    6824:	86 95       	lsr	r24
    6826:	71 05       	cpc	r23, r1
    6828:	61 05       	cpc	r22, r1
    682a:	08 94       	sec
    682c:	08 95       	ret

0000682e <__fp_zero>:
    682e:	e8 94       	clt

00006830 <__fp_szero>:
    6830:	bb 27       	eor	r27, r27
    6832:	66 27       	eor	r22, r22
    6834:	77 27       	eor	r23, r23
    6836:	cb 01       	movw	r24, r22
    6838:	97 f9       	bld	r25, 7
    683a:	08 95       	ret

0000683c <__mulsf3>:
    683c:	0b d0       	rcall	.+22     	; 0x6854 <__mulsf3x>
    683e:	c4 cf       	rjmp	.-120    	; 0x67c8 <__fp_round>
    6840:	b5 df       	rcall	.-150    	; 0x67ac <__fp_pscA>
    6842:	28 f0       	brcs	.+10     	; 0x684e <__mulsf3+0x12>
    6844:	ba df       	rcall	.-140    	; 0x67ba <__fp_pscB>
    6846:	18 f0       	brcs	.+6      	; 0x684e <__mulsf3+0x12>
    6848:	95 23       	and	r25, r21
    684a:	09 f0       	breq	.+2      	; 0x684e <__mulsf3+0x12>
    684c:	a6 cf       	rjmp	.-180    	; 0x679a <__fp_inf>
    684e:	ab cf       	rjmp	.-170    	; 0x67a6 <__fp_nan>
    6850:	11 24       	eor	r1, r1
    6852:	ee cf       	rjmp	.-36     	; 0x6830 <__fp_szero>

00006854 <__mulsf3x>:
    6854:	ca df       	rcall	.-108    	; 0x67ea <__fp_split3>
    6856:	a0 f3       	brcs	.-24     	; 0x6840 <__mulsf3+0x4>

00006858 <__mulsf3_pse>:
    6858:	95 9f       	mul	r25, r21
    685a:	d1 f3       	breq	.-12     	; 0x6850 <__mulsf3+0x14>
    685c:	95 0f       	add	r25, r21
    685e:	50 e0       	ldi	r21, 0x00	; 0
    6860:	55 1f       	adc	r21, r21
    6862:	62 9f       	mul	r22, r18
    6864:	f0 01       	movw	r30, r0
    6866:	72 9f       	mul	r23, r18
    6868:	bb 27       	eor	r27, r27
    686a:	f0 0d       	add	r31, r0
    686c:	b1 1d       	adc	r27, r1
    686e:	63 9f       	mul	r22, r19
    6870:	aa 27       	eor	r26, r26
    6872:	f0 0d       	add	r31, r0
    6874:	b1 1d       	adc	r27, r1
    6876:	aa 1f       	adc	r26, r26
    6878:	64 9f       	mul	r22, r20
    687a:	66 27       	eor	r22, r22
    687c:	b0 0d       	add	r27, r0
    687e:	a1 1d       	adc	r26, r1
    6880:	66 1f       	adc	r22, r22
    6882:	82 9f       	mul	r24, r18
    6884:	22 27       	eor	r18, r18
    6886:	b0 0d       	add	r27, r0
    6888:	a1 1d       	adc	r26, r1
    688a:	62 1f       	adc	r22, r18
    688c:	73 9f       	mul	r23, r19
    688e:	b0 0d       	add	r27, r0
    6890:	a1 1d       	adc	r26, r1
    6892:	62 1f       	adc	r22, r18
    6894:	83 9f       	mul	r24, r19
    6896:	a0 0d       	add	r26, r0
    6898:	61 1d       	adc	r22, r1
    689a:	22 1f       	adc	r18, r18
    689c:	74 9f       	mul	r23, r20
    689e:	33 27       	eor	r19, r19
    68a0:	a0 0d       	add	r26, r0
    68a2:	61 1d       	adc	r22, r1
    68a4:	23 1f       	adc	r18, r19
    68a6:	84 9f       	mul	r24, r20
    68a8:	60 0d       	add	r22, r0
    68aa:	21 1d       	adc	r18, r1
    68ac:	82 2f       	mov	r24, r18
    68ae:	76 2f       	mov	r23, r22
    68b0:	6a 2f       	mov	r22, r26
    68b2:	11 24       	eor	r1, r1
    68b4:	9f 57       	subi	r25, 0x7F	; 127
    68b6:	50 40       	sbci	r21, 0x00	; 0
    68b8:	8a f0       	brmi	.+34     	; 0x68dc <__mulsf3_pse+0x84>
    68ba:	e1 f0       	breq	.+56     	; 0x68f4 <__mulsf3_pse+0x9c>
    68bc:	88 23       	and	r24, r24
    68be:	4a f0       	brmi	.+18     	; 0x68d2 <__mulsf3_pse+0x7a>
    68c0:	ee 0f       	add	r30, r30
    68c2:	ff 1f       	adc	r31, r31
    68c4:	bb 1f       	adc	r27, r27
    68c6:	66 1f       	adc	r22, r22
    68c8:	77 1f       	adc	r23, r23
    68ca:	88 1f       	adc	r24, r24
    68cc:	91 50       	subi	r25, 0x01	; 1
    68ce:	50 40       	sbci	r21, 0x00	; 0
    68d0:	a9 f7       	brne	.-22     	; 0x68bc <__mulsf3_pse+0x64>
    68d2:	9e 3f       	cpi	r25, 0xFE	; 254
    68d4:	51 05       	cpc	r21, r1
    68d6:	70 f0       	brcs	.+28     	; 0x68f4 <__mulsf3_pse+0x9c>
    68d8:	60 cf       	rjmp	.-320    	; 0x679a <__fp_inf>
    68da:	aa cf       	rjmp	.-172    	; 0x6830 <__fp_szero>
    68dc:	5f 3f       	cpi	r21, 0xFF	; 255
    68de:	ec f3       	brlt	.-6      	; 0x68da <__mulsf3_pse+0x82>
    68e0:	98 3e       	cpi	r25, 0xE8	; 232
    68e2:	dc f3       	brlt	.-10     	; 0x68da <__mulsf3_pse+0x82>
    68e4:	86 95       	lsr	r24
    68e6:	77 95       	ror	r23
    68e8:	67 95       	ror	r22
    68ea:	b7 95       	ror	r27
    68ec:	f7 95       	ror	r31
    68ee:	e7 95       	ror	r30
    68f0:	9f 5f       	subi	r25, 0xFF	; 255
    68f2:	c1 f7       	brne	.-16     	; 0x68e4 <__mulsf3_pse+0x8c>
    68f4:	fe 2b       	or	r31, r30
    68f6:	88 0f       	add	r24, r24
    68f8:	91 1d       	adc	r25, r1
    68fa:	96 95       	lsr	r25
    68fc:	87 95       	ror	r24
    68fe:	97 f9       	bld	r25, 7
    6900:	08 95       	ret

00006902 <__unordsf2>:
    6902:	27 df       	rcall	.-434    	; 0x6752 <__fp_cmp>
    6904:	88 0b       	sbc	r24, r24
    6906:	99 0b       	sbc	r25, r25
    6908:	08 95       	ret

0000690a <__cxa_pure_virtual>:
    690a:	0e 94 e5 40 	call	0x81ca	; 0x81ca <abort>

0000690e <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    690e:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    6910:	91 8d       	ldd	r25, Z+25	; 0x19
    6912:	22 8d       	ldd	r18, Z+26	; 0x1a
    6914:	89 2f       	mov	r24, r25
    6916:	90 e0       	ldi	r25, 0x00	; 0
    6918:	80 5c       	subi	r24, 0xC0	; 192
    691a:	9f 4f       	sbci	r25, 0xFF	; 255
    691c:	82 1b       	sub	r24, r18
    691e:	91 09       	sbc	r25, r1
}
    6920:	8f 73       	andi	r24, 0x3F	; 63
    6922:	99 27       	eor	r25, r25
    6924:	08 95       	ret

00006926 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    6926:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    6928:	91 8d       	ldd	r25, Z+25	; 0x19
    692a:	82 8d       	ldd	r24, Z+26	; 0x1a
    692c:	98 17       	cp	r25, r24
    692e:	31 f0       	breq	.+12     	; 0x693c <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    6930:	82 8d       	ldd	r24, Z+26	; 0x1a
    6932:	e8 0f       	add	r30, r24
    6934:	f1 1d       	adc	r31, r1
    6936:	85 8d       	ldd	r24, Z+29	; 0x1d
    6938:	90 e0       	ldi	r25, 0x00	; 0
    693a:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    693c:	8f ef       	ldi	r24, 0xFF	; 255
    693e:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    6940:	08 95       	ret

00006942 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    6942:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    6944:	91 8d       	ldd	r25, Z+25	; 0x19
    6946:	82 8d       	ldd	r24, Z+26	; 0x1a
    6948:	98 17       	cp	r25, r24
    694a:	61 f0       	breq	.+24     	; 0x6964 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    694c:	82 8d       	ldd	r24, Z+26	; 0x1a
    694e:	df 01       	movw	r26, r30
    6950:	a8 0f       	add	r26, r24
    6952:	b1 1d       	adc	r27, r1
    6954:	5d 96       	adiw	r26, 0x1d	; 29
    6956:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    6958:	92 8d       	ldd	r25, Z+26	; 0x1a
    695a:	9f 5f       	subi	r25, 0xFF	; 255
    695c:	9f 73       	andi	r25, 0x3F	; 63
    695e:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    6960:	90 e0       	ldi	r25, 0x00	; 0
    6962:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    6964:	8f ef       	ldi	r24, 0xFF	; 255
    6966:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    6968:	08 95       	ret

0000696a <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    696a:	fc 01       	movw	r30, r24
    696c:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    696e:	44 8d       	ldd	r20, Z+28	; 0x1c
    6970:	25 2f       	mov	r18, r21
    6972:	30 e0       	ldi	r19, 0x00	; 0
    6974:	84 2f       	mov	r24, r20
    6976:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    6978:	82 1b       	sub	r24, r18
    697a:	93 0b       	sbc	r25, r19
    697c:	54 17       	cp	r21, r20
    697e:	10 f0       	brcs	.+4      	; 0x6984 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    6980:	cf 96       	adiw	r24, 0x3f	; 63
    6982:	08 95       	ret
  return tail - head - 1;
    6984:	01 97       	sbiw	r24, 0x01	; 1
}
    6986:	08 95       	ret

00006988 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    6988:	83 e5       	ldi	r24, 0x53	; 83
    698a:	96 e3       	ldi	r25, 0x36	; 54
    698c:	89 2b       	or	r24, r25
    698e:	39 f0       	breq	.+14     	; 0x699e <_Z14serialEventRunv+0x16>
    6990:	80 e0       	ldi	r24, 0x00	; 0
    6992:	90 e0       	ldi	r25, 0x00	; 0
    6994:	89 2b       	or	r24, r25
    6996:	19 f0       	breq	.+6      	; 0x699e <_Z14serialEventRunv+0x16>
    6998:	86 d1       	rcall	.+780    	; 0x6ca6 <_Z17Serial0_availablev>
    699a:	81 11       	cpse	r24, r1
    699c:	25 c0       	rjmp	.+74     	; 0x69e8 <_Z14serialEventRunv+0x60>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    699e:	80 e0       	ldi	r24, 0x00	; 0
    69a0:	90 e0       	ldi	r25, 0x00	; 0
    69a2:	89 2b       	or	r24, r25
    69a4:	41 f0       	breq	.+16     	; 0x69b6 <_Z14serialEventRunv+0x2e>
    69a6:	80 e0       	ldi	r24, 0x00	; 0
    69a8:	90 e0       	ldi	r25, 0x00	; 0
    69aa:	89 2b       	or	r24, r25
    69ac:	21 f0       	breq	.+8      	; 0x69b6 <_Z14serialEventRunv+0x2e>
    69ae:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    69b2:	81 11       	cpse	r24, r1
    69b4:	1c c0       	rjmp	.+56     	; 0x69ee <_Z14serialEventRunv+0x66>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    69b6:	80 e0       	ldi	r24, 0x00	; 0
    69b8:	90 e0       	ldi	r25, 0x00	; 0
    69ba:	89 2b       	or	r24, r25
    69bc:	41 f0       	breq	.+16     	; 0x69ce <_Z14serialEventRunv+0x46>
    69be:	80 e0       	ldi	r24, 0x00	; 0
    69c0:	90 e0       	ldi	r25, 0x00	; 0
    69c2:	89 2b       	or	r24, r25
    69c4:	21 f0       	breq	.+8      	; 0x69ce <_Z14serialEventRunv+0x46>
    69c6:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    69ca:	81 11       	cpse	r24, r1
    69cc:	13 c0       	rjmp	.+38     	; 0x69f4 <_Z14serialEventRunv+0x6c>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    69ce:	80 e0       	ldi	r24, 0x00	; 0
    69d0:	90 e0       	ldi	r25, 0x00	; 0
    69d2:	89 2b       	or	r24, r25
    69d4:	a1 f0       	breq	.+40     	; 0x69fe <_Z14serialEventRunv+0x76>
    69d6:	80 e0       	ldi	r24, 0x00	; 0
    69d8:	90 e0       	ldi	r25, 0x00	; 0
    69da:	89 2b       	or	r24, r25
    69dc:	81 f0       	breq	.+32     	; 0x69fe <_Z14serialEventRunv+0x76>
    69de:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    69e2:	81 11       	cpse	r24, r1
    69e4:	0a c0       	rjmp	.+20     	; 0x69fa <_Z14serialEventRunv+0x72>
    69e6:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    69e8:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    69ec:	d8 cf       	rjmp	.-80     	; 0x699e <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    69ee:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    69f2:	e1 cf       	rjmp	.-62     	; 0x69b6 <_Z14serialEventRunv+0x2e>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    69f4:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    69f8:	ea cf       	rjmp	.-44     	; 0x69ce <_Z14serialEventRunv+0x46>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    69fa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    69fe:	08 95       	ret

00006a00 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    6a00:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    6a02:	84 8d       	ldd	r24, Z+28	; 0x1c
    6a04:	df 01       	movw	r26, r30
    6a06:	a8 0f       	add	r26, r24
    6a08:	b1 1d       	adc	r27, r1
    6a0a:	a3 5a       	subi	r26, 0xA3	; 163
    6a0c:	bf 4f       	sbci	r27, 0xFF	; 255
    6a0e:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    6a10:	84 8d       	ldd	r24, Z+28	; 0x1c
    6a12:	90 e0       	ldi	r25, 0x00	; 0
    6a14:	01 96       	adiw	r24, 0x01	; 1
    6a16:	8f 73       	andi	r24, 0x3F	; 63
    6a18:	99 27       	eor	r25, r25
    6a1a:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    6a1c:	a6 89       	ldd	r26, Z+22	; 0x16
    6a1e:	b7 89       	ldd	r27, Z+23	; 0x17
    6a20:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    6a22:	a0 89       	ldd	r26, Z+16	; 0x10
    6a24:	b1 89       	ldd	r27, Z+17	; 0x11
    6a26:	8c 91       	ld	r24, X
    6a28:	83 70       	andi	r24, 0x03	; 3
    6a2a:	80 64       	ori	r24, 0x40	; 64
    6a2c:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    6a2e:	93 8d       	ldd	r25, Z+27	; 0x1b
    6a30:	84 8d       	ldd	r24, Z+28	; 0x1c
    6a32:	98 13       	cpse	r25, r24
    6a34:	06 c0       	rjmp	.+12     	; 0x6a42 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    6a36:	02 88       	ldd	r0, Z+18	; 0x12
    6a38:	f3 89       	ldd	r31, Z+19	; 0x13
    6a3a:	e0 2d       	mov	r30, r0
    6a3c:	80 81       	ld	r24, Z
    6a3e:	8f 7d       	andi	r24, 0xDF	; 223
    6a40:	80 83       	st	Z, r24
    6a42:	08 95       	ret

00006a44 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    6a44:	ef 92       	push	r14
    6a46:	ff 92       	push	r15
    6a48:	0f 93       	push	r16
    6a4a:	1f 93       	push	r17
    6a4c:	cf 93       	push	r28
    6a4e:	df 93       	push	r29
    6a50:	ec 01       	movw	r28, r24
  _written = true;
    6a52:	81 e0       	ldi	r24, 0x01	; 1
    6a54:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    6a56:	9b 8d       	ldd	r25, Y+27	; 0x1b
    6a58:	8c 8d       	ldd	r24, Y+28	; 0x1c
    6a5a:	98 13       	cpse	r25, r24
    6a5c:	05 c0       	rjmp	.+10     	; 0x6a68 <_ZN14HardwareSerial5writeEh+0x24>
    6a5e:	e8 89       	ldd	r30, Y+16	; 0x10
    6a60:	f9 89       	ldd	r31, Y+17	; 0x11
    6a62:	80 81       	ld	r24, Z
    6a64:	85 fd       	sbrc	r24, 5
    6a66:	25 c0       	rjmp	.+74     	; 0x6ab2 <_ZN14HardwareSerial5writeEh+0x6e>
    6a68:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    6a6a:	0b 8d       	ldd	r16, Y+27	; 0x1b
    6a6c:	10 e0       	ldi	r17, 0x00	; 0
    6a6e:	0f 5f       	subi	r16, 0xFF	; 255
    6a70:	1f 4f       	sbci	r17, 0xFF	; 255
    6a72:	0f 73       	andi	r16, 0x3F	; 63
    6a74:	11 27       	eor	r17, r17
    6a76:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    6a78:	8c 8d       	ldd	r24, Y+28	; 0x1c
    6a7a:	e8 12       	cpse	r14, r24
    6a7c:	0b c0       	rjmp	.+22     	; 0x6a94 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    6a7e:	0f b6       	in	r0, 0x3f	; 63
    6a80:	07 fc       	sbrc	r0, 7
    6a82:	fa cf       	rjmp	.-12     	; 0x6a78 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    6a84:	e8 89       	ldd	r30, Y+16	; 0x10
    6a86:	f9 89       	ldd	r31, Y+17	; 0x11
    6a88:	80 81       	ld	r24, Z
    6a8a:	85 ff       	sbrs	r24, 5
    6a8c:	f5 cf       	rjmp	.-22     	; 0x6a78 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    6a8e:	ce 01       	movw	r24, r28
    6a90:	b7 df       	rcall	.-146    	; 0x6a00 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    6a92:	f2 cf       	rjmp	.-28     	; 0x6a78 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    6a94:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6a96:	fe 01       	movw	r30, r28
    6a98:	e8 0f       	add	r30, r24
    6a9a:	f1 1d       	adc	r31, r1
    6a9c:	e3 5a       	subi	r30, 0xA3	; 163
    6a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    6aa0:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    6aa2:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    6aa4:	f8 94       	cli
    _tx_buffer_head = i;
    6aa6:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    6aa8:	ea 89       	ldd	r30, Y+18	; 0x12
    6aaa:	fb 89       	ldd	r31, Y+19	; 0x13
    6aac:	80 81       	ld	r24, Z
    6aae:	80 62       	ori	r24, 0x20	; 32
    6ab0:	0a c0       	rjmp	.+20     	; 0x6ac6 <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    6ab2:	9f b7       	in	r25, 0x3f	; 63
    6ab4:	f8 94       	cli
      *_udr = c;
    6ab6:	ee 89       	ldd	r30, Y+22	; 0x16
    6ab8:	ff 89       	ldd	r31, Y+23	; 0x17
    6aba:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    6abc:	e8 89       	ldd	r30, Y+16	; 0x10
    6abe:	f9 89       	ldd	r31, Y+17	; 0x11
    6ac0:	80 81       	ld	r24, Z
    6ac2:	83 70       	andi	r24, 0x03	; 3
    6ac4:	80 64       	ori	r24, 0x40	; 64
    6ac6:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    6ac8:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    6aca:	81 e0       	ldi	r24, 0x01	; 1
    6acc:	90 e0       	ldi	r25, 0x00	; 0
    6ace:	df 91       	pop	r29
    6ad0:	cf 91       	pop	r28
    6ad2:	1f 91       	pop	r17
    6ad4:	0f 91       	pop	r16
    6ad6:	ff 90       	pop	r15
    6ad8:	ef 90       	pop	r14
    6ada:	08 95       	ret

00006adc <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    6adc:	cf 93       	push	r28
    6ade:	df 93       	push	r29
    6ae0:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    6ae2:	88 8d       	ldd	r24, Y+24	; 0x18
    6ae4:	88 23       	and	r24, r24
    6ae6:	c1 f0       	breq	.+48     	; 0x6b18 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    6ae8:	ea 89       	ldd	r30, Y+18	; 0x12
    6aea:	fb 89       	ldd	r31, Y+19	; 0x13
    6aec:	80 81       	ld	r24, Z
    6aee:	85 fd       	sbrc	r24, 5
    6af0:	05 c0       	rjmp	.+10     	; 0x6afc <_ZN14HardwareSerial5flushEv+0x20>
    6af2:	a8 89       	ldd	r26, Y+16	; 0x10
    6af4:	b9 89       	ldd	r27, Y+17	; 0x11
    6af6:	8c 91       	ld	r24, X
    6af8:	86 fd       	sbrc	r24, 6
    6afa:	0e c0       	rjmp	.+28     	; 0x6b18 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    6afc:	0f b6       	in	r0, 0x3f	; 63
    6afe:	07 fc       	sbrc	r0, 7
    6b00:	f5 cf       	rjmp	.-22     	; 0x6aec <_ZN14HardwareSerial5flushEv+0x10>
    6b02:	80 81       	ld	r24, Z
    6b04:	85 ff       	sbrs	r24, 5
    6b06:	f2 cf       	rjmp	.-28     	; 0x6aec <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    6b08:	a8 89       	ldd	r26, Y+16	; 0x10
    6b0a:	b9 89       	ldd	r27, Y+17	; 0x11
    6b0c:	8c 91       	ld	r24, X
    6b0e:	85 ff       	sbrs	r24, 5
    6b10:	ed cf       	rjmp	.-38     	; 0x6aec <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    6b12:	ce 01       	movw	r24, r28
    6b14:	75 df       	rcall	.-278    	; 0x6a00 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    6b16:	e8 cf       	rjmp	.-48     	; 0x6ae8 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    6b18:	df 91       	pop	r29
    6b1a:	cf 91       	pop	r28
    6b1c:	08 95       	ret

00006b1e <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    6b1e:	cf 92       	push	r12
    6b20:	df 92       	push	r13
    6b22:	ef 92       	push	r14
    6b24:	ff 92       	push	r15
    6b26:	1f 93       	push	r17
    6b28:	cf 93       	push	r28
    6b2a:	df 93       	push	r29
    6b2c:	ec 01       	movw	r28, r24
    6b2e:	6a 01       	movw	r12, r20
    6b30:	7b 01       	movw	r14, r22
    6b32:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    6b34:	e8 89       	ldd	r30, Y+16	; 0x10
    6b36:	f9 89       	ldd	r31, Y+17	; 0x11
    6b38:	82 e0       	ldi	r24, 0x02	; 2
    6b3a:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    6b3c:	41 15       	cp	r20, r1
    6b3e:	51 4e       	sbci	r21, 0xE1	; 225
    6b40:	61 05       	cpc	r22, r1
    6b42:	71 05       	cpc	r23, r1
    6b44:	b1 f0       	breq	.+44     	; 0x6b72 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    6b46:	60 e0       	ldi	r22, 0x00	; 0
    6b48:	79 e0       	ldi	r23, 0x09	; 9
    6b4a:	8d e3       	ldi	r24, 0x3D	; 61
    6b4c:	90 e0       	ldi	r25, 0x00	; 0
    6b4e:	a7 01       	movw	r20, r14
    6b50:	96 01       	movw	r18, r12
    6b52:	0e 94 66 3e 	call	0x7ccc	; 0x7ccc <__udivmodsi4>
    6b56:	da 01       	movw	r26, r20
    6b58:	c9 01       	movw	r24, r18
    6b5a:	01 97       	sbiw	r24, 0x01	; 1
    6b5c:	a1 09       	sbc	r26, r1
    6b5e:	b1 09       	sbc	r27, r1
    6b60:	b6 95       	lsr	r27
    6b62:	a7 95       	ror	r26
    6b64:	97 95       	ror	r25
    6b66:	87 95       	ror	r24
    6b68:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    6b6a:	21 15       	cp	r18, r1
    6b6c:	80 e1       	ldi	r24, 0x10	; 16
    6b6e:	38 07       	cpc	r19, r24
    6b70:	a8 f0       	brcs	.+42     	; 0x6b9c <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    6b72:	e8 89       	ldd	r30, Y+16	; 0x10
    6b74:	f9 89       	ldd	r31, Y+17	; 0x11
    6b76:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    6b78:	60 e8       	ldi	r22, 0x80	; 128
    6b7a:	74 e8       	ldi	r23, 0x84	; 132
    6b7c:	8e e1       	ldi	r24, 0x1E	; 30
    6b7e:	90 e0       	ldi	r25, 0x00	; 0
    6b80:	a7 01       	movw	r20, r14
    6b82:	96 01       	movw	r18, r12
    6b84:	0e 94 66 3e 	call	0x7ccc	; 0x7ccc <__udivmodsi4>
    6b88:	da 01       	movw	r26, r20
    6b8a:	c9 01       	movw	r24, r18
    6b8c:	01 97       	sbiw	r24, 0x01	; 1
    6b8e:	a1 09       	sbc	r26, r1
    6b90:	b1 09       	sbc	r27, r1
    6b92:	b6 95       	lsr	r27
    6b94:	a7 95       	ror	r26
    6b96:	97 95       	ror	r25
    6b98:	87 95       	ror	r24
    6b9a:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    6b9c:	ec 85       	ldd	r30, Y+12	; 0x0c
    6b9e:	fd 85       	ldd	r31, Y+13	; 0x0d
    6ba0:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    6ba2:	ee 85       	ldd	r30, Y+14	; 0x0e
    6ba4:	ff 85       	ldd	r31, Y+15	; 0x0f
    6ba6:	20 83       	st	Z, r18

  _written = false;
    6ba8:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    6baa:	ec 89       	ldd	r30, Y+20	; 0x14
    6bac:	fd 89       	ldd	r31, Y+21	; 0x15
    6bae:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    6bb0:	ea 89       	ldd	r30, Y+18	; 0x12
    6bb2:	fb 89       	ldd	r31, Y+19	; 0x13
    6bb4:	80 81       	ld	r24, Z
    6bb6:	80 61       	ori	r24, 0x10	; 16
    6bb8:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    6bba:	ea 89       	ldd	r30, Y+18	; 0x12
    6bbc:	fb 89       	ldd	r31, Y+19	; 0x13
    6bbe:	80 81       	ld	r24, Z
    6bc0:	88 60       	ori	r24, 0x08	; 8
    6bc2:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    6bc4:	ea 89       	ldd	r30, Y+18	; 0x12
    6bc6:	fb 89       	ldd	r31, Y+19	; 0x13
    6bc8:	80 81       	ld	r24, Z
    6bca:	80 68       	ori	r24, 0x80	; 128
    6bcc:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    6bce:	ea 89       	ldd	r30, Y+18	; 0x12
    6bd0:	fb 89       	ldd	r31, Y+19	; 0x13
    6bd2:	80 81       	ld	r24, Z
    6bd4:	8f 7d       	andi	r24, 0xDF	; 223
    6bd6:	80 83       	st	Z, r24
}
    6bd8:	df 91       	pop	r29
    6bda:	cf 91       	pop	r28
    6bdc:	1f 91       	pop	r17
    6bde:	ff 90       	pop	r15
    6be0:	ef 90       	pop	r14
    6be2:	df 90       	pop	r13
    6be4:	cf 90       	pop	r12
    6be6:	08 95       	ret

00006be8 <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    6be8:	1f 92       	push	r1
    6bea:	0f 92       	push	r0
    6bec:	0f b6       	in	r0, 0x3f	; 63
    6bee:	0f 92       	push	r0
    6bf0:	11 24       	eor	r1, r1
    6bf2:	0b b6       	in	r0, 0x3b	; 59
    6bf4:	0f 92       	push	r0
    6bf6:	2f 93       	push	r18
    6bf8:	8f 93       	push	r24
    6bfa:	9f 93       	push	r25
    6bfc:	ef 93       	push	r30
    6bfe:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    6c00:	e0 91 a3 06 	lds	r30, 0x06A3	; 0x8006a3 <Serial+0x10>
    6c04:	f0 91 a4 06 	lds	r31, 0x06A4	; 0x8006a4 <Serial+0x11>
    6c08:	80 81       	ld	r24, Z
    6c0a:	e0 91 a9 06 	lds	r30, 0x06A9	; 0x8006a9 <Serial+0x16>
    6c0e:	f0 91 aa 06 	lds	r31, 0x06AA	; 0x8006aa <Serial+0x17>
    6c12:	82 fd       	sbrc	r24, 2
    6c14:	12 c0       	rjmp	.+36     	; 0x6c3a <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    6c16:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    6c18:	80 91 ac 06 	lds	r24, 0x06AC	; 0x8006ac <Serial+0x19>
    6c1c:	8f 5f       	subi	r24, 0xFF	; 255
    6c1e:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    6c20:	20 91 ad 06 	lds	r18, 0x06AD	; 0x8006ad <Serial+0x1a>
    6c24:	82 17       	cp	r24, r18
    6c26:	51 f0       	breq	.+20     	; 0x6c3c <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    6c28:	e0 91 ac 06 	lds	r30, 0x06AC	; 0x8006ac <Serial+0x19>
    6c2c:	f0 e0       	ldi	r31, 0x00	; 0
    6c2e:	ed 56       	subi	r30, 0x6D	; 109
    6c30:	f9 4f       	sbci	r31, 0xF9	; 249
    6c32:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    6c34:	80 93 ac 06 	sts	0x06AC, r24	; 0x8006ac <Serial+0x19>
    6c38:	01 c0       	rjmp	.+2      	; 0x6c3c <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    6c3a:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    6c3c:	ff 91       	pop	r31
    6c3e:	ef 91       	pop	r30
    6c40:	9f 91       	pop	r25
    6c42:	8f 91       	pop	r24
    6c44:	2f 91       	pop	r18
    6c46:	0f 90       	pop	r0
    6c48:	0b be       	out	0x3b, r0	; 59
    6c4a:	0f 90       	pop	r0
    6c4c:	0f be       	out	0x3f, r0	; 63
    6c4e:	0f 90       	pop	r0
    6c50:	1f 90       	pop	r1
    6c52:	18 95       	reti

00006c54 <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    6c54:	1f 92       	push	r1
    6c56:	0f 92       	push	r0
    6c58:	0f b6       	in	r0, 0x3f	; 63
    6c5a:	0f 92       	push	r0
    6c5c:	11 24       	eor	r1, r1
    6c5e:	0b b6       	in	r0, 0x3b	; 59
    6c60:	0f 92       	push	r0
    6c62:	2f 93       	push	r18
    6c64:	3f 93       	push	r19
    6c66:	4f 93       	push	r20
    6c68:	5f 93       	push	r21
    6c6a:	6f 93       	push	r22
    6c6c:	7f 93       	push	r23
    6c6e:	8f 93       	push	r24
    6c70:	9f 93       	push	r25
    6c72:	af 93       	push	r26
    6c74:	bf 93       	push	r27
    6c76:	ef 93       	push	r30
    6c78:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    6c7a:	83 e9       	ldi	r24, 0x93	; 147
    6c7c:	96 e0       	ldi	r25, 0x06	; 6
    6c7e:	c0 de       	rcall	.-640    	; 0x6a00 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    6c80:	ff 91       	pop	r31
    6c82:	ef 91       	pop	r30
    6c84:	bf 91       	pop	r27
    6c86:	af 91       	pop	r26
    6c88:	9f 91       	pop	r25
    6c8a:	8f 91       	pop	r24
    6c8c:	7f 91       	pop	r23
    6c8e:	6f 91       	pop	r22
    6c90:	5f 91       	pop	r21
    6c92:	4f 91       	pop	r20
    6c94:	3f 91       	pop	r19
    6c96:	2f 91       	pop	r18
    6c98:	0f 90       	pop	r0
    6c9a:	0b be       	out	0x3b, r0	; 59
    6c9c:	0f 90       	pop	r0
    6c9e:	0f be       	out	0x3f, r0	; 63
    6ca0:	0f 90       	pop	r0
    6ca2:	1f 90       	pop	r1
    6ca4:	18 95       	reti

00006ca6 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    6ca6:	83 e9       	ldi	r24, 0x93	; 147
    6ca8:	96 e0       	ldi	r25, 0x06	; 6
    6caa:	31 de       	rcall	.-926    	; 0x690e <_ZN14HardwareSerial9availableEv>
    6cac:	21 e0       	ldi	r18, 0x01	; 1
    6cae:	89 2b       	or	r24, r25
    6cb0:	09 f4       	brne	.+2      	; 0x6cb4 <_Z17Serial0_availablev+0xe>
    6cb2:	20 e0       	ldi	r18, 0x00	; 0
}
    6cb4:	82 2f       	mov	r24, r18
    6cb6:	08 95       	ret

00006cb8 <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    6cb8:	e3 e9       	ldi	r30, 0x93	; 147
    6cba:	f6 e0       	ldi	r31, 0x06	; 6
    6cbc:	13 82       	std	Z+3, r1	; 0x03
    6cbe:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    6cc0:	88 ee       	ldi	r24, 0xE8	; 232
    6cc2:	93 e0       	ldi	r25, 0x03	; 3
    6cc4:	a0 e0       	ldi	r26, 0x00	; 0
    6cc6:	b0 e0       	ldi	r27, 0x00	; 0
    6cc8:	84 83       	std	Z+4, r24	; 0x04
    6cca:	95 83       	std	Z+5, r25	; 0x05
    6ccc:	a6 83       	std	Z+6, r26	; 0x06
    6cce:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    6cd0:	85 ee       	ldi	r24, 0xE5	; 229
    6cd2:	93 e0       	ldi	r25, 0x03	; 3
    6cd4:	91 83       	std	Z+1, r25	; 0x01
    6cd6:	80 83       	st	Z, r24
    6cd8:	85 ec       	ldi	r24, 0xC5	; 197
    6cda:	90 e0       	ldi	r25, 0x00	; 0
    6cdc:	95 87       	std	Z+13, r25	; 0x0d
    6cde:	84 87       	std	Z+12, r24	; 0x0c
    6ce0:	84 ec       	ldi	r24, 0xC4	; 196
    6ce2:	90 e0       	ldi	r25, 0x00	; 0
    6ce4:	97 87       	std	Z+15, r25	; 0x0f
    6ce6:	86 87       	std	Z+14, r24	; 0x0e
    6ce8:	80 ec       	ldi	r24, 0xC0	; 192
    6cea:	90 e0       	ldi	r25, 0x00	; 0
    6cec:	91 8b       	std	Z+17, r25	; 0x11
    6cee:	80 8b       	std	Z+16, r24	; 0x10
    6cf0:	81 ec       	ldi	r24, 0xC1	; 193
    6cf2:	90 e0       	ldi	r25, 0x00	; 0
    6cf4:	93 8b       	std	Z+19, r25	; 0x13
    6cf6:	82 8b       	std	Z+18, r24	; 0x12
    6cf8:	82 ec       	ldi	r24, 0xC2	; 194
    6cfa:	90 e0       	ldi	r25, 0x00	; 0
    6cfc:	95 8b       	std	Z+21, r25	; 0x15
    6cfe:	84 8b       	std	Z+20, r24	; 0x14
    6d00:	86 ec       	ldi	r24, 0xC6	; 198
    6d02:	90 e0       	ldi	r25, 0x00	; 0
    6d04:	97 8b       	std	Z+23, r25	; 0x17
    6d06:	86 8b       	std	Z+22, r24	; 0x16
    6d08:	11 8e       	std	Z+25, r1	; 0x19
    6d0a:	12 8e       	std	Z+26, r1	; 0x1a
    6d0c:	13 8e       	std	Z+27, r1	; 0x1b
    6d0e:	14 8e       	std	Z+28, r1	; 0x1c
    6d10:	08 95       	ret

00006d12 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    6d12:	08 95       	ret

00006d14 <initVariant>:
    6d14:	08 95       	ret

00006d16 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    6d16:	d0 d2       	rcall	.+1440   	; 0x72b8 <init>

	initVariant();
    6d18:	fd df       	rcall	.-6      	; 0x6d14 <initVariant>
    6d1a:	0e 94 97 08 	call	0x112e	; 0x112e <setup>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    6d1e:	c4 ec       	ldi	r28, 0xC4	; 196
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    6d20:	d4 e3       	ldi	r29, 0x34	; 52
    6d22:	0e 94 21 0c 	call	0x1842	; 0x1842 <loop>
#endif
	
	setup();
    
	for (;;) {
		loop();
    6d26:	20 97       	sbiw	r28, 0x00	; 0
		if (serialEventRun) serialEventRun();
    6d28:	e1 f3       	breq	.-8      	; 0x6d22 <main+0xc>
    6d2a:	2e de       	rcall	.-932    	; 0x6988 <_Z14serialEventRunv>
    6d2c:	fa cf       	rjmp	.-12     	; 0x6d22 <main+0xc>

00006d2e <_ZdlPv>:
    6d2e:	0c 94 7c 3f 	jmp	0x7ef8	; 0x7ef8 <free>

00006d32 <_ZN5Print5writeEPKhj>:
    if (c == 0) break;
    if (write(c)) n++;
    else break;
  }
  return n;
}
    6d32:	cf 92       	push	r12
    6d34:	df 92       	push	r13
    6d36:	ef 92       	push	r14
    6d38:	ff 92       	push	r15
    6d3a:	0f 93       	push	r16
    6d3c:	1f 93       	push	r17
    6d3e:	cf 93       	push	r28
    6d40:	df 93       	push	r29
    6d42:	6c 01       	movw	r12, r24
    6d44:	7a 01       	movw	r14, r20
    6d46:	8b 01       	movw	r16, r22
    6d48:	c0 e0       	ldi	r28, 0x00	; 0
    6d4a:	d0 e0       	ldi	r29, 0x00	; 0
    6d4c:	ce 15       	cp	r28, r14
    6d4e:	df 05       	cpc	r29, r15
    6d50:	81 f0       	breq	.+32     	; 0x6d72 <_ZN5Print5writeEPKhj+0x40>
    6d52:	d8 01       	movw	r26, r16
    6d54:	6d 91       	ld	r22, X+
    6d56:	8d 01       	movw	r16, r26
    6d58:	d6 01       	movw	r26, r12
    6d5a:	ed 91       	ld	r30, X+
    6d5c:	fc 91       	ld	r31, X
    6d5e:	01 90       	ld	r0, Z+
    6d60:	f0 81       	ld	r31, Z
    6d62:	e0 2d       	mov	r30, r0
    6d64:	c6 01       	movw	r24, r12
    6d66:	19 95       	eicall
    6d68:	89 2b       	or	r24, r25
    6d6a:	11 f0       	breq	.+4      	; 0x6d70 <_ZN5Print5writeEPKhj+0x3e>
    6d6c:	21 96       	adiw	r28, 0x01	; 1
    6d6e:	ee cf       	rjmp	.-36     	; 0x6d4c <_ZN5Print5writeEPKhj+0x1a>
    6d70:	7e 01       	movw	r14, r28
    6d72:	c7 01       	movw	r24, r14
    6d74:	df 91       	pop	r29
    6d76:	cf 91       	pop	r28
    6d78:	1f 91       	pop	r17
    6d7a:	0f 91       	pop	r16
    6d7c:	ff 90       	pop	r15
    6d7e:	ef 90       	pop	r14
    6d80:	df 90       	pop	r13
    6d82:	cf 90       	pop	r12
    6d84:	08 95       	ret

00006d86 <_ZN5Print5printERK6String>:
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
    6d86:	db 01       	movw	r26, r22
    6d88:	14 96       	adiw	r26, 0x04	; 4
    6d8a:	4d 91       	ld	r20, X+
    6d8c:	5c 91       	ld	r21, X
    6d8e:	15 97       	sbiw	r26, 0x05	; 5
    6d90:	6d 91       	ld	r22, X+
    6d92:	7c 91       	ld	r23, X
    6d94:	dc 01       	movw	r26, r24
    6d96:	ed 91       	ld	r30, X+
    6d98:	fc 91       	ld	r31, X
    6d9a:	02 80       	ldd	r0, Z+2	; 0x02
    6d9c:	f3 81       	ldd	r31, Z+3	; 0x03
    6d9e:	e0 2d       	mov	r30, r0
    6da0:	19 94       	eijmp

00006da2 <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
    6da2:	08 95       	ret

00006da4 <attachInterrupt>:
    6da4:	88 30       	cpi	r24, 0x08	; 8
    6da6:	08 f0       	brcs	.+2      	; 0x6daa <attachInterrupt+0x6>
    6da8:	6f c0       	rjmp	.+222    	; 0x6e88 <attachInterrupt+0xe4>
    6daa:	a8 2f       	mov	r26, r24
    6dac:	b0 e0       	ldi	r27, 0x00	; 0
    6dae:	aa 0f       	add	r26, r26
    6db0:	bb 1f       	adc	r27, r27
    6db2:	a9 59       	subi	r26, 0x99	; 153
    6db4:	bd 4f       	sbci	r27, 0xFD	; 253
    6db6:	11 96       	adiw	r26, 0x01	; 1
    6db8:	7c 93       	st	X, r23
    6dba:	6e 93       	st	-X, r22
    6dbc:	90 e0       	ldi	r25, 0x00	; 0
    6dbe:	fc 01       	movw	r30, r24
    6dc0:	31 97       	sbiw	r30, 0x01	; 1
    6dc2:	e7 30       	cpi	r30, 0x07	; 7
    6dc4:	f1 05       	cpc	r31, r1
    6dc6:	98 f5       	brcc	.+102    	; 0x6e2e <attachInterrupt+0x8a>
    6dc8:	88 27       	eor	r24, r24
    6dca:	ee 58       	subi	r30, 0x8E	; 142
    6dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    6dce:	8f 4f       	sbci	r24, 0xFF	; 255
    6dd0:	bb c7       	rjmp	.+3958   	; 0x7d48 <__tablejump2__>
    6dd2:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    6dd6:	8c 7f       	andi	r24, 0xFC	; 252
    6dd8:	48 2b       	or	r20, r24
    6dda:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    6dde:	e8 9a       	sbi	0x1d, 0	; 29
    6de0:	08 95       	ret
    6de2:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    6de6:	83 7f       	andi	r24, 0xF3	; 243
    6de8:	44 0f       	add	r20, r20
    6dea:	55 1f       	adc	r21, r21
    6dec:	44 0f       	add	r20, r20
    6dee:	55 1f       	adc	r21, r21
    6df0:	48 2b       	or	r20, r24
    6df2:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    6df6:	e9 9a       	sbi	0x1d, 1	; 29
    6df8:	08 95       	ret
    6dfa:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    6dfe:	8f 7c       	andi	r24, 0xCF	; 207
    6e00:	74 e0       	ldi	r23, 0x04	; 4
    6e02:	44 0f       	add	r20, r20
    6e04:	55 1f       	adc	r21, r21
    6e06:	7a 95       	dec	r23
    6e08:	e1 f7       	brne	.-8      	; 0x6e02 <attachInterrupt+0x5e>
    6e0a:	48 2b       	or	r20, r24
    6e0c:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    6e10:	ea 9a       	sbi	0x1d, 2	; 29
    6e12:	08 95       	ret
    6e14:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    6e18:	8f 73       	andi	r24, 0x3F	; 63
    6e1a:	66 e0       	ldi	r22, 0x06	; 6
    6e1c:	44 0f       	add	r20, r20
    6e1e:	55 1f       	adc	r21, r21
    6e20:	6a 95       	dec	r22
    6e22:	e1 f7       	brne	.-8      	; 0x6e1c <attachInterrupt+0x78>
    6e24:	48 2b       	or	r20, r24
    6e26:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    6e2a:	eb 9a       	sbi	0x1d, 3	; 29
    6e2c:	08 95       	ret
    6e2e:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
    6e32:	8c 7f       	andi	r24, 0xFC	; 252
    6e34:	48 2b       	or	r20, r24
    6e36:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
    6e3a:	ec 9a       	sbi	0x1d, 4	; 29
    6e3c:	08 95       	ret
    6e3e:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
    6e42:	83 7f       	andi	r24, 0xF3	; 243
    6e44:	44 0f       	add	r20, r20
    6e46:	55 1f       	adc	r21, r21
    6e48:	44 0f       	add	r20, r20
    6e4a:	55 1f       	adc	r21, r21
    6e4c:	48 2b       	or	r20, r24
    6e4e:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
    6e52:	ed 9a       	sbi	0x1d, 5	; 29
    6e54:	08 95       	ret
    6e56:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
    6e5a:	8f 7c       	andi	r24, 0xCF	; 207
    6e5c:	24 e0       	ldi	r18, 0x04	; 4
    6e5e:	44 0f       	add	r20, r20
    6e60:	55 1f       	adc	r21, r21
    6e62:	2a 95       	dec	r18
    6e64:	e1 f7       	brne	.-8      	; 0x6e5e <attachInterrupt+0xba>
    6e66:	48 2b       	or	r20, r24
    6e68:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
    6e6c:	ee 9a       	sbi	0x1d, 6	; 29
    6e6e:	08 95       	ret
    6e70:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
    6e74:	8f 73       	andi	r24, 0x3F	; 63
    6e76:	96 e0       	ldi	r25, 0x06	; 6
    6e78:	44 0f       	add	r20, r20
    6e7a:	55 1f       	adc	r21, r21
    6e7c:	9a 95       	dec	r25
    6e7e:	e1 f7       	brne	.-8      	; 0x6e78 <attachInterrupt+0xd4>
    6e80:	48 2b       	or	r20, r24
    6e82:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
    6e86:	ef 9a       	sbi	0x1d, 7	; 29
    6e88:	08 95       	ret

00006e8a <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#elif defined(EICRA) && defined(EICRB)

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_2)
    6e8a:	1f 92       	push	r1
    6e8c:	0f 92       	push	r0
    6e8e:	0f b6       	in	r0, 0x3f	; 63
    6e90:	0f 92       	push	r0
    6e92:	11 24       	eor	r1, r1
    6e94:	0b b6       	in	r0, 0x3b	; 59
    6e96:	0f 92       	push	r0
    6e98:	2f 93       	push	r18
    6e9a:	3f 93       	push	r19
    6e9c:	4f 93       	push	r20
    6e9e:	5f 93       	push	r21
    6ea0:	6f 93       	push	r22
    6ea2:	7f 93       	push	r23
    6ea4:	8f 93       	push	r24
    6ea6:	9f 93       	push	r25
    6ea8:	af 93       	push	r26
    6eaa:	bf 93       	push	r27
    6eac:	ef 93       	push	r30
    6eae:	ff 93       	push	r31
    6eb0:	e0 91 6b 02 	lds	r30, 0x026B	; 0x80026b <intFunc+0x4>
    6eb4:	f0 91 6c 02 	lds	r31, 0x026C	; 0x80026c <intFunc+0x5>
    6eb8:	19 95       	eicall
    6eba:	ff 91       	pop	r31
    6ebc:	ef 91       	pop	r30
    6ebe:	bf 91       	pop	r27
    6ec0:	af 91       	pop	r26
    6ec2:	9f 91       	pop	r25
    6ec4:	8f 91       	pop	r24
    6ec6:	7f 91       	pop	r23
    6ec8:	6f 91       	pop	r22
    6eca:	5f 91       	pop	r21
    6ecc:	4f 91       	pop	r20
    6ece:	3f 91       	pop	r19
    6ed0:	2f 91       	pop	r18
    6ed2:	0f 90       	pop	r0
    6ed4:	0b be       	out	0x3b, r0	; 59
    6ed6:	0f 90       	pop	r0
    6ed8:	0f be       	out	0x3f, r0	; 63
    6eda:	0f 90       	pop	r0
    6edc:	1f 90       	pop	r1
    6ede:	18 95       	reti

00006ee0 <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_3)
    6ee0:	1f 92       	push	r1
    6ee2:	0f 92       	push	r0
    6ee4:	0f b6       	in	r0, 0x3f	; 63
    6ee6:	0f 92       	push	r0
    6ee8:	11 24       	eor	r1, r1
    6eea:	0b b6       	in	r0, 0x3b	; 59
    6eec:	0f 92       	push	r0
    6eee:	2f 93       	push	r18
    6ef0:	3f 93       	push	r19
    6ef2:	4f 93       	push	r20
    6ef4:	5f 93       	push	r21
    6ef6:	6f 93       	push	r22
    6ef8:	7f 93       	push	r23
    6efa:	8f 93       	push	r24
    6efc:	9f 93       	push	r25
    6efe:	af 93       	push	r26
    6f00:	bf 93       	push	r27
    6f02:	ef 93       	push	r30
    6f04:	ff 93       	push	r31
    6f06:	e0 91 6d 02 	lds	r30, 0x026D	; 0x80026d <intFunc+0x6>
    6f0a:	f0 91 6e 02 	lds	r31, 0x026E	; 0x80026e <intFunc+0x7>
    6f0e:	19 95       	eicall
    6f10:	ff 91       	pop	r31
    6f12:	ef 91       	pop	r30
    6f14:	bf 91       	pop	r27
    6f16:	af 91       	pop	r26
    6f18:	9f 91       	pop	r25
    6f1a:	8f 91       	pop	r24
    6f1c:	7f 91       	pop	r23
    6f1e:	6f 91       	pop	r22
    6f20:	5f 91       	pop	r21
    6f22:	4f 91       	pop	r20
    6f24:	3f 91       	pop	r19
    6f26:	2f 91       	pop	r18
    6f28:	0f 90       	pop	r0
    6f2a:	0b be       	out	0x3b, r0	; 59
    6f2c:	0f 90       	pop	r0
    6f2e:	0f be       	out	0x3f, r0	; 63
    6f30:	0f 90       	pop	r0
    6f32:	1f 90       	pop	r1
    6f34:	18 95       	reti

00006f36 <__vector_3>:
IMPLEMENT_ISR(INT2_vect, EXTERNAL_INT_4)
    6f36:	1f 92       	push	r1
    6f38:	0f 92       	push	r0
    6f3a:	0f b6       	in	r0, 0x3f	; 63
    6f3c:	0f 92       	push	r0
    6f3e:	11 24       	eor	r1, r1
    6f40:	0b b6       	in	r0, 0x3b	; 59
    6f42:	0f 92       	push	r0
    6f44:	2f 93       	push	r18
    6f46:	3f 93       	push	r19
    6f48:	4f 93       	push	r20
    6f4a:	5f 93       	push	r21
    6f4c:	6f 93       	push	r22
    6f4e:	7f 93       	push	r23
    6f50:	8f 93       	push	r24
    6f52:	9f 93       	push	r25
    6f54:	af 93       	push	r26
    6f56:	bf 93       	push	r27
    6f58:	ef 93       	push	r30
    6f5a:	ff 93       	push	r31
    6f5c:	e0 91 6f 02 	lds	r30, 0x026F	; 0x80026f <intFunc+0x8>
    6f60:	f0 91 70 02 	lds	r31, 0x0270	; 0x800270 <intFunc+0x9>
    6f64:	19 95       	eicall
    6f66:	ff 91       	pop	r31
    6f68:	ef 91       	pop	r30
    6f6a:	bf 91       	pop	r27
    6f6c:	af 91       	pop	r26
    6f6e:	9f 91       	pop	r25
    6f70:	8f 91       	pop	r24
    6f72:	7f 91       	pop	r23
    6f74:	6f 91       	pop	r22
    6f76:	5f 91       	pop	r21
    6f78:	4f 91       	pop	r20
    6f7a:	3f 91       	pop	r19
    6f7c:	2f 91       	pop	r18
    6f7e:	0f 90       	pop	r0
    6f80:	0b be       	out	0x3b, r0	; 59
    6f82:	0f 90       	pop	r0
    6f84:	0f be       	out	0x3f, r0	; 63
    6f86:	0f 90       	pop	r0
    6f88:	1f 90       	pop	r1
    6f8a:	18 95       	reti

00006f8c <__vector_4>:
IMPLEMENT_ISR(INT3_vect, EXTERNAL_INT_5)
    6f8c:	1f 92       	push	r1
    6f8e:	0f 92       	push	r0
    6f90:	0f b6       	in	r0, 0x3f	; 63
    6f92:	0f 92       	push	r0
    6f94:	11 24       	eor	r1, r1
    6f96:	0b b6       	in	r0, 0x3b	; 59
    6f98:	0f 92       	push	r0
    6f9a:	2f 93       	push	r18
    6f9c:	3f 93       	push	r19
    6f9e:	4f 93       	push	r20
    6fa0:	5f 93       	push	r21
    6fa2:	6f 93       	push	r22
    6fa4:	7f 93       	push	r23
    6fa6:	8f 93       	push	r24
    6fa8:	9f 93       	push	r25
    6faa:	af 93       	push	r26
    6fac:	bf 93       	push	r27
    6fae:	ef 93       	push	r30
    6fb0:	ff 93       	push	r31
    6fb2:	e0 91 71 02 	lds	r30, 0x0271	; 0x800271 <intFunc+0xa>
    6fb6:	f0 91 72 02 	lds	r31, 0x0272	; 0x800272 <intFunc+0xb>
    6fba:	19 95       	eicall
    6fbc:	ff 91       	pop	r31
    6fbe:	ef 91       	pop	r30
    6fc0:	bf 91       	pop	r27
    6fc2:	af 91       	pop	r26
    6fc4:	9f 91       	pop	r25
    6fc6:	8f 91       	pop	r24
    6fc8:	7f 91       	pop	r23
    6fca:	6f 91       	pop	r22
    6fcc:	5f 91       	pop	r21
    6fce:	4f 91       	pop	r20
    6fd0:	3f 91       	pop	r19
    6fd2:	2f 91       	pop	r18
    6fd4:	0f 90       	pop	r0
    6fd6:	0b be       	out	0x3b, r0	; 59
    6fd8:	0f 90       	pop	r0
    6fda:	0f be       	out	0x3f, r0	; 63
    6fdc:	0f 90       	pop	r0
    6fde:	1f 90       	pop	r1
    6fe0:	18 95       	reti

00006fe2 <__vector_5>:
IMPLEMENT_ISR(INT4_vect, EXTERNAL_INT_0)
    6fe2:	1f 92       	push	r1
    6fe4:	0f 92       	push	r0
    6fe6:	0f b6       	in	r0, 0x3f	; 63
    6fe8:	0f 92       	push	r0
    6fea:	11 24       	eor	r1, r1
    6fec:	0b b6       	in	r0, 0x3b	; 59
    6fee:	0f 92       	push	r0
    6ff0:	2f 93       	push	r18
    6ff2:	3f 93       	push	r19
    6ff4:	4f 93       	push	r20
    6ff6:	5f 93       	push	r21
    6ff8:	6f 93       	push	r22
    6ffa:	7f 93       	push	r23
    6ffc:	8f 93       	push	r24
    6ffe:	9f 93       	push	r25
    7000:	af 93       	push	r26
    7002:	bf 93       	push	r27
    7004:	ef 93       	push	r30
    7006:	ff 93       	push	r31
    7008:	e0 91 67 02 	lds	r30, 0x0267	; 0x800267 <intFunc>
    700c:	f0 91 68 02 	lds	r31, 0x0268	; 0x800268 <intFunc+0x1>
    7010:	19 95       	eicall
    7012:	ff 91       	pop	r31
    7014:	ef 91       	pop	r30
    7016:	bf 91       	pop	r27
    7018:	af 91       	pop	r26
    701a:	9f 91       	pop	r25
    701c:	8f 91       	pop	r24
    701e:	7f 91       	pop	r23
    7020:	6f 91       	pop	r22
    7022:	5f 91       	pop	r21
    7024:	4f 91       	pop	r20
    7026:	3f 91       	pop	r19
    7028:	2f 91       	pop	r18
    702a:	0f 90       	pop	r0
    702c:	0b be       	out	0x3b, r0	; 59
    702e:	0f 90       	pop	r0
    7030:	0f be       	out	0x3f, r0	; 63
    7032:	0f 90       	pop	r0
    7034:	1f 90       	pop	r1
    7036:	18 95       	reti

00007038 <__vector_6>:
IMPLEMENT_ISR(INT5_vect, EXTERNAL_INT_1)
    7038:	1f 92       	push	r1
    703a:	0f 92       	push	r0
    703c:	0f b6       	in	r0, 0x3f	; 63
    703e:	0f 92       	push	r0
    7040:	11 24       	eor	r1, r1
    7042:	0b b6       	in	r0, 0x3b	; 59
    7044:	0f 92       	push	r0
    7046:	2f 93       	push	r18
    7048:	3f 93       	push	r19
    704a:	4f 93       	push	r20
    704c:	5f 93       	push	r21
    704e:	6f 93       	push	r22
    7050:	7f 93       	push	r23
    7052:	8f 93       	push	r24
    7054:	9f 93       	push	r25
    7056:	af 93       	push	r26
    7058:	bf 93       	push	r27
    705a:	ef 93       	push	r30
    705c:	ff 93       	push	r31
    705e:	e0 91 69 02 	lds	r30, 0x0269	; 0x800269 <intFunc+0x2>
    7062:	f0 91 6a 02 	lds	r31, 0x026A	; 0x80026a <intFunc+0x3>
    7066:	19 95       	eicall
    7068:	ff 91       	pop	r31
    706a:	ef 91       	pop	r30
    706c:	bf 91       	pop	r27
    706e:	af 91       	pop	r26
    7070:	9f 91       	pop	r25
    7072:	8f 91       	pop	r24
    7074:	7f 91       	pop	r23
    7076:	6f 91       	pop	r22
    7078:	5f 91       	pop	r21
    707a:	4f 91       	pop	r20
    707c:	3f 91       	pop	r19
    707e:	2f 91       	pop	r18
    7080:	0f 90       	pop	r0
    7082:	0b be       	out	0x3b, r0	; 59
    7084:	0f 90       	pop	r0
    7086:	0f be       	out	0x3f, r0	; 63
    7088:	0f 90       	pop	r0
    708a:	1f 90       	pop	r1
    708c:	18 95       	reti

0000708e <__vector_7>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
    708e:	1f 92       	push	r1
    7090:	0f 92       	push	r0
    7092:	0f b6       	in	r0, 0x3f	; 63
    7094:	0f 92       	push	r0
    7096:	11 24       	eor	r1, r1
    7098:	0b b6       	in	r0, 0x3b	; 59
    709a:	0f 92       	push	r0
    709c:	2f 93       	push	r18
    709e:	3f 93       	push	r19
    70a0:	4f 93       	push	r20
    70a2:	5f 93       	push	r21
    70a4:	6f 93       	push	r22
    70a6:	7f 93       	push	r23
    70a8:	8f 93       	push	r24
    70aa:	9f 93       	push	r25
    70ac:	af 93       	push	r26
    70ae:	bf 93       	push	r27
    70b0:	ef 93       	push	r30
    70b2:	ff 93       	push	r31
    70b4:	e0 91 73 02 	lds	r30, 0x0273	; 0x800273 <intFunc+0xc>
    70b8:	f0 91 74 02 	lds	r31, 0x0274	; 0x800274 <intFunc+0xd>
    70bc:	19 95       	eicall
    70be:	ff 91       	pop	r31
    70c0:	ef 91       	pop	r30
    70c2:	bf 91       	pop	r27
    70c4:	af 91       	pop	r26
    70c6:	9f 91       	pop	r25
    70c8:	8f 91       	pop	r24
    70ca:	7f 91       	pop	r23
    70cc:	6f 91       	pop	r22
    70ce:	5f 91       	pop	r21
    70d0:	4f 91       	pop	r20
    70d2:	3f 91       	pop	r19
    70d4:	2f 91       	pop	r18
    70d6:	0f 90       	pop	r0
    70d8:	0b be       	out	0x3b, r0	; 59
    70da:	0f 90       	pop	r0
    70dc:	0f be       	out	0x3f, r0	; 63
    70de:	0f 90       	pop	r0
    70e0:	1f 90       	pop	r1
    70e2:	18 95       	reti

000070e4 <__vector_8>:
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)
    70e4:	1f 92       	push	r1
    70e6:	0f 92       	push	r0
    70e8:	0f b6       	in	r0, 0x3f	; 63
    70ea:	0f 92       	push	r0
    70ec:	11 24       	eor	r1, r1
    70ee:	0b b6       	in	r0, 0x3b	; 59
    70f0:	0f 92       	push	r0
    70f2:	2f 93       	push	r18
    70f4:	3f 93       	push	r19
    70f6:	4f 93       	push	r20
    70f8:	5f 93       	push	r21
    70fa:	6f 93       	push	r22
    70fc:	7f 93       	push	r23
    70fe:	8f 93       	push	r24
    7100:	9f 93       	push	r25
    7102:	af 93       	push	r26
    7104:	bf 93       	push	r27
    7106:	ef 93       	push	r30
    7108:	ff 93       	push	r31
    710a:	e0 91 75 02 	lds	r30, 0x0275	; 0x800275 <intFunc+0xe>
    710e:	f0 91 76 02 	lds	r31, 0x0276	; 0x800276 <intFunc+0xf>
    7112:	19 95       	eicall
    7114:	ff 91       	pop	r31
    7116:	ef 91       	pop	r30
    7118:	bf 91       	pop	r27
    711a:	af 91       	pop	r26
    711c:	9f 91       	pop	r25
    711e:	8f 91       	pop	r24
    7120:	7f 91       	pop	r23
    7122:	6f 91       	pop	r22
    7124:	5f 91       	pop	r21
    7126:	4f 91       	pop	r20
    7128:	3f 91       	pop	r19
    712a:	2f 91       	pop	r18
    712c:	0f 90       	pop	r0
    712e:	0b be       	out	0x3b, r0	; 59
    7130:	0f 90       	pop	r0
    7132:	0f be       	out	0x3f, r0	; 63
    7134:	0f 90       	pop	r0
    7136:	1f 90       	pop	r1
    7138:	18 95       	reti

0000713a <__vector_23>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    713a:	1f 92       	push	r1
    713c:	0f 92       	push	r0
    713e:	0f b6       	in	r0, 0x3f	; 63
    7140:	0f 92       	push	r0
    7142:	11 24       	eor	r1, r1
    7144:	2f 93       	push	r18
    7146:	3f 93       	push	r19
    7148:	8f 93       	push	r24
    714a:	9f 93       	push	r25
    714c:	af 93       	push	r26
    714e:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    7150:	80 91 31 07 	lds	r24, 0x0731	; 0x800731 <timer0_millis>
    7154:	90 91 32 07 	lds	r25, 0x0732	; 0x800732 <timer0_millis+0x1>
    7158:	a0 91 33 07 	lds	r26, 0x0733	; 0x800733 <timer0_millis+0x2>
    715c:	b0 91 34 07 	lds	r27, 0x0734	; 0x800734 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    7160:	30 91 30 07 	lds	r19, 0x0730	; 0x800730 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    7164:	23 e0       	ldi	r18, 0x03	; 3
    7166:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    7168:	2d 37       	cpi	r18, 0x7D	; 125
    716a:	20 f4       	brcc	.+8      	; 0x7174 <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    716c:	01 96       	adiw	r24, 0x01	; 1
    716e:	a1 1d       	adc	r26, r1
    7170:	b1 1d       	adc	r27, r1
    7172:	05 c0       	rjmp	.+10     	; 0x717e <__vector_23+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    7174:	26 e8       	ldi	r18, 0x86	; 134
    7176:	23 0f       	add	r18, r19
		m += 1;
    7178:	02 96       	adiw	r24, 0x02	; 2
    717a:	a1 1d       	adc	r26, r1
    717c:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    717e:	20 93 30 07 	sts	0x0730, r18	; 0x800730 <timer0_fract>
	timer0_millis = m;
    7182:	80 93 31 07 	sts	0x0731, r24	; 0x800731 <timer0_millis>
    7186:	90 93 32 07 	sts	0x0732, r25	; 0x800732 <timer0_millis+0x1>
    718a:	a0 93 33 07 	sts	0x0733, r26	; 0x800733 <timer0_millis+0x2>
    718e:	b0 93 34 07 	sts	0x0734, r27	; 0x800734 <timer0_millis+0x3>
	timer0_overflow_count++;
    7192:	80 91 35 07 	lds	r24, 0x0735	; 0x800735 <timer0_overflow_count>
    7196:	90 91 36 07 	lds	r25, 0x0736	; 0x800736 <timer0_overflow_count+0x1>
    719a:	a0 91 37 07 	lds	r26, 0x0737	; 0x800737 <timer0_overflow_count+0x2>
    719e:	b0 91 38 07 	lds	r27, 0x0738	; 0x800738 <timer0_overflow_count+0x3>
    71a2:	01 96       	adiw	r24, 0x01	; 1
    71a4:	a1 1d       	adc	r26, r1
    71a6:	b1 1d       	adc	r27, r1
    71a8:	80 93 35 07 	sts	0x0735, r24	; 0x800735 <timer0_overflow_count>
    71ac:	90 93 36 07 	sts	0x0736, r25	; 0x800736 <timer0_overflow_count+0x1>
    71b0:	a0 93 37 07 	sts	0x0737, r26	; 0x800737 <timer0_overflow_count+0x2>
    71b4:	b0 93 38 07 	sts	0x0738, r27	; 0x800738 <timer0_overflow_count+0x3>
}
    71b8:	bf 91       	pop	r27
    71ba:	af 91       	pop	r26
    71bc:	9f 91       	pop	r25
    71be:	8f 91       	pop	r24
    71c0:	3f 91       	pop	r19
    71c2:	2f 91       	pop	r18
    71c4:	0f 90       	pop	r0
    71c6:	0f be       	out	0x3f, r0	; 63
    71c8:	0f 90       	pop	r0
    71ca:	1f 90       	pop	r1
    71cc:	18 95       	reti

000071ce <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    71ce:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    71d0:	f8 94       	cli
	m = timer0_millis;
    71d2:	60 91 31 07 	lds	r22, 0x0731	; 0x800731 <timer0_millis>
    71d6:	70 91 32 07 	lds	r23, 0x0732	; 0x800732 <timer0_millis+0x1>
    71da:	80 91 33 07 	lds	r24, 0x0733	; 0x800733 <timer0_millis+0x2>
    71de:	90 91 34 07 	lds	r25, 0x0734	; 0x800734 <timer0_millis+0x3>
	SREG = oldSREG;
    71e2:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    71e4:	08 95       	ret

000071e6 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    71e6:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    71e8:	f8 94       	cli
	m = timer0_overflow_count;
    71ea:	80 91 35 07 	lds	r24, 0x0735	; 0x800735 <timer0_overflow_count>
    71ee:	90 91 36 07 	lds	r25, 0x0736	; 0x800736 <timer0_overflow_count+0x1>
    71f2:	a0 91 37 07 	lds	r26, 0x0737	; 0x800737 <timer0_overflow_count+0x2>
    71f6:	b0 91 38 07 	lds	r27, 0x0738	; 0x800738 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    71fa:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    71fc:	a8 9b       	sbis	0x15, 0	; 21
    71fe:	05 c0       	rjmp	.+10     	; 0x720a <micros+0x24>
    7200:	2f 3f       	cpi	r18, 0xFF	; 255
    7202:	19 f0       	breq	.+6      	; 0x720a <micros+0x24>
		m++;
    7204:	01 96       	adiw	r24, 0x01	; 1
    7206:	a1 1d       	adc	r26, r1
    7208:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    720a:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    720c:	ba 2f       	mov	r27, r26
    720e:	a9 2f       	mov	r26, r25
    7210:	98 2f       	mov	r25, r24
    7212:	88 27       	eor	r24, r24
    7214:	82 0f       	add	r24, r18
    7216:	91 1d       	adc	r25, r1
    7218:	a1 1d       	adc	r26, r1
    721a:	b1 1d       	adc	r27, r1
    721c:	bc 01       	movw	r22, r24
    721e:	cd 01       	movw	r24, r26
    7220:	42 e0       	ldi	r20, 0x02	; 2
    7222:	66 0f       	add	r22, r22
    7224:	77 1f       	adc	r23, r23
    7226:	88 1f       	adc	r24, r24
    7228:	99 1f       	adc	r25, r25
    722a:	4a 95       	dec	r20
    722c:	d1 f7       	brne	.-12     	; 0x7222 <micros+0x3c>
}
    722e:	08 95       	ret

00007230 <delay>:

void delay(unsigned long ms)
{
    7230:	8f 92       	push	r8
    7232:	9f 92       	push	r9
    7234:	af 92       	push	r10
    7236:	bf 92       	push	r11
    7238:	cf 92       	push	r12
    723a:	df 92       	push	r13
    723c:	ef 92       	push	r14
    723e:	ff 92       	push	r15
    7240:	6b 01       	movw	r12, r22
    7242:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    7244:	d0 df       	rcall	.-96     	; 0x71e6 <micros>
    7246:	4b 01       	movw	r8, r22
    7248:	5c 01       	movw	r10, r24

	while (ms > 0) {
    724a:	c1 14       	cp	r12, r1
    724c:	d1 04       	cpc	r13, r1
    724e:	e1 04       	cpc	r14, r1
    7250:	f1 04       	cpc	r15, r1
		yield();
    7252:	f1 f0       	breq	.+60     	; 0x7290 <delay+0x60>
		while ( ms > 0 && (micros() - start) >= 1000) {
    7254:	5e dd       	rcall	.-1348   	; 0x6d12 <yield>
    7256:	c7 df       	rcall	.-114    	; 0x71e6 <micros>
    7258:	dc 01       	movw	r26, r24
    725a:	cb 01       	movw	r24, r22
    725c:	88 19       	sub	r24, r8
    725e:	99 09       	sbc	r25, r9
    7260:	aa 09       	sbc	r26, r10
    7262:	bb 09       	sbc	r27, r11
    7264:	88 3e       	cpi	r24, 0xE8	; 232
    7266:	93 40       	sbci	r25, 0x03	; 3
    7268:	a1 05       	cpc	r26, r1
    726a:	b1 05       	cpc	r27, r1
    726c:	70 f3       	brcs	.-36     	; 0x724a <delay+0x1a>
			ms--;
    726e:	21 e0       	ldi	r18, 0x01	; 1
    7270:	c2 1a       	sub	r12, r18
    7272:	d1 08       	sbc	r13, r1
    7274:	e1 08       	sbc	r14, r1
    7276:	f1 08       	sbc	r15, r1
			start += 1000;
    7278:	88 ee       	ldi	r24, 0xE8	; 232
    727a:	88 0e       	add	r8, r24
    727c:	83 e0       	ldi	r24, 0x03	; 3
    727e:	98 1e       	adc	r9, r24
    7280:	a1 1c       	adc	r10, r1
    7282:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    7284:	c1 14       	cp	r12, r1
    7286:	d1 04       	cpc	r13, r1
    7288:	e1 04       	cpc	r14, r1
    728a:	f1 04       	cpc	r15, r1
    728c:	21 f7       	brne	.-56     	; 0x7256 <delay+0x26>
    728e:	dd cf       	rjmp	.-70     	; 0x724a <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    7290:	ff 90       	pop	r15
    7292:	ef 90       	pop	r14
    7294:	df 90       	pop	r13
    7296:	cf 90       	pop	r12
    7298:	bf 90       	pop	r11
    729a:	af 90       	pop	r10
    729c:	9f 90       	pop	r9
    729e:	8f 90       	pop	r8
    72a0:	08 95       	ret

000072a2 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    72a2:	82 30       	cpi	r24, 0x02	; 2
    72a4:	91 05       	cpc	r25, r1
    72a6:	38 f0       	brcs	.+14     	; 0x72b6 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    72a8:	88 0f       	add	r24, r24
    72aa:	99 1f       	adc	r25, r25
    72ac:	88 0f       	add	r24, r24
    72ae:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    72b0:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    72b2:	01 97       	sbiw	r24, 0x01	; 1
    72b4:	f1 f7       	brne	.-4      	; 0x72b2 <delayMicroseconds+0x10>
    72b6:	08 95       	ret

000072b8 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    72b8:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    72ba:	84 b5       	in	r24, 0x24	; 36
    72bc:	82 60       	ori	r24, 0x02	; 2
    72be:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    72c0:	84 b5       	in	r24, 0x24	; 36
    72c2:	81 60       	ori	r24, 0x01	; 1
    72c4:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    72c6:	85 b5       	in	r24, 0x25	; 37
    72c8:	82 60       	ori	r24, 0x02	; 2
    72ca:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    72cc:	85 b5       	in	r24, 0x25	; 37
    72ce:	81 60       	ori	r24, 0x01	; 1
    72d0:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    72d2:	ee e6       	ldi	r30, 0x6E	; 110
    72d4:	f0 e0       	ldi	r31, 0x00	; 0
    72d6:	80 81       	ld	r24, Z
    72d8:	81 60       	ori	r24, 0x01	; 1
    72da:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    72dc:	e1 e8       	ldi	r30, 0x81	; 129
    72de:	f0 e0       	ldi	r31, 0x00	; 0
    72e0:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    72e2:	80 81       	ld	r24, Z
    72e4:	82 60       	ori	r24, 0x02	; 2
    72e6:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    72e8:	80 81       	ld	r24, Z
    72ea:	81 60       	ori	r24, 0x01	; 1
    72ec:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    72ee:	e0 e8       	ldi	r30, 0x80	; 128
    72f0:	f0 e0       	ldi	r31, 0x00	; 0
    72f2:	80 81       	ld	r24, Z
    72f4:	81 60       	ori	r24, 0x01	; 1
    72f6:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    72f8:	e1 eb       	ldi	r30, 0xB1	; 177
    72fa:	f0 e0       	ldi	r31, 0x00	; 0
    72fc:	80 81       	ld	r24, Z
    72fe:	84 60       	ori	r24, 0x04	; 4
    7300:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    7302:	e0 eb       	ldi	r30, 0xB0	; 176
    7304:	f0 e0       	ldi	r31, 0x00	; 0
    7306:	80 81       	ld	r24, Z
    7308:	81 60       	ori	r24, 0x01	; 1
    730a:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    730c:	e1 e9       	ldi	r30, 0x91	; 145
    730e:	f0 e0       	ldi	r31, 0x00	; 0
    7310:	80 81       	ld	r24, Z
    7312:	82 60       	ori	r24, 0x02	; 2
    7314:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    7316:	80 81       	ld	r24, Z
    7318:	81 60       	ori	r24, 0x01	; 1
    731a:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    731c:	e0 e9       	ldi	r30, 0x90	; 144
    731e:	f0 e0       	ldi	r31, 0x00	; 0
    7320:	80 81       	ld	r24, Z
    7322:	81 60       	ori	r24, 0x01	; 1
    7324:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    7326:	e1 ea       	ldi	r30, 0xA1	; 161
    7328:	f0 e0       	ldi	r31, 0x00	; 0
    732a:	80 81       	ld	r24, Z
    732c:	82 60       	ori	r24, 0x02	; 2
    732e:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    7330:	80 81       	ld	r24, Z
    7332:	81 60       	ori	r24, 0x01	; 1
    7334:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    7336:	e0 ea       	ldi	r30, 0xA0	; 160
    7338:	f0 e0       	ldi	r31, 0x00	; 0
    733a:	80 81       	ld	r24, Z
    733c:	81 60       	ori	r24, 0x01	; 1
    733e:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    7340:	e1 e2       	ldi	r30, 0x21	; 33
    7342:	f1 e0       	ldi	r31, 0x01	; 1
    7344:	80 81       	ld	r24, Z
    7346:	82 60       	ori	r24, 0x02	; 2
    7348:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    734a:	80 81       	ld	r24, Z
    734c:	81 60       	ori	r24, 0x01	; 1
    734e:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    7350:	e0 e2       	ldi	r30, 0x20	; 32
    7352:	f1 e0       	ldi	r31, 0x01	; 1
    7354:	80 81       	ld	r24, Z
    7356:	81 60       	ori	r24, 0x01	; 1
    7358:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    735a:	ea e7       	ldi	r30, 0x7A	; 122
    735c:	f0 e0       	ldi	r31, 0x00	; 0
    735e:	80 81       	ld	r24, Z
    7360:	84 60       	ori	r24, 0x04	; 4
    7362:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    7364:	80 81       	ld	r24, Z
    7366:	82 60       	ori	r24, 0x02	; 2
    7368:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    736a:	80 81       	ld	r24, Z
    736c:	81 60       	ori	r24, 0x01	; 1
    736e:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    7370:	80 81       	ld	r24, Z
    7372:	80 68       	ori	r24, 0x80	; 128
    7374:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    7376:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
    737a:	08 95       	ret

0000737c <analogRead>:
#if defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#endif
	pin = analogPinToChannel(pin);
#elif defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
	if (pin >= 54) pin -= 54; // allow for channel or pin numbers
    737c:	86 33       	cpi	r24, 0x36	; 54
    737e:	08 f0       	brcs	.+2      	; 0x7382 <analogRead+0x6>
    7380:	86 53       	subi	r24, 0x36	; 54
#endif

#if defined(ADCSRB) && defined(MUX5)
	// the MUX5 bit of ADCSRB selects whether we're reading from channels
	// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).
	ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((pin >> 3) & 0x01) << MUX5);
    7382:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x7c007b>
    7386:	28 2f       	mov	r18, r24
    7388:	28 70       	andi	r18, 0x08	; 8
    738a:	97 7f       	andi	r25, 0xF7	; 247
    738c:	92 2b       	or	r25, r18
    738e:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__TEXT_REGION_LENGTH__+0x7c007b>
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    7392:	20 91 77 02 	lds	r18, 0x0277	; 0x800277 <analog_reference>
    7396:	90 e4       	ldi	r25, 0x40	; 64
    7398:	29 9f       	mul	r18, r25
    739a:	90 01       	movw	r18, r0
    739c:	11 24       	eor	r1, r1
    739e:	87 70       	andi	r24, 0x07	; 7
    73a0:	82 2b       	or	r24, r18
    73a2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7c007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    73a6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
    73aa:	80 64       	ori	r24, 0x40	; 64
    73ac:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    73b0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
    73b4:	86 fd       	sbrc	r24, 6
    73b6:	fc cf       	rjmp	.-8      	; 0x73b0 <analogRead+0x34>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    73b8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
	high = ADCH;
    73bc:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    73c0:	90 e0       	ldi	r25, 0x00	; 0
}
    73c2:	92 2b       	or	r25, r18
    73c4:	08 95       	ret

000073c6 <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
    73c6:	1f 93       	push	r17
    73c8:	cf 93       	push	r28
    73ca:	df 93       	push	r29
    73cc:	18 2f       	mov	r17, r24
    73ce:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
    73d0:	61 e0       	ldi	r22, 0x01	; 1
    73d2:	14 d1       	rcall	.+552    	; 0x75fc <pinMode>
	if (val == 0)
    73d4:	20 97       	sbiw	r28, 0x00	; 0
    73d6:	11 f4       	brne	.+4      	; 0x73dc <analogWrite+0x16>
	{
		digitalWrite(pin, LOW);
    73d8:	60 e0       	ldi	r22, 0x00	; 0
    73da:	04 c0       	rjmp	.+8      	; 0x73e4 <analogWrite+0x1e>
	}
	else if (val == 255)
    73dc:	cf 3f       	cpi	r28, 0xFF	; 255
    73de:	d1 05       	cpc	r29, r1
    73e0:	31 f4       	brne	.+12     	; 0x73ee <analogWrite+0x28>
	{
		digitalWrite(pin, HIGH);
    73e2:	61 e0       	ldi	r22, 0x01	; 1
    73e4:	81 2f       	mov	r24, r17
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    73e6:	df 91       	pop	r29
    73e8:	cf 91       	pop	r28
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
	{
		digitalWrite(pin, HIGH);
    73ea:	1f 91       	pop	r17
    73ec:	43 c1       	rjmp	.+646    	; 0x7674 <digitalWrite>
	}
	else
	{
		switch(digitalPinToTimer(pin))
    73ee:	e1 2f       	mov	r30, r17
    73f0:	f0 e0       	ldi	r31, 0x00	; 0
    73f2:	e5 50       	subi	r30, 0x05	; 5
    73f4:	f4 4f       	sbci	r31, 0xF4	; 244
    73f6:	e4 91       	lpm	r30, Z
    73f8:	8e 2f       	mov	r24, r30
    73fa:	90 e0       	ldi	r25, 0x00	; 0
    73fc:	fc 01       	movw	r30, r24
    73fe:	31 97       	sbiw	r30, 0x01	; 1
    7400:	e2 31       	cpi	r30, 0x12	; 18
    7402:	f1 05       	cpc	r31, r1
    7404:	08 f0       	brcs	.+2      	; 0x7408 <analogWrite+0x42>
    7406:	9c c0       	rjmp	.+312    	; 0x7540 <analogWrite+0x17a>
    7408:	88 27       	eor	r24, r24
    740a:	e7 58       	subi	r30, 0x87	; 135
    740c:	ff 4f       	sbci	r31, 0xFF	; 255
    740e:	8f 4f       	sbci	r24, 0xFF	; 255
    7410:	9b c4       	rjmp	.+2358   	; 0x7d48 <__tablejump2__>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
    7412:	84 b5       	in	r24, 0x24	; 36
    7414:	80 68       	ori	r24, 0x80	; 128
    7416:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
    7418:	c7 bd       	out	0x27, r28	; 39
				break;
    741a:	97 c0       	rjmp	.+302    	; 0x754a <analogWrite+0x184>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
    741c:	84 b5       	in	r24, 0x24	; 36
    741e:	80 62       	ori	r24, 0x20	; 32
    7420:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
    7422:	c8 bd       	out	0x28, r28	; 40
				break;
    7424:	92 c0       	rjmp	.+292    	; 0x754a <analogWrite+0x184>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
    7426:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    742a:	80 68       	ori	r24, 0x80	; 128
    742c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
				OCR1A = val; // set pwm duty
    7430:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
    7434:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
				break;
    7438:	88 c0       	rjmp	.+272    	; 0x754a <analogWrite+0x184>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
    743a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    743e:	80 62       	ori	r24, 0x20	; 32
    7440:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
				OCR1B = val; // set pwm duty
    7444:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
    7448:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
				break;
    744c:	7e c0       	rjmp	.+252    	; 0x754a <analogWrite+0x184>
			#endif

			#if defined(TCCR1A) && defined(COM1C1)
			case TIMER1C:
				// connect pwm to pin on timer 1, channel C
				sbi(TCCR1A, COM1C1);
    744e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    7452:	88 60       	ori	r24, 0x08	; 8
    7454:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
				OCR1C = val; // set pwm duty
    7458:	d0 93 8d 00 	sts	0x008D, r29	; 0x80008d <__TEXT_REGION_LENGTH__+0x7c008d>
    745c:	c0 93 8c 00 	sts	0x008C, r28	; 0x80008c <__TEXT_REGION_LENGTH__+0x7c008c>
				break;
    7460:	74 c0       	rjmp	.+232    	; 0x754a <analogWrite+0x184>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
    7462:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    7466:	80 68       	ori	r24, 0x80	; 128
    7468:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
				OCR2A = val; // set pwm duty
    746c:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7c00b3>
				break;
    7470:	6c c0       	rjmp	.+216    	; 0x754a <analogWrite+0x184>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
    7472:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    7476:	80 62       	ori	r24, 0x20	; 32
    7478:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
				OCR2B = val; // set pwm duty
    747c:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7c00b4>
				break;
    7480:	64 c0       	rjmp	.+200    	; 0x754a <analogWrite+0x184>
			#endif

			#if defined(TCCR3A) && defined(COM3A1)
			case TIMER3A:
				// connect pwm to pin on timer 3, channel A
				sbi(TCCR3A, COM3A1);
    7482:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    7486:	80 68       	ori	r24, 0x80	; 128
    7488:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
				OCR3A = val; // set pwm duty
    748c:	d0 93 99 00 	sts	0x0099, r29	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
    7490:	c0 93 98 00 	sts	0x0098, r28	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
				break;
    7494:	5a c0       	rjmp	.+180    	; 0x754a <analogWrite+0x184>
			#endif

			#if defined(TCCR3A) && defined(COM3B1)
			case TIMER3B:
				// connect pwm to pin on timer 3, channel B
				sbi(TCCR3A, COM3B1);
    7496:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    749a:	80 62       	ori	r24, 0x20	; 32
    749c:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
				OCR3B = val; // set pwm duty
    74a0:	d0 93 9b 00 	sts	0x009B, r29	; 0x80009b <__TEXT_REGION_LENGTH__+0x7c009b>
    74a4:	c0 93 9a 00 	sts	0x009A, r28	; 0x80009a <__TEXT_REGION_LENGTH__+0x7c009a>
				break;
    74a8:	50 c0       	rjmp	.+160    	; 0x754a <analogWrite+0x184>
			#endif

			#if defined(TCCR3A) && defined(COM3C1)
			case TIMER3C:
				// connect pwm to pin on timer 3, channel C
				sbi(TCCR3A, COM3C1);
    74aa:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    74ae:	88 60       	ori	r24, 0x08	; 8
    74b0:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
				OCR3C = val; // set pwm duty
    74b4:	d0 93 9d 00 	sts	0x009D, r29	; 0x80009d <__TEXT_REGION_LENGTH__+0x7c009d>
    74b8:	c0 93 9c 00 	sts	0x009C, r28	; 0x80009c <__TEXT_REGION_LENGTH__+0x7c009c>
				break;
    74bc:	46 c0       	rjmp	.+140    	; 0x754a <analogWrite+0x184>
			#endif

			#if defined(TCCR4A)
			case TIMER4A:
				//connect pwm to pin on timer 4, channel A
				sbi(TCCR4A, COM4A1);
    74be:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    74c2:	80 68       	ori	r24, 0x80	; 128
    74c4:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
				#if defined(COM4A0)		// only used on 32U4
				cbi(TCCR4A, COM4A0);
    74c8:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    74cc:	8f 7b       	andi	r24, 0xBF	; 191
    74ce:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
				#endif
				OCR4A = val;	// set pwm duty
    74d2:	d0 93 a9 00 	sts	0x00A9, r29	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
    74d6:	c0 93 a8 00 	sts	0x00A8, r28	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
				break;
    74da:	37 c0       	rjmp	.+110    	; 0x754a <analogWrite+0x184>
			#endif
			
			#if defined(TCCR4A) && defined(COM4B1)
			case TIMER4B:
				// connect pwm to pin on timer 4, channel B
				sbi(TCCR4A, COM4B1);
    74dc:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    74e0:	80 62       	ori	r24, 0x20	; 32
    74e2:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
				OCR4B = val; // set pwm duty
    74e6:	d0 93 ab 00 	sts	0x00AB, r29	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7c00ab>
    74ea:	c0 93 aa 00 	sts	0x00AA, r28	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7c00aa>
				break;
    74ee:	2d c0       	rjmp	.+90     	; 0x754a <analogWrite+0x184>
			#endif

			#if defined(TCCR4A) && defined(COM4C1)
			case TIMER4C:
				// connect pwm to pin on timer 4, channel C
				sbi(TCCR4A, COM4C1);
    74f0:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    74f4:	88 60       	ori	r24, 0x08	; 8
    74f6:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
				OCR4C = val; // set pwm duty
    74fa:	d0 93 ad 00 	sts	0x00AD, r29	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7c00ad>
    74fe:	c0 93 ac 00 	sts	0x00AC, r28	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7c00ac>
				break;
    7502:	23 c0       	rjmp	.+70     	; 0x754a <analogWrite+0x184>

							
			#if defined(TCCR5A) && defined(COM5A1)
			case TIMER5A:
				// connect pwm to pin on timer 5, channel A
				sbi(TCCR5A, COM5A1);
    7504:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    7508:	80 68       	ori	r24, 0x80	; 128
    750a:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
				OCR5A = val; // set pwm duty
    750e:	d0 93 29 01 	sts	0x0129, r29	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
    7512:	c0 93 28 01 	sts	0x0128, r28	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
				break;
    7516:	19 c0       	rjmp	.+50     	; 0x754a <analogWrite+0x184>
			#endif

			#if defined(TCCR5A) && defined(COM5B1)
			case TIMER5B:
				// connect pwm to pin on timer 5, channel B
				sbi(TCCR5A, COM5B1);
    7518:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    751c:	80 62       	ori	r24, 0x20	; 32
    751e:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
				OCR5B = val; // set pwm duty
    7522:	d0 93 2b 01 	sts	0x012B, r29	; 0x80012b <__TEXT_REGION_LENGTH__+0x7c012b>
    7526:	c0 93 2a 01 	sts	0x012A, r28	; 0x80012a <__TEXT_REGION_LENGTH__+0x7c012a>
				break;
    752a:	0f c0       	rjmp	.+30     	; 0x754a <analogWrite+0x184>
			#endif

			#if defined(TCCR5A) && defined(COM5C1)
			case TIMER5C:
				// connect pwm to pin on timer 5, channel C
				sbi(TCCR5A, COM5C1);
    752c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    7530:	88 60       	ori	r24, 0x08	; 8
    7532:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
				OCR5C = val; // set pwm duty
    7536:	d0 93 2d 01 	sts	0x012D, r29	; 0x80012d <__TEXT_REGION_LENGTH__+0x7c012d>
    753a:	c0 93 2c 01 	sts	0x012C, r28	; 0x80012c <__TEXT_REGION_LENGTH__+0x7c012c>
				break;
    753e:	05 c0       	rjmp	.+10     	; 0x754a <analogWrite+0x184>
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
    7540:	c0 38       	cpi	r28, 0x80	; 128
    7542:	d1 05       	cpc	r29, r1
    7544:	0c f0       	brlt	.+2      	; 0x7548 <analogWrite+0x182>
    7546:	4d cf       	rjmp	.-358    	; 0x73e2 <analogWrite+0x1c>
    7548:	47 cf       	rjmp	.-370    	; 0x73d8 <analogWrite+0x12>
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    754a:	df 91       	pop	r29
    754c:	cf 91       	pop	r28
    754e:	1f 91       	pop	r17
    7550:	08 95       	ret

00007552 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    7552:	90 e0       	ldi	r25, 0x00	; 0
    7554:	fc 01       	movw	r30, r24
    7556:	31 97       	sbiw	r30, 0x01	; 1
    7558:	e2 31       	cpi	r30, 0x12	; 18
    755a:	f1 05       	cpc	r31, r1
    755c:	08 f0       	brcs	.+2      	; 0x7560 <turnOffPWM+0xe>
    755e:	4d c0       	rjmp	.+154    	; 0x75fa <turnOffPWM+0xa8>
    7560:	88 27       	eor	r24, r24
    7562:	e5 57       	subi	r30, 0x75	; 117
    7564:	ff 4f       	sbci	r31, 0xFF	; 255
    7566:	8f 4f       	sbci	r24, 0xFF	; 255
    7568:	ef c3       	rjmp	.+2014   	; 0x7d48 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    756a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    756e:	8f 77       	andi	r24, 0x7F	; 127
    7570:	03 c0       	rjmp	.+6      	; 0x7578 <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    7572:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    7576:	8f 7d       	andi	r24, 0xDF	; 223
    7578:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    757c:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    757e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    7582:	87 7f       	andi	r24, 0xF7	; 247
    7584:	f9 cf       	rjmp	.-14     	; 0x7578 <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    7586:	84 b5       	in	r24, 0x24	; 36
    7588:	8f 77       	andi	r24, 0x7F	; 127
    758a:	02 c0       	rjmp	.+4      	; 0x7590 <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    758c:	84 b5       	in	r24, 0x24	; 36
    758e:	8f 7d       	andi	r24, 0xDF	; 223
    7590:	84 bd       	out	0x24, r24	; 36
    7592:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    7594:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    7598:	8f 77       	andi	r24, 0x7F	; 127
    759a:	03 c0       	rjmp	.+6      	; 0x75a2 <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    759c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    75a0:	8f 7d       	andi	r24, 0xDF	; 223
    75a2:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    75a6:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    75a8:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    75ac:	8f 77       	andi	r24, 0x7F	; 127
    75ae:	07 c0       	rjmp	.+14     	; 0x75be <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    75b0:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    75b4:	8f 7d       	andi	r24, 0xDF	; 223
    75b6:	03 c0       	rjmp	.+6      	; 0x75be <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    75b8:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    75bc:	87 7f       	andi	r24, 0xF7	; 247
    75be:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    75c2:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    75c4:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    75c8:	8f 77       	andi	r24, 0x7F	; 127
    75ca:	07 c0       	rjmp	.+14     	; 0x75da <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    75cc:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    75d0:	8f 7d       	andi	r24, 0xDF	; 223
    75d2:	03 c0       	rjmp	.+6      	; 0x75da <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    75d4:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    75d8:	87 7f       	andi	r24, 0xF7	; 247
    75da:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    75de:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    75e0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    75e4:	8f 77       	andi	r24, 0x7F	; 127
    75e6:	07 c0       	rjmp	.+14     	; 0x75f6 <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    75e8:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    75ec:	8f 7d       	andi	r24, 0xDF	; 223
    75ee:	03 c0       	rjmp	.+6      	; 0x75f6 <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    75f0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    75f4:	87 7f       	andi	r24, 0xF7	; 247
    75f6:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    75fa:	08 95       	ret

000075fc <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    75fc:	cf 93       	push	r28
    75fe:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    7600:	90 e0       	ldi	r25, 0x00	; 0
    7602:	fc 01       	movw	r30, r24
    7604:	ef 5b       	subi	r30, 0xBF	; 191
    7606:	f3 4f       	sbci	r31, 0xF3	; 243
    7608:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    760a:	fc 01       	movw	r30, r24
    760c:	e9 57       	subi	r30, 0x79	; 121
    760e:	f3 4f       	sbci	r31, 0xF3	; 243
    7610:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    7612:	88 23       	and	r24, r24
    7614:	61 f1       	breq	.+88     	; 0x766e <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    7616:	90 e0       	ldi	r25, 0x00	; 0
    7618:	88 0f       	add	r24, r24
    761a:	99 1f       	adc	r25, r25
    761c:	fc 01       	movw	r30, r24
    761e:	ef 5f       	subi	r30, 0xFF	; 255
    7620:	f2 4f       	sbci	r31, 0xF2	; 242
    7622:	c5 91       	lpm	r28, Z+
    7624:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    7626:	fc 01       	movw	r30, r24
    7628:	e9 51       	subi	r30, 0x19	; 25
    762a:	f3 4f       	sbci	r31, 0xF3	; 243
    762c:	a5 91       	lpm	r26, Z+
    762e:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    7630:	61 11       	cpse	r22, r1
    7632:	09 c0       	rjmp	.+18     	; 0x7646 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    7634:	9f b7       	in	r25, 0x3f	; 63
                cli();
    7636:	f8 94       	cli
		*reg &= ~bit;
    7638:	88 81       	ld	r24, Y
    763a:	20 95       	com	r18
    763c:	82 23       	and	r24, r18
    763e:	88 83       	st	Y, r24
		*out &= ~bit;
    7640:	ec 91       	ld	r30, X
    7642:	2e 23       	and	r18, r30
    7644:	0b c0       	rjmp	.+22     	; 0x765c <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    7646:	62 30       	cpi	r22, 0x02	; 2
    7648:	61 f4       	brne	.+24     	; 0x7662 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    764a:	9f b7       	in	r25, 0x3f	; 63
                cli();
    764c:	f8 94       	cli
		*reg &= ~bit;
    764e:	88 81       	ld	r24, Y
    7650:	32 2f       	mov	r19, r18
    7652:	30 95       	com	r19
    7654:	83 23       	and	r24, r19
    7656:	88 83       	st	Y, r24
		*out |= bit;
    7658:	ec 91       	ld	r30, X
    765a:	2e 2b       	or	r18, r30
    765c:	2c 93       	st	X, r18
		SREG = oldSREG;
    765e:	9f bf       	out	0x3f, r25	; 63
    7660:	06 c0       	rjmp	.+12     	; 0x766e <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    7662:	8f b7       	in	r24, 0x3f	; 63
                cli();
    7664:	f8 94       	cli
		*reg |= bit;
    7666:	e8 81       	ld	r30, Y
    7668:	2e 2b       	or	r18, r30
    766a:	28 83       	st	Y, r18
		SREG = oldSREG;
    766c:	8f bf       	out	0x3f, r24	; 63
	}
}
    766e:	df 91       	pop	r29
    7670:	cf 91       	pop	r28
    7672:	08 95       	ret

00007674 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    7674:	1f 93       	push	r17
    7676:	cf 93       	push	r28
    7678:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    767a:	28 2f       	mov	r18, r24
    767c:	30 e0       	ldi	r19, 0x00	; 0
    767e:	f9 01       	movw	r30, r18
    7680:	e5 50       	subi	r30, 0x05	; 5
    7682:	f4 4f       	sbci	r31, 0xF4	; 244
    7684:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    7686:	f9 01       	movw	r30, r18
    7688:	ef 5b       	subi	r30, 0xBF	; 191
    768a:	f3 4f       	sbci	r31, 0xF3	; 243
    768c:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    768e:	f9 01       	movw	r30, r18
    7690:	e9 57       	subi	r30, 0x79	; 121
    7692:	f3 4f       	sbci	r31, 0xF3	; 243
    7694:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    7696:	cc 23       	and	r28, r28
    7698:	b9 f0       	breq	.+46     	; 0x76c8 <digitalWrite+0x54>
    769a:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    769c:	81 11       	cpse	r24, r1
    769e:	59 df       	rcall	.-334    	; 0x7552 <turnOffPWM>

	out = portOutputRegister(port);
    76a0:	ec 2f       	mov	r30, r28
    76a2:	f0 e0       	ldi	r31, 0x00	; 0
    76a4:	ee 0f       	add	r30, r30
    76a6:	ff 1f       	adc	r31, r31
    76a8:	e9 51       	subi	r30, 0x19	; 25
    76aa:	f3 4f       	sbci	r31, 0xF3	; 243
    76ac:	a5 91       	lpm	r26, Z+
    76ae:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    76b0:	9f b7       	in	r25, 0x3f	; 63
	cli();
    76b2:	f8 94       	cli

	if (val == LOW) {
    76b4:	11 11       	cpse	r17, r1
    76b6:	04 c0       	rjmp	.+8      	; 0x76c0 <digitalWrite+0x4c>
		*out &= ~bit;
    76b8:	8c 91       	ld	r24, X
    76ba:	d0 95       	com	r29
    76bc:	d8 23       	and	r29, r24
    76be:	02 c0       	rjmp	.+4      	; 0x76c4 <digitalWrite+0x50>
	} else {
		*out |= bit;
    76c0:	ec 91       	ld	r30, X
    76c2:	de 2b       	or	r29, r30
    76c4:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    76c6:	9f bf       	out	0x3f, r25	; 63
}
    76c8:	df 91       	pop	r29
    76ca:	cf 91       	pop	r28
    76cc:	1f 91       	pop	r17
    76ce:	08 95       	ret

000076d0 <digitalRead>:

int digitalRead(uint8_t pin)
{
    76d0:	cf 93       	push	r28
    76d2:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    76d4:	28 2f       	mov	r18, r24
    76d6:	30 e0       	ldi	r19, 0x00	; 0
    76d8:	f9 01       	movw	r30, r18
    76da:	e5 50       	subi	r30, 0x05	; 5
    76dc:	f4 4f       	sbci	r31, 0xF4	; 244
    76de:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    76e0:	f9 01       	movw	r30, r18
    76e2:	ef 5b       	subi	r30, 0xBF	; 191
    76e4:	f3 4f       	sbci	r31, 0xF3	; 243
    76e6:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    76e8:	f9 01       	movw	r30, r18
    76ea:	e9 57       	subi	r30, 0x79	; 121
    76ec:	f3 4f       	sbci	r31, 0xF3	; 243
    76ee:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    76f0:	cc 23       	and	r28, r28
    76f2:	89 f0       	breq	.+34     	; 0x7716 <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    76f4:	81 11       	cpse	r24, r1
    76f6:	2d df       	rcall	.-422    	; 0x7552 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    76f8:	ec 2f       	mov	r30, r28
    76fa:	f0 e0       	ldi	r31, 0x00	; 0
    76fc:	ee 0f       	add	r30, r30
    76fe:	ff 1f       	adc	r31, r31
    7700:	e3 53       	subi	r30, 0x33	; 51
    7702:	f3 4f       	sbci	r31, 0xF3	; 243
    7704:	a5 91       	lpm	r26, Z+
    7706:	b4 91       	lpm	r27, Z
    7708:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    770a:	ed 23       	and	r30, r29
    770c:	81 e0       	ldi	r24, 0x01	; 1
    770e:	90 e0       	ldi	r25, 0x00	; 0
    7710:	21 f4       	brne	.+8      	; 0x771a <digitalRead+0x4a>
    7712:	80 e0       	ldi	r24, 0x00	; 0
    7714:	02 c0       	rjmp	.+4      	; 0x771a <digitalRead+0x4a>
    7716:	80 e0       	ldi	r24, 0x00	; 0
    7718:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    771a:	df 91       	pop	r29
    771c:	cf 91       	pop	r28
    771e:	08 95       	ret

00007720 <_Z3maplllll>:
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    7720:	4f 92       	push	r4
    7722:	5f 92       	push	r5
    7724:	6f 92       	push	r6
    7726:	7f 92       	push	r7
    7728:	af 92       	push	r10
    772a:	bf 92       	push	r11
    772c:	cf 92       	push	r12
    772e:	df 92       	push	r13
    7730:	ef 92       	push	r14
    7732:	ff 92       	push	r15
    7734:	0f 93       	push	r16
    7736:	1f 93       	push	r17
    7738:	cf 93       	push	r28
    773a:	df 93       	push	r29
    773c:	cd b7       	in	r28, 0x3d	; 61
    773e:	de b7       	in	r29, 0x3e	; 62
    7740:	29 01       	movw	r4, r18
    7742:	3a 01       	movw	r6, r20
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    7744:	9b 01       	movw	r18, r22
    7746:	ac 01       	movw	r20, r24
    7748:	24 19       	sub	r18, r4
    774a:	35 09       	sbc	r19, r5
    774c:	46 09       	sbc	r20, r6
    774e:	57 09       	sbc	r21, r7
    7750:	8a 89       	ldd	r24, Y+18	; 0x12
    7752:	9b 89       	ldd	r25, Y+19	; 0x13
    7754:	ac 89       	ldd	r26, Y+20	; 0x14
    7756:	bd 89       	ldd	r27, Y+21	; 0x15
    7758:	bc 01       	movw	r22, r24
    775a:	cd 01       	movw	r24, r26
    775c:	6a 19       	sub	r22, r10
    775e:	7b 09       	sbc	r23, r11
    7760:	8c 09       	sbc	r24, r12
    7762:	9d 09       	sbc	r25, r13
    7764:	98 d2       	rcall	.+1328   	; 0x7c96 <__mulsi3>
    7766:	a8 01       	movw	r20, r16
    7768:	97 01       	movw	r18, r14
    776a:	24 19       	sub	r18, r4
    776c:	35 09       	sbc	r19, r5
    776e:	46 09       	sbc	r20, r6
    7770:	57 09       	sbc	r21, r7
    7772:	ce d2       	rcall	.+1436   	; 0x7d10 <__divmodsi4>
    7774:	ca 01       	movw	r24, r20
    7776:	b9 01       	movw	r22, r18
    7778:	6a 0d       	add	r22, r10
    777a:	7b 1d       	adc	r23, r11
    777c:	8c 1d       	adc	r24, r12
    777e:	9d 1d       	adc	r25, r13
}
    7780:	df 91       	pop	r29
    7782:	cf 91       	pop	r28
    7784:	1f 91       	pop	r17
    7786:	0f 91       	pop	r16
    7788:	ff 90       	pop	r15
    778a:	ef 90       	pop	r14
    778c:	df 90       	pop	r13
    778e:	cf 90       	pop	r12
    7790:	bf 90       	pop	r11
    7792:	af 90       	pop	r10
    7794:	7f 90       	pop	r7
    7796:	6f 90       	pop	r6
    7798:	5f 90       	pop	r5
    779a:	4f 90       	pop	r4
    779c:	08 95       	ret

0000779e <_ZNK6String14StringIfHelperEv>:
StringSumHelper & operator + (const StringSumHelper &lhs, const __FlashStringHelper *rhs)
{
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs))	a.invalidate();
	return a;
}
    779e:	08 95       	ret

000077a0 <_ZN6StringD1Ev>:
    77a0:	fc 01       	movw	r30, r24
    77a2:	80 81       	ld	r24, Z
    77a4:	91 81       	ldd	r25, Z+1	; 0x01
    77a6:	00 97       	sbiw	r24, 0x00	; 0
    77a8:	09 f0       	breq	.+2      	; 0x77ac <_ZN6StringD1Ev+0xc>
    77aa:	a6 c3       	rjmp	.+1868   	; 0x7ef8 <free>
    77ac:	08 95       	ret

000077ae <_ZN6String10invalidateEv>:
    77ae:	cf 93       	push	r28
    77b0:	df 93       	push	r29
    77b2:	ec 01       	movw	r28, r24
    77b4:	88 81       	ld	r24, Y
    77b6:	99 81       	ldd	r25, Y+1	; 0x01
    77b8:	00 97       	sbiw	r24, 0x00	; 0
    77ba:	09 f0       	breq	.+2      	; 0x77be <_ZN6String10invalidateEv+0x10>
    77bc:	9d d3       	rcall	.+1850   	; 0x7ef8 <free>
    77be:	19 82       	std	Y+1, r1	; 0x01
    77c0:	18 82       	st	Y, r1
    77c2:	1d 82       	std	Y+5, r1	; 0x05
    77c4:	1c 82       	std	Y+4, r1	; 0x04
    77c6:	1b 82       	std	Y+3, r1	; 0x03
    77c8:	1a 82       	std	Y+2, r1	; 0x02
    77ca:	df 91       	pop	r29
    77cc:	cf 91       	pop	r28
    77ce:	08 95       	ret

000077d0 <_ZN6String12changeBufferEj>:
    77d0:	0f 93       	push	r16
    77d2:	1f 93       	push	r17
    77d4:	cf 93       	push	r28
    77d6:	df 93       	push	r29
    77d8:	ec 01       	movw	r28, r24
    77da:	8b 01       	movw	r16, r22
    77dc:	6f 5f       	subi	r22, 0xFF	; 255
    77de:	7f 4f       	sbci	r23, 0xFF	; 255
    77e0:	88 81       	ld	r24, Y
    77e2:	99 81       	ldd	r25, Y+1	; 0x01
    77e4:	12 d4       	rcall	.+2084   	; 0x800a <realloc>
    77e6:	00 97       	sbiw	r24, 0x00	; 0
    77e8:	31 f0       	breq	.+12     	; 0x77f6 <_ZN6String12changeBufferEj+0x26>
    77ea:	99 83       	std	Y+1, r25	; 0x01
    77ec:	88 83       	st	Y, r24
    77ee:	1b 83       	std	Y+3, r17	; 0x03
    77f0:	0a 83       	std	Y+2, r16	; 0x02
    77f2:	81 e0       	ldi	r24, 0x01	; 1
    77f4:	01 c0       	rjmp	.+2      	; 0x77f8 <_ZN6String12changeBufferEj+0x28>
    77f6:	80 e0       	ldi	r24, 0x00	; 0
    77f8:	df 91       	pop	r29
    77fa:	cf 91       	pop	r28
    77fc:	1f 91       	pop	r17
    77fe:	0f 91       	pop	r16
    7800:	08 95       	ret

00007802 <_ZN6String7reserveEj>:
    7802:	cf 93       	push	r28
    7804:	df 93       	push	r29
    7806:	ec 01       	movw	r28, r24
    7808:	88 81       	ld	r24, Y
    780a:	99 81       	ldd	r25, Y+1	; 0x01
    780c:	89 2b       	or	r24, r25
    780e:	29 f0       	breq	.+10     	; 0x781a <_ZN6String7reserveEj+0x18>
    7810:	8a 81       	ldd	r24, Y+2	; 0x02
    7812:	9b 81       	ldd	r25, Y+3	; 0x03
    7814:	86 17       	cp	r24, r22
    7816:	97 07       	cpc	r25, r23
    7818:	58 f4       	brcc	.+22     	; 0x7830 <_ZN6String7reserveEj+0x2e>
    781a:	ce 01       	movw	r24, r28
    781c:	d9 df       	rcall	.-78     	; 0x77d0 <_ZN6String12changeBufferEj>
    781e:	88 23       	and	r24, r24
    7820:	41 f0       	breq	.+16     	; 0x7832 <_ZN6String7reserveEj+0x30>
    7822:	8c 81       	ldd	r24, Y+4	; 0x04
    7824:	9d 81       	ldd	r25, Y+5	; 0x05
    7826:	89 2b       	or	r24, r25
    7828:	19 f4       	brne	.+6      	; 0x7830 <_ZN6String7reserveEj+0x2e>
    782a:	e8 81       	ld	r30, Y
    782c:	f9 81       	ldd	r31, Y+1	; 0x01
    782e:	10 82       	st	Z, r1
    7830:	81 e0       	ldi	r24, 0x01	; 1
    7832:	df 91       	pop	r29
    7834:	cf 91       	pop	r28
    7836:	08 95       	ret

00007838 <_ZN6String4copyEPKcj>:
    7838:	ef 92       	push	r14
    783a:	ff 92       	push	r15
    783c:	0f 93       	push	r16
    783e:	1f 93       	push	r17
    7840:	cf 93       	push	r28
    7842:	df 93       	push	r29
    7844:	ec 01       	movw	r28, r24
    7846:	7b 01       	movw	r14, r22
    7848:	8a 01       	movw	r16, r20
    784a:	ba 01       	movw	r22, r20
    784c:	da df       	rcall	.-76     	; 0x7802 <_ZN6String7reserveEj>
    784e:	81 11       	cpse	r24, r1
    7850:	03 c0       	rjmp	.+6      	; 0x7858 <_ZN6String4copyEPKcj+0x20>
    7852:	ce 01       	movw	r24, r28
    7854:	ac df       	rcall	.-168    	; 0x77ae <_ZN6String10invalidateEv>
    7856:	06 c0       	rjmp	.+12     	; 0x7864 <_ZN6String4copyEPKcj+0x2c>
    7858:	1d 83       	std	Y+5, r17	; 0x05
    785a:	0c 83       	std	Y+4, r16	; 0x04
    785c:	b7 01       	movw	r22, r14
    785e:	88 81       	ld	r24, Y
    7860:	99 81       	ldd	r25, Y+1	; 0x01
    7862:	d0 d4       	rcall	.+2464   	; 0x8204 <strcpy>
    7864:	ce 01       	movw	r24, r28
    7866:	df 91       	pop	r29
    7868:	cf 91       	pop	r28
    786a:	1f 91       	pop	r17
    786c:	0f 91       	pop	r16
    786e:	ff 90       	pop	r15
    7870:	ef 90       	pop	r14
    7872:	08 95       	ret

00007874 <_ZN6StringC1EPKc>:
    7874:	fc 01       	movw	r30, r24
    7876:	11 82       	std	Z+1, r1	; 0x01
    7878:	10 82       	st	Z, r1
    787a:	13 82       	std	Z+3, r1	; 0x03
    787c:	12 82       	std	Z+2, r1	; 0x02
    787e:	15 82       	std	Z+5, r1	; 0x05
    7880:	14 82       	std	Z+4, r1	; 0x04
    7882:	61 15       	cp	r22, r1
    7884:	71 05       	cpc	r23, r1
    7886:	49 f0       	breq	.+18     	; 0x789a <_ZN6StringC1EPKc+0x26>
    7888:	fb 01       	movw	r30, r22
    788a:	01 90       	ld	r0, Z+
    788c:	00 20       	and	r0, r0
    788e:	e9 f7       	brne	.-6      	; 0x788a <_ZN6StringC1EPKc+0x16>
    7890:	31 97       	sbiw	r30, 0x01	; 1
    7892:	af 01       	movw	r20, r30
    7894:	46 1b       	sub	r20, r22
    7896:	57 0b       	sbc	r21, r23
    7898:	cf cf       	rjmp	.-98     	; 0x7838 <_ZN6String4copyEPKcj>
    789a:	08 95       	ret

0000789c <_ZN6String4moveERS_>:
    789c:	0f 93       	push	r16
    789e:	1f 93       	push	r17
    78a0:	cf 93       	push	r28
    78a2:	df 93       	push	r29
    78a4:	8c 01       	movw	r16, r24
    78a6:	eb 01       	movw	r28, r22
    78a8:	fc 01       	movw	r30, r24
    78aa:	80 81       	ld	r24, Z
    78ac:	91 81       	ldd	r25, Z+1	; 0x01
    78ae:	00 97       	sbiw	r24, 0x00	; 0
    78b0:	c1 f0       	breq	.+48     	; 0x78e2 <_ZN6String4moveERS_+0x46>
    78b2:	68 81       	ld	r22, Y
    78b4:	79 81       	ldd	r23, Y+1	; 0x01
    78b6:	61 15       	cp	r22, r1
    78b8:	71 05       	cpc	r23, r1
    78ba:	91 f0       	breq	.+36     	; 0x78e0 <_ZN6String4moveERS_+0x44>
    78bc:	2f ec       	ldi	r18, 0xCF	; 207
    78be:	3b e3       	ldi	r19, 0x3B	; 59
    78c0:	23 2b       	or	r18, r19
    78c2:	71 f0       	breq	.+28     	; 0x78e0 <_ZN6String4moveERS_+0x44>
    78c4:	42 81       	ldd	r20, Z+2	; 0x02
    78c6:	53 81       	ldd	r21, Z+3	; 0x03
    78c8:	2c 81       	ldd	r18, Y+4	; 0x04
    78ca:	3d 81       	ldd	r19, Y+5	; 0x05
    78cc:	42 17       	cp	r20, r18
    78ce:	53 07       	cpc	r21, r19
    78d0:	38 f0       	brcs	.+14     	; 0x78e0 <_ZN6String4moveERS_+0x44>
    78d2:	98 d4       	rcall	.+2352   	; 0x8204 <strcpy>
    78d4:	8c 81       	ldd	r24, Y+4	; 0x04
    78d6:	9d 81       	ldd	r25, Y+5	; 0x05
    78d8:	f8 01       	movw	r30, r16
    78da:	95 83       	std	Z+5, r25	; 0x05
    78dc:	84 83       	std	Z+4, r24	; 0x04
    78de:	12 c0       	rjmp	.+36     	; 0x7904 <_ZN6String4moveERS_+0x68>
    78e0:	0b d3       	rcall	.+1558   	; 0x7ef8 <free>
    78e2:	88 81       	ld	r24, Y
    78e4:	99 81       	ldd	r25, Y+1	; 0x01
    78e6:	f8 01       	movw	r30, r16
    78e8:	91 83       	std	Z+1, r25	; 0x01
    78ea:	80 83       	st	Z, r24
    78ec:	8a 81       	ldd	r24, Y+2	; 0x02
    78ee:	9b 81       	ldd	r25, Y+3	; 0x03
    78f0:	93 83       	std	Z+3, r25	; 0x03
    78f2:	82 83       	std	Z+2, r24	; 0x02
    78f4:	8c 81       	ldd	r24, Y+4	; 0x04
    78f6:	9d 81       	ldd	r25, Y+5	; 0x05
    78f8:	95 83       	std	Z+5, r25	; 0x05
    78fa:	84 83       	std	Z+4, r24	; 0x04
    78fc:	19 82       	std	Y+1, r1	; 0x01
    78fe:	18 82       	st	Y, r1
    7900:	1b 82       	std	Y+3, r1	; 0x03
    7902:	1a 82       	std	Y+2, r1	; 0x02
    7904:	1d 82       	std	Y+5, r1	; 0x05
    7906:	1c 82       	std	Y+4, r1	; 0x04
    7908:	df 91       	pop	r29
    790a:	cf 91       	pop	r28
    790c:	1f 91       	pop	r17
    790e:	0f 91       	pop	r16
    7910:	08 95       	ret

00007912 <_ZN6StringC1EOS_>:
    7912:	fc 01       	movw	r30, r24
    7914:	11 82       	std	Z+1, r1	; 0x01
    7916:	10 82       	st	Z, r1
    7918:	13 82       	std	Z+3, r1	; 0x03
    791a:	12 82       	std	Z+2, r1	; 0x02
    791c:	15 82       	std	Z+5, r1	; 0x05
    791e:	14 82       	std	Z+4, r1	; 0x04
    7920:	bd cf       	rjmp	.-134    	; 0x789c <_ZN6String4moveERS_>

00007922 <_ZN6StringaSERKS_>:
    7922:	cf 93       	push	r28
    7924:	df 93       	push	r29
    7926:	ec 01       	movw	r28, r24
    7928:	fb 01       	movw	r30, r22
    792a:	86 17       	cp	r24, r22
    792c:	97 07       	cpc	r25, r23
    792e:	51 f0       	breq	.+20     	; 0x7944 <_ZN6StringaSERKS_+0x22>
    7930:	60 81       	ld	r22, Z
    7932:	71 81       	ldd	r23, Z+1	; 0x01
    7934:	61 15       	cp	r22, r1
    7936:	71 05       	cpc	r23, r1
    7938:	21 f0       	breq	.+8      	; 0x7942 <_ZN6StringaSERKS_+0x20>
    793a:	44 81       	ldd	r20, Z+4	; 0x04
    793c:	55 81       	ldd	r21, Z+5	; 0x05
    793e:	7c df       	rcall	.-264    	; 0x7838 <_ZN6String4copyEPKcj>
    7940:	01 c0       	rjmp	.+2      	; 0x7944 <_ZN6StringaSERKS_+0x22>
    7942:	35 df       	rcall	.-406    	; 0x77ae <_ZN6String10invalidateEv>
    7944:	ce 01       	movw	r24, r28
    7946:	df 91       	pop	r29
    7948:	cf 91       	pop	r28
    794a:	08 95       	ret

0000794c <_ZN6StringC1ERKS_>:
    794c:	fc 01       	movw	r30, r24
    794e:	11 82       	std	Z+1, r1	; 0x01
    7950:	10 82       	st	Z, r1
    7952:	13 82       	std	Z+3, r1	; 0x03
    7954:	12 82       	std	Z+2, r1	; 0x02
    7956:	15 82       	std	Z+5, r1	; 0x05
    7958:	14 82       	std	Z+4, r1	; 0x04
    795a:	e3 cf       	rjmp	.-58     	; 0x7922 <_ZN6StringaSERKS_>

0000795c <_ZN6StringaSEPKc>:
    795c:	cf 93       	push	r28
    795e:	df 93       	push	r29
    7960:	ec 01       	movw	r28, r24
    7962:	61 15       	cp	r22, r1
    7964:	71 05       	cpc	r23, r1
    7966:	51 f0       	breq	.+20     	; 0x797c <_ZN6StringaSEPKc+0x20>
    7968:	fb 01       	movw	r30, r22
    796a:	01 90       	ld	r0, Z+
    796c:	00 20       	and	r0, r0
    796e:	e9 f7       	brne	.-6      	; 0x796a <_ZN6StringaSEPKc+0xe>
    7970:	31 97       	sbiw	r30, 0x01	; 1
    7972:	af 01       	movw	r20, r30
    7974:	46 1b       	sub	r20, r22
    7976:	57 0b       	sbc	r21, r23
    7978:	5f df       	rcall	.-322    	; 0x7838 <_ZN6String4copyEPKcj>
    797a:	01 c0       	rjmp	.+2      	; 0x797e <_ZN6StringaSEPKc+0x22>
    797c:	18 df       	rcall	.-464    	; 0x77ae <_ZN6String10invalidateEv>
    797e:	ce 01       	movw	r24, r28
    7980:	df 91       	pop	r29
    7982:	cf 91       	pop	r28
    7984:	08 95       	ret

00007986 <_ZN6StringC1Ehh>:
    7986:	0f 93       	push	r16
    7988:	1f 93       	push	r17
    798a:	cf 93       	push	r28
    798c:	df 93       	push	r29
    798e:	cd b7       	in	r28, 0x3d	; 61
    7990:	de b7       	in	r29, 0x3e	; 62
    7992:	29 97       	sbiw	r28, 0x09	; 9
    7994:	0f b6       	in	r0, 0x3f	; 63
    7996:	f8 94       	cli
    7998:	de bf       	out	0x3e, r29	; 62
    799a:	0f be       	out	0x3f, r0	; 63
    799c:	cd bf       	out	0x3d, r28	; 61
    799e:	8c 01       	movw	r16, r24
    79a0:	86 2f       	mov	r24, r22
    79a2:	f8 01       	movw	r30, r16
    79a4:	11 82       	std	Z+1, r1	; 0x01
    79a6:	10 82       	st	Z, r1
    79a8:	13 82       	std	Z+3, r1	; 0x03
    79aa:	12 82       	std	Z+2, r1	; 0x02
    79ac:	15 82       	std	Z+5, r1	; 0x05
    79ae:	14 82       	std	Z+4, r1	; 0x04
    79b0:	50 e0       	ldi	r21, 0x00	; 0
    79b2:	be 01       	movw	r22, r28
    79b4:	6f 5f       	subi	r22, 0xFF	; 255
    79b6:	7f 4f       	sbci	r23, 0xFF	; 255
    79b8:	90 e0       	ldi	r25, 0x00	; 0
    79ba:	7d d4       	rcall	.+2298   	; 0x82b6 <utoa>
    79bc:	be 01       	movw	r22, r28
    79be:	6f 5f       	subi	r22, 0xFF	; 255
    79c0:	7f 4f       	sbci	r23, 0xFF	; 255
    79c2:	c8 01       	movw	r24, r16
    79c4:	cb df       	rcall	.-106    	; 0x795c <_ZN6StringaSEPKc>
    79c6:	29 96       	adiw	r28, 0x09	; 9
    79c8:	0f b6       	in	r0, 0x3f	; 63
    79ca:	f8 94       	cli
    79cc:	de bf       	out	0x3e, r29	; 62
    79ce:	0f be       	out	0x3f, r0	; 63
    79d0:	cd bf       	out	0x3d, r28	; 61
    79d2:	df 91       	pop	r29
    79d4:	cf 91       	pop	r28
    79d6:	1f 91       	pop	r17
    79d8:	0f 91       	pop	r16
    79da:	08 95       	ret

000079dc <_ZN6StringC1Elh>:
    79dc:	0f 93       	push	r16
    79de:	1f 93       	push	r17
    79e0:	cf 93       	push	r28
    79e2:	df 93       	push	r29
    79e4:	cd b7       	in	r28, 0x3d	; 61
    79e6:	de b7       	in	r29, 0x3e	; 62
    79e8:	a2 97       	sbiw	r28, 0x22	; 34
    79ea:	0f b6       	in	r0, 0x3f	; 63
    79ec:	f8 94       	cli
    79ee:	de bf       	out	0x3e, r29	; 62
    79f0:	0f be       	out	0x3f, r0	; 63
    79f2:	cd bf       	out	0x3d, r28	; 61
    79f4:	8c 01       	movw	r16, r24
    79f6:	cb 01       	movw	r24, r22
    79f8:	ba 01       	movw	r22, r20
    79fa:	f8 01       	movw	r30, r16
    79fc:	11 82       	std	Z+1, r1	; 0x01
    79fe:	10 82       	st	Z, r1
    7a00:	13 82       	std	Z+3, r1	; 0x03
    7a02:	12 82       	std	Z+2, r1	; 0x02
    7a04:	15 82       	std	Z+5, r1	; 0x05
    7a06:	14 82       	std	Z+4, r1	; 0x04
    7a08:	30 e0       	ldi	r19, 0x00	; 0
    7a0a:	ae 01       	movw	r20, r28
    7a0c:	4f 5f       	subi	r20, 0xFF	; 255
    7a0e:	5f 4f       	sbci	r21, 0xFF	; 255
    7a10:	19 d4       	rcall	.+2098   	; 0x8244 <ltoa>
    7a12:	be 01       	movw	r22, r28
    7a14:	6f 5f       	subi	r22, 0xFF	; 255
    7a16:	7f 4f       	sbci	r23, 0xFF	; 255
    7a18:	c8 01       	movw	r24, r16
    7a1a:	a0 df       	rcall	.-192    	; 0x795c <_ZN6StringaSEPKc>
    7a1c:	a2 96       	adiw	r28, 0x22	; 34
    7a1e:	0f b6       	in	r0, 0x3f	; 63
    7a20:	f8 94       	cli
    7a22:	de bf       	out	0x3e, r29	; 62
    7a24:	0f be       	out	0x3f, r0	; 63
    7a26:	cd bf       	out	0x3d, r28	; 61
    7a28:	df 91       	pop	r29
    7a2a:	cf 91       	pop	r28
    7a2c:	1f 91       	pop	r17
    7a2e:	0f 91       	pop	r16
    7a30:	08 95       	ret

00007a32 <_ZN6StringC1Efh>:
    7a32:	ef 92       	push	r14
    7a34:	ff 92       	push	r15
    7a36:	0f 93       	push	r16
    7a38:	1f 93       	push	r17
    7a3a:	cf 93       	push	r28
    7a3c:	df 93       	push	r29
    7a3e:	cd b7       	in	r28, 0x3d	; 61
    7a40:	de b7       	in	r29, 0x3e	; 62
    7a42:	a1 97       	sbiw	r28, 0x21	; 33
    7a44:	0f b6       	in	r0, 0x3f	; 63
    7a46:	f8 94       	cli
    7a48:	de bf       	out	0x3e, r29	; 62
    7a4a:	0f be       	out	0x3f, r0	; 63
    7a4c:	cd bf       	out	0x3d, r28	; 61
    7a4e:	7c 01       	movw	r14, r24
    7a50:	cb 01       	movw	r24, r22
    7a52:	ba 01       	movw	r22, r20
    7a54:	f7 01       	movw	r30, r14
    7a56:	11 82       	std	Z+1, r1	; 0x01
    7a58:	10 82       	st	Z, r1
    7a5a:	13 82       	std	Z+3, r1	; 0x03
    7a5c:	12 82       	std	Z+2, r1	; 0x02
    7a5e:	15 82       	std	Z+5, r1	; 0x05
    7a60:	14 82       	std	Z+4, r1	; 0x04
    7a62:	42 e0       	ldi	r20, 0x02	; 2
    7a64:	42 0f       	add	r20, r18
    7a66:	8e 01       	movw	r16, r28
    7a68:	0f 5f       	subi	r16, 0xFF	; 255
    7a6a:	1f 4f       	sbci	r17, 0xFF	; 255
    7a6c:	8e d1       	rcall	.+796    	; 0x7d8a <dtostrf>
    7a6e:	bc 01       	movw	r22, r24
    7a70:	c7 01       	movw	r24, r14
    7a72:	74 df       	rcall	.-280    	; 0x795c <_ZN6StringaSEPKc>
    7a74:	a1 96       	adiw	r28, 0x21	; 33
    7a76:	0f b6       	in	r0, 0x3f	; 63
    7a78:	f8 94       	cli
    7a7a:	de bf       	out	0x3e, r29	; 62
    7a7c:	0f be       	out	0x3f, r0	; 63
    7a7e:	cd bf       	out	0x3d, r28	; 61
    7a80:	df 91       	pop	r29
    7a82:	cf 91       	pop	r28
    7a84:	1f 91       	pop	r17
    7a86:	0f 91       	pop	r16
    7a88:	ff 90       	pop	r15
    7a8a:	ef 90       	pop	r14
    7a8c:	08 95       	ret

00007a8e <_ZN6String6concatEPKcj>:
    7a8e:	ef 92       	push	r14
    7a90:	ff 92       	push	r15
    7a92:	0f 93       	push	r16
    7a94:	1f 93       	push	r17
    7a96:	cf 93       	push	r28
    7a98:	df 93       	push	r29
    7a9a:	61 15       	cp	r22, r1
    7a9c:	71 05       	cpc	r23, r1
    7a9e:	11 f4       	brne	.+4      	; 0x7aa4 <_ZN6String6concatEPKcj+0x16>
    7aa0:	80 e0       	ldi	r24, 0x00	; 0
    7aa2:	1a c0       	rjmp	.+52     	; 0x7ad8 <_ZN6String6concatEPKcj+0x4a>
    7aa4:	41 15       	cp	r20, r1
    7aa6:	51 05       	cpc	r21, r1
    7aa8:	b1 f0       	breq	.+44     	; 0x7ad6 <_ZN6String6concatEPKcj+0x48>
    7aaa:	7b 01       	movw	r14, r22
    7aac:	ec 01       	movw	r28, r24
    7aae:	8c 81       	ldd	r24, Y+4	; 0x04
    7ab0:	9d 81       	ldd	r25, Y+5	; 0x05
    7ab2:	8a 01       	movw	r16, r20
    7ab4:	08 0f       	add	r16, r24
    7ab6:	19 1f       	adc	r17, r25
    7ab8:	b8 01       	movw	r22, r16
    7aba:	ce 01       	movw	r24, r28
    7abc:	a2 de       	rcall	.-700    	; 0x7802 <_ZN6String7reserveEj>
    7abe:	88 23       	and	r24, r24
    7ac0:	79 f3       	breq	.-34     	; 0x7aa0 <_ZN6String6concatEPKcj+0x12>
    7ac2:	28 81       	ld	r18, Y
    7ac4:	39 81       	ldd	r19, Y+1	; 0x01
    7ac6:	8c 81       	ldd	r24, Y+4	; 0x04
    7ac8:	9d 81       	ldd	r25, Y+5	; 0x05
    7aca:	b7 01       	movw	r22, r14
    7acc:	82 0f       	add	r24, r18
    7ace:	93 1f       	adc	r25, r19
    7ad0:	99 d3       	rcall	.+1842   	; 0x8204 <strcpy>
    7ad2:	1d 83       	std	Y+5, r17	; 0x05
    7ad4:	0c 83       	std	Y+4, r16	; 0x04
    7ad6:	81 e0       	ldi	r24, 0x01	; 1
    7ad8:	df 91       	pop	r29
    7ada:	cf 91       	pop	r28
    7adc:	1f 91       	pop	r17
    7ade:	0f 91       	pop	r16
    7ae0:	ff 90       	pop	r15
    7ae2:	ef 90       	pop	r14
    7ae4:	08 95       	ret

00007ae6 <_ZN6String6concatERKS_>:
    7ae6:	fb 01       	movw	r30, r22
    7ae8:	44 81       	ldd	r20, Z+4	; 0x04
    7aea:	55 81       	ldd	r21, Z+5	; 0x05
    7aec:	60 81       	ld	r22, Z
    7aee:	71 81       	ldd	r23, Z+1	; 0x01
    7af0:	ce cf       	rjmp	.-100    	; 0x7a8e <_ZN6String6concatEPKcj>

00007af2 <_ZN6String6concatEPKc>:
    7af2:	61 15       	cp	r22, r1
    7af4:	71 05       	cpc	r23, r1
    7af6:	49 f0       	breq	.+18     	; 0x7b0a <_ZN6String6concatEPKc+0x18>
    7af8:	fb 01       	movw	r30, r22
    7afa:	01 90       	ld	r0, Z+
    7afc:	00 20       	and	r0, r0
    7afe:	e9 f7       	brne	.-6      	; 0x7afa <_ZN6String6concatEPKc+0x8>
    7b00:	31 97       	sbiw	r30, 0x01	; 1
    7b02:	af 01       	movw	r20, r30
    7b04:	46 1b       	sub	r20, r22
    7b06:	57 0b       	sbc	r21, r23
    7b08:	c2 cf       	rjmp	.-124    	; 0x7a8e <_ZN6String6concatEPKcj>
    7b0a:	80 e0       	ldi	r24, 0x00	; 0
    7b0c:	08 95       	ret

00007b0e <_ZN6String6concatEh>:
    7b0e:	ef 92       	push	r14
    7b10:	ff 92       	push	r15
    7b12:	0f 93       	push	r16
    7b14:	1f 93       	push	r17
    7b16:	cf 93       	push	r28
    7b18:	df 93       	push	r29
    7b1a:	00 d0       	rcall	.+0      	; 0x7b1c <_ZN6String6concatEh+0xe>
    7b1c:	1f 92       	push	r1
    7b1e:	cd b7       	in	r28, 0x3d	; 61
    7b20:	de b7       	in	r29, 0x3e	; 62
    7b22:	7c 01       	movw	r14, r24
    7b24:	86 2f       	mov	r24, r22
    7b26:	4a e0       	ldi	r20, 0x0A	; 10
    7b28:	8e 01       	movw	r16, r28
    7b2a:	0f 5f       	subi	r16, 0xFF	; 255
    7b2c:	1f 4f       	sbci	r17, 0xFF	; 255
    7b2e:	b8 01       	movw	r22, r16
    7b30:	90 e0       	ldi	r25, 0x00	; 0
    7b32:	7e d3       	rcall	.+1788   	; 0x8230 <__itoa_ncheck>
    7b34:	f8 01       	movw	r30, r16
    7b36:	01 90       	ld	r0, Z+
    7b38:	00 20       	and	r0, r0
    7b3a:	e9 f7       	brne	.-6      	; 0x7b36 <_ZN6String6concatEh+0x28>
    7b3c:	31 97       	sbiw	r30, 0x01	; 1
    7b3e:	af 01       	movw	r20, r30
    7b40:	40 1b       	sub	r20, r16
    7b42:	51 0b       	sbc	r21, r17
    7b44:	b8 01       	movw	r22, r16
    7b46:	c7 01       	movw	r24, r14
    7b48:	a2 df       	rcall	.-188    	; 0x7a8e <_ZN6String6concatEPKcj>
    7b4a:	0f 90       	pop	r0
    7b4c:	0f 90       	pop	r0
    7b4e:	0f 90       	pop	r0
    7b50:	0f 90       	pop	r0
    7b52:	df 91       	pop	r29
    7b54:	cf 91       	pop	r28
    7b56:	1f 91       	pop	r17
    7b58:	0f 91       	pop	r16
    7b5a:	ff 90       	pop	r15
    7b5c:	ef 90       	pop	r14
    7b5e:	08 95       	ret

00007b60 <_ZN6String6concatEi>:
    7b60:	ef 92       	push	r14
    7b62:	ff 92       	push	r15
    7b64:	0f 93       	push	r16
    7b66:	1f 93       	push	r17
    7b68:	cf 93       	push	r28
    7b6a:	df 93       	push	r29
    7b6c:	cd b7       	in	r28, 0x3d	; 61
    7b6e:	de b7       	in	r29, 0x3e	; 62
    7b70:	28 97       	sbiw	r28, 0x08	; 8
    7b72:	0f b6       	in	r0, 0x3f	; 63
    7b74:	f8 94       	cli
    7b76:	de bf       	out	0x3e, r29	; 62
    7b78:	0f be       	out	0x3f, r0	; 63
    7b7a:	cd bf       	out	0x3d, r28	; 61
    7b7c:	7c 01       	movw	r14, r24
    7b7e:	cb 01       	movw	r24, r22
    7b80:	4a e0       	ldi	r20, 0x0A	; 10
    7b82:	8e 01       	movw	r16, r28
    7b84:	0f 5f       	subi	r16, 0xFF	; 255
    7b86:	1f 4f       	sbci	r17, 0xFF	; 255
    7b88:	b8 01       	movw	r22, r16
    7b8a:	52 d3       	rcall	.+1700   	; 0x8230 <__itoa_ncheck>
    7b8c:	f8 01       	movw	r30, r16
    7b8e:	01 90       	ld	r0, Z+
    7b90:	00 20       	and	r0, r0
    7b92:	e9 f7       	brne	.-6      	; 0x7b8e <_ZN6String6concatEi+0x2e>
    7b94:	31 97       	sbiw	r30, 0x01	; 1
    7b96:	af 01       	movw	r20, r30
    7b98:	40 1b       	sub	r20, r16
    7b9a:	51 0b       	sbc	r21, r17
    7b9c:	b8 01       	movw	r22, r16
    7b9e:	c7 01       	movw	r24, r14
    7ba0:	76 df       	rcall	.-276    	; 0x7a8e <_ZN6String6concatEPKcj>
    7ba2:	28 96       	adiw	r28, 0x08	; 8
    7ba4:	0f b6       	in	r0, 0x3f	; 63
    7ba6:	f8 94       	cli
    7ba8:	de bf       	out	0x3e, r29	; 62
    7baa:	0f be       	out	0x3f, r0	; 63
    7bac:	cd bf       	out	0x3d, r28	; 61
    7bae:	df 91       	pop	r29
    7bb0:	cf 91       	pop	r28
    7bb2:	1f 91       	pop	r17
    7bb4:	0f 91       	pop	r16
    7bb6:	ff 90       	pop	r15
    7bb8:	ef 90       	pop	r14
    7bba:	08 95       	ret

00007bbc <_ZN6String6concatEj>:
    7bbc:	ef 92       	push	r14
    7bbe:	ff 92       	push	r15
    7bc0:	0f 93       	push	r16
    7bc2:	1f 93       	push	r17
    7bc4:	cf 93       	push	r28
    7bc6:	df 93       	push	r29
    7bc8:	cd b7       	in	r28, 0x3d	; 61
    7bca:	de b7       	in	r29, 0x3e	; 62
    7bcc:	27 97       	sbiw	r28, 0x07	; 7
    7bce:	0f b6       	in	r0, 0x3f	; 63
    7bd0:	f8 94       	cli
    7bd2:	de bf       	out	0x3e, r29	; 62
    7bd4:	0f be       	out	0x3f, r0	; 63
    7bd6:	cd bf       	out	0x3d, r28	; 61
    7bd8:	7c 01       	movw	r14, r24
    7bda:	cb 01       	movw	r24, r22
    7bdc:	4a e0       	ldi	r20, 0x0A	; 10
    7bde:	8e 01       	movw	r16, r28
    7be0:	0f 5f       	subi	r16, 0xFF	; 255
    7be2:	1f 4f       	sbci	r17, 0xFF	; 255
    7be4:	b8 01       	movw	r22, r16
    7be6:	71 d3       	rcall	.+1762   	; 0x82ca <__utoa_ncheck>
    7be8:	f8 01       	movw	r30, r16
    7bea:	01 90       	ld	r0, Z+
    7bec:	00 20       	and	r0, r0
    7bee:	e9 f7       	brne	.-6      	; 0x7bea <_ZN6String6concatEj+0x2e>
    7bf0:	31 97       	sbiw	r30, 0x01	; 1
    7bf2:	af 01       	movw	r20, r30
    7bf4:	40 1b       	sub	r20, r16
    7bf6:	51 0b       	sbc	r21, r17
    7bf8:	b8 01       	movw	r22, r16
    7bfa:	c7 01       	movw	r24, r14
    7bfc:	48 df       	rcall	.-368    	; 0x7a8e <_ZN6String6concatEPKcj>
    7bfe:	27 96       	adiw	r28, 0x07	; 7
    7c00:	0f b6       	in	r0, 0x3f	; 63
    7c02:	f8 94       	cli
    7c04:	de bf       	out	0x3e, r29	; 62
    7c06:	0f be       	out	0x3f, r0	; 63
    7c08:	cd bf       	out	0x3d, r28	; 61
    7c0a:	df 91       	pop	r29
    7c0c:	cf 91       	pop	r28
    7c0e:	1f 91       	pop	r17
    7c10:	0f 91       	pop	r16
    7c12:	ff 90       	pop	r15
    7c14:	ef 90       	pop	r14
    7c16:	08 95       	ret

00007c18 <_ZNK6String9compareToERKS_>:
/*********************************************/
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
    7c18:	cf 93       	push	r28
    7c1a:	df 93       	push	r29
	if (!buffer || !s.buffer) {
    7c1c:	dc 01       	movw	r26, r24
    7c1e:	ed 91       	ld	r30, X+
    7c20:	fc 91       	ld	r31, X
    7c22:	eb 01       	movw	r28, r22
    7c24:	a8 81       	ld	r26, Y
    7c26:	b9 81       	ldd	r27, Y+1	; 0x01
    7c28:	30 97       	sbiw	r30, 0x00	; 0
    7c2a:	11 f0       	breq	.+4      	; 0x7c30 <_ZNK6String9compareToERKS_+0x18>
    7c2c:	10 97       	sbiw	r26, 0x00	; 0
    7c2e:	c9 f4       	brne	.+50     	; 0x7c62 <_ZNK6String9compareToERKS_+0x4a>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
    7c30:	10 97       	sbiw	r26, 0x00	; 0
    7c32:	59 f0       	breq	.+22     	; 0x7c4a <_ZNK6String9compareToERKS_+0x32>
    7c34:	eb 01       	movw	r28, r22
    7c36:	2c 81       	ldd	r18, Y+4	; 0x04
    7c38:	3d 81       	ldd	r19, Y+5	; 0x05
    7c3a:	23 2b       	or	r18, r19
    7c3c:	31 f0       	breq	.+12     	; 0x7c4a <_ZNK6String9compareToERKS_+0x32>
    7c3e:	8c 91       	ld	r24, X
    7c40:	90 e0       	ldi	r25, 0x00	; 0
    7c42:	91 95       	neg	r25
    7c44:	81 95       	neg	r24
    7c46:	91 09       	sbc	r25, r1
    7c48:	13 c0       	rjmp	.+38     	; 0x7c70 <_ZNK6String9compareToERKS_+0x58>
		if (buffer && len > 0) return *(unsigned char *)buffer;
    7c4a:	30 97       	sbiw	r30, 0x00	; 0
    7c4c:	79 f0       	breq	.+30     	; 0x7c6c <_ZNK6String9compareToERKS_+0x54>
    7c4e:	dc 01       	movw	r26, r24
    7c50:	14 96       	adiw	r26, 0x04	; 4
    7c52:	8d 91       	ld	r24, X+
    7c54:	9c 91       	ld	r25, X
    7c56:	15 97       	sbiw	r26, 0x05	; 5
    7c58:	89 2b       	or	r24, r25
    7c5a:	41 f0       	breq	.+16     	; 0x7c6c <_ZNK6String9compareToERKS_+0x54>
    7c5c:	80 81       	ld	r24, Z
    7c5e:	90 e0       	ldi	r25, 0x00	; 0
    7c60:	07 c0       	rjmp	.+14     	; 0x7c70 <_ZNK6String9compareToERKS_+0x58>
		return 0;
	}
	return strcmp(buffer, s.buffer);
    7c62:	bd 01       	movw	r22, r26
    7c64:	cf 01       	movw	r24, r30
}
    7c66:	df 91       	pop	r29
    7c68:	cf 91       	pop	r28
	if (!buffer || !s.buffer) {
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
		return 0;
	}
	return strcmp(buffer, s.buffer);
    7c6a:	c3 c2       	rjmp	.+1414   	; 0x81f2 <strcmp>
int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
		return 0;
    7c6c:	80 e0       	ldi	r24, 0x00	; 0
    7c6e:	90 e0       	ldi	r25, 0x00	; 0
	}
	return strcmp(buffer, s.buffer);
}
    7c70:	df 91       	pop	r29
    7c72:	cf 91       	pop	r28
    7c74:	08 95       	ret

00007c76 <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
	return (len == s2.len && compareTo(s2) == 0);
    7c76:	fc 01       	movw	r30, r24
    7c78:	44 81       	ldd	r20, Z+4	; 0x04
    7c7a:	55 81       	ldd	r21, Z+5	; 0x05
    7c7c:	fb 01       	movw	r30, r22
    7c7e:	24 81       	ldd	r18, Z+4	; 0x04
    7c80:	35 81       	ldd	r19, Z+5	; 0x05
    7c82:	42 17       	cp	r20, r18
    7c84:	53 07       	cpc	r21, r19
    7c86:	21 f4       	brne	.+8      	; 0x7c90 <_ZNK6String6equalsERKS_+0x1a>
    7c88:	c7 df       	rcall	.-114    	; 0x7c18 <_ZNK6String9compareToERKS_>
    7c8a:	21 e0       	ldi	r18, 0x01	; 1
    7c8c:	89 2b       	or	r24, r25
    7c8e:	09 f0       	breq	.+2      	; 0x7c92 <_ZNK6String6equalsERKS_+0x1c>
    7c90:	20 e0       	ldi	r18, 0x00	; 0
}
    7c92:	82 2f       	mov	r24, r18
    7c94:	08 95       	ret

00007c96 <__mulsi3>:
    7c96:	db 01       	movw	r26, r22
    7c98:	8f 93       	push	r24
    7c9a:	9f 93       	push	r25
    7c9c:	6c d0       	rcall	.+216    	; 0x7d76 <__muluhisi3>
    7c9e:	bf 91       	pop	r27
    7ca0:	af 91       	pop	r26
    7ca2:	a2 9f       	mul	r26, r18
    7ca4:	80 0d       	add	r24, r0
    7ca6:	91 1d       	adc	r25, r1
    7ca8:	a3 9f       	mul	r26, r19
    7caa:	90 0d       	add	r25, r0
    7cac:	b2 9f       	mul	r27, r18
    7cae:	90 0d       	add	r25, r0
    7cb0:	11 24       	eor	r1, r1
    7cb2:	08 95       	ret

00007cb4 <__udivmodqi4>:
    7cb4:	99 1b       	sub	r25, r25
    7cb6:	79 e0       	ldi	r23, 0x09	; 9
    7cb8:	04 c0       	rjmp	.+8      	; 0x7cc2 <__udivmodqi4_ep>

00007cba <__udivmodqi4_loop>:
    7cba:	99 1f       	adc	r25, r25
    7cbc:	96 17       	cp	r25, r22
    7cbe:	08 f0       	brcs	.+2      	; 0x7cc2 <__udivmodqi4_ep>
    7cc0:	96 1b       	sub	r25, r22

00007cc2 <__udivmodqi4_ep>:
    7cc2:	88 1f       	adc	r24, r24
    7cc4:	7a 95       	dec	r23
    7cc6:	c9 f7       	brne	.-14     	; 0x7cba <__udivmodqi4_loop>
    7cc8:	80 95       	com	r24
    7cca:	08 95       	ret

00007ccc <__udivmodsi4>:
    7ccc:	a1 e2       	ldi	r26, 0x21	; 33
    7cce:	1a 2e       	mov	r1, r26
    7cd0:	aa 1b       	sub	r26, r26
    7cd2:	bb 1b       	sub	r27, r27
    7cd4:	fd 01       	movw	r30, r26
    7cd6:	0d c0       	rjmp	.+26     	; 0x7cf2 <__udivmodsi4_ep>

00007cd8 <__udivmodsi4_loop>:
    7cd8:	aa 1f       	adc	r26, r26
    7cda:	bb 1f       	adc	r27, r27
    7cdc:	ee 1f       	adc	r30, r30
    7cde:	ff 1f       	adc	r31, r31
    7ce0:	a2 17       	cp	r26, r18
    7ce2:	b3 07       	cpc	r27, r19
    7ce4:	e4 07       	cpc	r30, r20
    7ce6:	f5 07       	cpc	r31, r21
    7ce8:	20 f0       	brcs	.+8      	; 0x7cf2 <__udivmodsi4_ep>
    7cea:	a2 1b       	sub	r26, r18
    7cec:	b3 0b       	sbc	r27, r19
    7cee:	e4 0b       	sbc	r30, r20
    7cf0:	f5 0b       	sbc	r31, r21

00007cf2 <__udivmodsi4_ep>:
    7cf2:	66 1f       	adc	r22, r22
    7cf4:	77 1f       	adc	r23, r23
    7cf6:	88 1f       	adc	r24, r24
    7cf8:	99 1f       	adc	r25, r25
    7cfa:	1a 94       	dec	r1
    7cfc:	69 f7       	brne	.-38     	; 0x7cd8 <__udivmodsi4_loop>
    7cfe:	60 95       	com	r22
    7d00:	70 95       	com	r23
    7d02:	80 95       	com	r24
    7d04:	90 95       	com	r25
    7d06:	9b 01       	movw	r18, r22
    7d08:	ac 01       	movw	r20, r24
    7d0a:	bd 01       	movw	r22, r26
    7d0c:	cf 01       	movw	r24, r30
    7d0e:	08 95       	ret

00007d10 <__divmodsi4>:
    7d10:	05 2e       	mov	r0, r21
    7d12:	97 fb       	bst	r25, 7
    7d14:	16 f4       	brtc	.+4      	; 0x7d1a <__divmodsi4+0xa>
    7d16:	00 94       	com	r0
    7d18:	0f d0       	rcall	.+30     	; 0x7d38 <__negsi2>
    7d1a:	57 fd       	sbrc	r21, 7
    7d1c:	05 d0       	rcall	.+10     	; 0x7d28 <__divmodsi4_neg2>
    7d1e:	d6 df       	rcall	.-84     	; 0x7ccc <__udivmodsi4>
    7d20:	07 fc       	sbrc	r0, 7
    7d22:	02 d0       	rcall	.+4      	; 0x7d28 <__divmodsi4_neg2>
    7d24:	46 f4       	brtc	.+16     	; 0x7d36 <__divmodsi4_exit>
    7d26:	08 c0       	rjmp	.+16     	; 0x7d38 <__negsi2>

00007d28 <__divmodsi4_neg2>:
    7d28:	50 95       	com	r21
    7d2a:	40 95       	com	r20
    7d2c:	30 95       	com	r19
    7d2e:	21 95       	neg	r18
    7d30:	3f 4f       	sbci	r19, 0xFF	; 255
    7d32:	4f 4f       	sbci	r20, 0xFF	; 255
    7d34:	5f 4f       	sbci	r21, 0xFF	; 255

00007d36 <__divmodsi4_exit>:
    7d36:	08 95       	ret

00007d38 <__negsi2>:
    7d38:	90 95       	com	r25
    7d3a:	80 95       	com	r24
    7d3c:	70 95       	com	r23
    7d3e:	61 95       	neg	r22
    7d40:	7f 4f       	sbci	r23, 0xFF	; 255
    7d42:	8f 4f       	sbci	r24, 0xFF	; 255
    7d44:	9f 4f       	sbci	r25, 0xFF	; 255
    7d46:	08 95       	ret

00007d48 <__tablejump2__>:
    7d48:	ee 0f       	add	r30, r30
    7d4a:	ff 1f       	adc	r31, r31
    7d4c:	88 1f       	adc	r24, r24
    7d4e:	8b bf       	out	0x3b, r24	; 59
    7d50:	07 90       	elpm	r0, Z+
    7d52:	f6 91       	elpm	r31, Z
    7d54:	e0 2d       	mov	r30, r0
    7d56:	19 94       	eijmp

00007d58 <__umulhisi3>:
    7d58:	a2 9f       	mul	r26, r18
    7d5a:	b0 01       	movw	r22, r0
    7d5c:	b3 9f       	mul	r27, r19
    7d5e:	c0 01       	movw	r24, r0
    7d60:	a3 9f       	mul	r26, r19
    7d62:	70 0d       	add	r23, r0
    7d64:	81 1d       	adc	r24, r1
    7d66:	11 24       	eor	r1, r1
    7d68:	91 1d       	adc	r25, r1
    7d6a:	b2 9f       	mul	r27, r18
    7d6c:	70 0d       	add	r23, r0
    7d6e:	81 1d       	adc	r24, r1
    7d70:	11 24       	eor	r1, r1
    7d72:	91 1d       	adc	r25, r1
    7d74:	08 95       	ret

00007d76 <__muluhisi3>:
    7d76:	f0 df       	rcall	.-32     	; 0x7d58 <__umulhisi3>
    7d78:	a5 9f       	mul	r26, r21
    7d7a:	90 0d       	add	r25, r0
    7d7c:	b4 9f       	mul	r27, r20
    7d7e:	90 0d       	add	r25, r0
    7d80:	a4 9f       	mul	r26, r20
    7d82:	80 0d       	add	r24, r0
    7d84:	91 1d       	adc	r25, r1
    7d86:	11 24       	eor	r1, r1
    7d88:	08 95       	ret

00007d8a <dtostrf>:
    7d8a:	ef 92       	push	r14
    7d8c:	0f 93       	push	r16
    7d8e:	1f 93       	push	r17
    7d90:	cf 93       	push	r28
    7d92:	df 93       	push	r29
    7d94:	e8 01       	movw	r28, r16
    7d96:	47 fd       	sbrc	r20, 7
    7d98:	02 c0       	rjmp	.+4      	; 0x7d9e <dtostrf+0x14>
    7d9a:	34 e0       	ldi	r19, 0x04	; 4
    7d9c:	01 c0       	rjmp	.+2      	; 0x7da0 <dtostrf+0x16>
    7d9e:	34 e1       	ldi	r19, 0x14	; 20
    7da0:	04 2e       	mov	r0, r20
    7da2:	00 0c       	add	r0, r0
    7da4:	55 0b       	sbc	r21, r21
    7da6:	57 ff       	sbrs	r21, 7
    7da8:	03 c0       	rjmp	.+6      	; 0x7db0 <dtostrf+0x26>
    7daa:	51 95       	neg	r21
    7dac:	41 95       	neg	r20
    7dae:	51 09       	sbc	r21, r1
    7db0:	e3 2e       	mov	r14, r19
    7db2:	02 2f       	mov	r16, r18
    7db4:	24 2f       	mov	r18, r20
    7db6:	ae 01       	movw	r20, r28
    7db8:	a1 d2       	rcall	.+1346   	; 0x82fc <dtoa_prf>
    7dba:	ce 01       	movw	r24, r28
    7dbc:	df 91       	pop	r29
    7dbe:	cf 91       	pop	r28
    7dc0:	1f 91       	pop	r17
    7dc2:	0f 91       	pop	r16
    7dc4:	ef 90       	pop	r14
    7dc6:	08 95       	ret

00007dc8 <malloc>:
    7dc8:	0f 93       	push	r16
    7dca:	1f 93       	push	r17
    7dcc:	cf 93       	push	r28
    7dce:	df 93       	push	r29
    7dd0:	82 30       	cpi	r24, 0x02	; 2
    7dd2:	91 05       	cpc	r25, r1
    7dd4:	10 f4       	brcc	.+4      	; 0x7dda <malloc+0x12>
    7dd6:	82 e0       	ldi	r24, 0x02	; 2
    7dd8:	90 e0       	ldi	r25, 0x00	; 0
    7dda:	e0 91 3b 07 	lds	r30, 0x073B	; 0x80073b <__flp>
    7dde:	f0 91 3c 07 	lds	r31, 0x073C	; 0x80073c <__flp+0x1>
    7de2:	20 e0       	ldi	r18, 0x00	; 0
    7de4:	30 e0       	ldi	r19, 0x00	; 0
    7de6:	a0 e0       	ldi	r26, 0x00	; 0
    7de8:	b0 e0       	ldi	r27, 0x00	; 0
    7dea:	30 97       	sbiw	r30, 0x00	; 0
    7dec:	19 f1       	breq	.+70     	; 0x7e34 <malloc+0x6c>
    7dee:	40 81       	ld	r20, Z
    7df0:	51 81       	ldd	r21, Z+1	; 0x01
    7df2:	02 81       	ldd	r16, Z+2	; 0x02
    7df4:	13 81       	ldd	r17, Z+3	; 0x03
    7df6:	48 17       	cp	r20, r24
    7df8:	59 07       	cpc	r21, r25
    7dfa:	c8 f0       	brcs	.+50     	; 0x7e2e <malloc+0x66>
    7dfc:	84 17       	cp	r24, r20
    7dfe:	95 07       	cpc	r25, r21
    7e00:	69 f4       	brne	.+26     	; 0x7e1c <malloc+0x54>
    7e02:	10 97       	sbiw	r26, 0x00	; 0
    7e04:	31 f0       	breq	.+12     	; 0x7e12 <malloc+0x4a>
    7e06:	12 96       	adiw	r26, 0x02	; 2
    7e08:	0c 93       	st	X, r16
    7e0a:	12 97       	sbiw	r26, 0x02	; 2
    7e0c:	13 96       	adiw	r26, 0x03	; 3
    7e0e:	1c 93       	st	X, r17
    7e10:	27 c0       	rjmp	.+78     	; 0x7e60 <malloc+0x98>
    7e12:	00 93 3b 07 	sts	0x073B, r16	; 0x80073b <__flp>
    7e16:	10 93 3c 07 	sts	0x073C, r17	; 0x80073c <__flp+0x1>
    7e1a:	22 c0       	rjmp	.+68     	; 0x7e60 <malloc+0x98>
    7e1c:	21 15       	cp	r18, r1
    7e1e:	31 05       	cpc	r19, r1
    7e20:	19 f0       	breq	.+6      	; 0x7e28 <malloc+0x60>
    7e22:	42 17       	cp	r20, r18
    7e24:	53 07       	cpc	r21, r19
    7e26:	18 f4       	brcc	.+6      	; 0x7e2e <malloc+0x66>
    7e28:	9a 01       	movw	r18, r20
    7e2a:	bd 01       	movw	r22, r26
    7e2c:	ef 01       	movw	r28, r30
    7e2e:	df 01       	movw	r26, r30
    7e30:	f8 01       	movw	r30, r16
    7e32:	db cf       	rjmp	.-74     	; 0x7dea <malloc+0x22>
    7e34:	21 15       	cp	r18, r1
    7e36:	31 05       	cpc	r19, r1
    7e38:	f9 f0       	breq	.+62     	; 0x7e78 <malloc+0xb0>
    7e3a:	28 1b       	sub	r18, r24
    7e3c:	39 0b       	sbc	r19, r25
    7e3e:	24 30       	cpi	r18, 0x04	; 4
    7e40:	31 05       	cpc	r19, r1
    7e42:	80 f4       	brcc	.+32     	; 0x7e64 <malloc+0x9c>
    7e44:	8a 81       	ldd	r24, Y+2	; 0x02
    7e46:	9b 81       	ldd	r25, Y+3	; 0x03
    7e48:	61 15       	cp	r22, r1
    7e4a:	71 05       	cpc	r23, r1
    7e4c:	21 f0       	breq	.+8      	; 0x7e56 <malloc+0x8e>
    7e4e:	fb 01       	movw	r30, r22
    7e50:	93 83       	std	Z+3, r25	; 0x03
    7e52:	82 83       	std	Z+2, r24	; 0x02
    7e54:	04 c0       	rjmp	.+8      	; 0x7e5e <malloc+0x96>
    7e56:	90 93 3c 07 	sts	0x073C, r25	; 0x80073c <__flp+0x1>
    7e5a:	80 93 3b 07 	sts	0x073B, r24	; 0x80073b <__flp>
    7e5e:	fe 01       	movw	r30, r28
    7e60:	32 96       	adiw	r30, 0x02	; 2
    7e62:	44 c0       	rjmp	.+136    	; 0x7eec <malloc+0x124>
    7e64:	fe 01       	movw	r30, r28
    7e66:	e2 0f       	add	r30, r18
    7e68:	f3 1f       	adc	r31, r19
    7e6a:	81 93       	st	Z+, r24
    7e6c:	91 93       	st	Z+, r25
    7e6e:	22 50       	subi	r18, 0x02	; 2
    7e70:	31 09       	sbc	r19, r1
    7e72:	39 83       	std	Y+1, r19	; 0x01
    7e74:	28 83       	st	Y, r18
    7e76:	3a c0       	rjmp	.+116    	; 0x7eec <malloc+0x124>
    7e78:	20 91 39 07 	lds	r18, 0x0739	; 0x800739 <__brkval>
    7e7c:	30 91 3a 07 	lds	r19, 0x073A	; 0x80073a <__brkval+0x1>
    7e80:	23 2b       	or	r18, r19
    7e82:	41 f4       	brne	.+16     	; 0x7e94 <malloc+0xcc>
    7e84:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    7e88:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    7e8c:	30 93 3a 07 	sts	0x073A, r19	; 0x80073a <__brkval+0x1>
    7e90:	20 93 39 07 	sts	0x0739, r18	; 0x800739 <__brkval>
    7e94:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    7e98:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    7e9c:	21 15       	cp	r18, r1
    7e9e:	31 05       	cpc	r19, r1
    7ea0:	41 f4       	brne	.+16     	; 0x7eb2 <malloc+0xea>
    7ea2:	2d b7       	in	r18, 0x3d	; 61
    7ea4:	3e b7       	in	r19, 0x3e	; 62
    7ea6:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    7eaa:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    7eae:	24 1b       	sub	r18, r20
    7eb0:	35 0b       	sbc	r19, r21
    7eb2:	e0 91 39 07 	lds	r30, 0x0739	; 0x800739 <__brkval>
    7eb6:	f0 91 3a 07 	lds	r31, 0x073A	; 0x80073a <__brkval+0x1>
    7eba:	e2 17       	cp	r30, r18
    7ebc:	f3 07       	cpc	r31, r19
    7ebe:	a0 f4       	brcc	.+40     	; 0x7ee8 <malloc+0x120>
    7ec0:	2e 1b       	sub	r18, r30
    7ec2:	3f 0b       	sbc	r19, r31
    7ec4:	28 17       	cp	r18, r24
    7ec6:	39 07       	cpc	r19, r25
    7ec8:	78 f0       	brcs	.+30     	; 0x7ee8 <malloc+0x120>
    7eca:	ac 01       	movw	r20, r24
    7ecc:	4e 5f       	subi	r20, 0xFE	; 254
    7ece:	5f 4f       	sbci	r21, 0xFF	; 255
    7ed0:	24 17       	cp	r18, r20
    7ed2:	35 07       	cpc	r19, r21
    7ed4:	48 f0       	brcs	.+18     	; 0x7ee8 <malloc+0x120>
    7ed6:	4e 0f       	add	r20, r30
    7ed8:	5f 1f       	adc	r21, r31
    7eda:	50 93 3a 07 	sts	0x073A, r21	; 0x80073a <__brkval+0x1>
    7ede:	40 93 39 07 	sts	0x0739, r20	; 0x800739 <__brkval>
    7ee2:	81 93       	st	Z+, r24
    7ee4:	91 93       	st	Z+, r25
    7ee6:	02 c0       	rjmp	.+4      	; 0x7eec <malloc+0x124>
    7ee8:	e0 e0       	ldi	r30, 0x00	; 0
    7eea:	f0 e0       	ldi	r31, 0x00	; 0
    7eec:	cf 01       	movw	r24, r30
    7eee:	df 91       	pop	r29
    7ef0:	cf 91       	pop	r28
    7ef2:	1f 91       	pop	r17
    7ef4:	0f 91       	pop	r16
    7ef6:	08 95       	ret

00007ef8 <free>:
    7ef8:	cf 93       	push	r28
    7efa:	df 93       	push	r29
    7efc:	00 97       	sbiw	r24, 0x00	; 0
    7efe:	09 f4       	brne	.+2      	; 0x7f02 <free+0xa>
    7f00:	81 c0       	rjmp	.+258    	; 0x8004 <free+0x10c>
    7f02:	fc 01       	movw	r30, r24
    7f04:	32 97       	sbiw	r30, 0x02	; 2
    7f06:	13 82       	std	Z+3, r1	; 0x03
    7f08:	12 82       	std	Z+2, r1	; 0x02
    7f0a:	a0 91 3b 07 	lds	r26, 0x073B	; 0x80073b <__flp>
    7f0e:	b0 91 3c 07 	lds	r27, 0x073C	; 0x80073c <__flp+0x1>
    7f12:	10 97       	sbiw	r26, 0x00	; 0
    7f14:	81 f4       	brne	.+32     	; 0x7f36 <free+0x3e>
    7f16:	20 81       	ld	r18, Z
    7f18:	31 81       	ldd	r19, Z+1	; 0x01
    7f1a:	82 0f       	add	r24, r18
    7f1c:	93 1f       	adc	r25, r19
    7f1e:	20 91 39 07 	lds	r18, 0x0739	; 0x800739 <__brkval>
    7f22:	30 91 3a 07 	lds	r19, 0x073A	; 0x80073a <__brkval+0x1>
    7f26:	28 17       	cp	r18, r24
    7f28:	39 07       	cpc	r19, r25
    7f2a:	51 f5       	brne	.+84     	; 0x7f80 <free+0x88>
    7f2c:	f0 93 3a 07 	sts	0x073A, r31	; 0x80073a <__brkval+0x1>
    7f30:	e0 93 39 07 	sts	0x0739, r30	; 0x800739 <__brkval>
    7f34:	67 c0       	rjmp	.+206    	; 0x8004 <free+0x10c>
    7f36:	ed 01       	movw	r28, r26
    7f38:	20 e0       	ldi	r18, 0x00	; 0
    7f3a:	30 e0       	ldi	r19, 0x00	; 0
    7f3c:	ce 17       	cp	r28, r30
    7f3e:	df 07       	cpc	r29, r31
    7f40:	40 f4       	brcc	.+16     	; 0x7f52 <free+0x5a>
    7f42:	4a 81       	ldd	r20, Y+2	; 0x02
    7f44:	5b 81       	ldd	r21, Y+3	; 0x03
    7f46:	9e 01       	movw	r18, r28
    7f48:	41 15       	cp	r20, r1
    7f4a:	51 05       	cpc	r21, r1
    7f4c:	f1 f0       	breq	.+60     	; 0x7f8a <free+0x92>
    7f4e:	ea 01       	movw	r28, r20
    7f50:	f5 cf       	rjmp	.-22     	; 0x7f3c <free+0x44>
    7f52:	d3 83       	std	Z+3, r29	; 0x03
    7f54:	c2 83       	std	Z+2, r28	; 0x02
    7f56:	40 81       	ld	r20, Z
    7f58:	51 81       	ldd	r21, Z+1	; 0x01
    7f5a:	84 0f       	add	r24, r20
    7f5c:	95 1f       	adc	r25, r21
    7f5e:	c8 17       	cp	r28, r24
    7f60:	d9 07       	cpc	r29, r25
    7f62:	59 f4       	brne	.+22     	; 0x7f7a <free+0x82>
    7f64:	88 81       	ld	r24, Y
    7f66:	99 81       	ldd	r25, Y+1	; 0x01
    7f68:	84 0f       	add	r24, r20
    7f6a:	95 1f       	adc	r25, r21
    7f6c:	02 96       	adiw	r24, 0x02	; 2
    7f6e:	91 83       	std	Z+1, r25	; 0x01
    7f70:	80 83       	st	Z, r24
    7f72:	8a 81       	ldd	r24, Y+2	; 0x02
    7f74:	9b 81       	ldd	r25, Y+3	; 0x03
    7f76:	93 83       	std	Z+3, r25	; 0x03
    7f78:	82 83       	std	Z+2, r24	; 0x02
    7f7a:	21 15       	cp	r18, r1
    7f7c:	31 05       	cpc	r19, r1
    7f7e:	29 f4       	brne	.+10     	; 0x7f8a <free+0x92>
    7f80:	f0 93 3c 07 	sts	0x073C, r31	; 0x80073c <__flp+0x1>
    7f84:	e0 93 3b 07 	sts	0x073B, r30	; 0x80073b <__flp>
    7f88:	3d c0       	rjmp	.+122    	; 0x8004 <free+0x10c>
    7f8a:	e9 01       	movw	r28, r18
    7f8c:	fb 83       	std	Y+3, r31	; 0x03
    7f8e:	ea 83       	std	Y+2, r30	; 0x02
    7f90:	49 91       	ld	r20, Y+
    7f92:	59 91       	ld	r21, Y+
    7f94:	c4 0f       	add	r28, r20
    7f96:	d5 1f       	adc	r29, r21
    7f98:	ec 17       	cp	r30, r28
    7f9a:	fd 07       	cpc	r31, r29
    7f9c:	61 f4       	brne	.+24     	; 0x7fb6 <free+0xbe>
    7f9e:	80 81       	ld	r24, Z
    7fa0:	91 81       	ldd	r25, Z+1	; 0x01
    7fa2:	84 0f       	add	r24, r20
    7fa4:	95 1f       	adc	r25, r21
    7fa6:	02 96       	adiw	r24, 0x02	; 2
    7fa8:	e9 01       	movw	r28, r18
    7faa:	99 83       	std	Y+1, r25	; 0x01
    7fac:	88 83       	st	Y, r24
    7fae:	82 81       	ldd	r24, Z+2	; 0x02
    7fb0:	93 81       	ldd	r25, Z+3	; 0x03
    7fb2:	9b 83       	std	Y+3, r25	; 0x03
    7fb4:	8a 83       	std	Y+2, r24	; 0x02
    7fb6:	e0 e0       	ldi	r30, 0x00	; 0
    7fb8:	f0 e0       	ldi	r31, 0x00	; 0
    7fba:	12 96       	adiw	r26, 0x02	; 2
    7fbc:	8d 91       	ld	r24, X+
    7fbe:	9c 91       	ld	r25, X
    7fc0:	13 97       	sbiw	r26, 0x03	; 3
    7fc2:	00 97       	sbiw	r24, 0x00	; 0
    7fc4:	19 f0       	breq	.+6      	; 0x7fcc <free+0xd4>
    7fc6:	fd 01       	movw	r30, r26
    7fc8:	dc 01       	movw	r26, r24
    7fca:	f7 cf       	rjmp	.-18     	; 0x7fba <free+0xc2>
    7fcc:	8d 91       	ld	r24, X+
    7fce:	9c 91       	ld	r25, X
    7fd0:	11 97       	sbiw	r26, 0x01	; 1
    7fd2:	9d 01       	movw	r18, r26
    7fd4:	2e 5f       	subi	r18, 0xFE	; 254
    7fd6:	3f 4f       	sbci	r19, 0xFF	; 255
    7fd8:	82 0f       	add	r24, r18
    7fda:	93 1f       	adc	r25, r19
    7fdc:	20 91 39 07 	lds	r18, 0x0739	; 0x800739 <__brkval>
    7fe0:	30 91 3a 07 	lds	r19, 0x073A	; 0x80073a <__brkval+0x1>
    7fe4:	28 17       	cp	r18, r24
    7fe6:	39 07       	cpc	r19, r25
    7fe8:	69 f4       	brne	.+26     	; 0x8004 <free+0x10c>
    7fea:	30 97       	sbiw	r30, 0x00	; 0
    7fec:	29 f4       	brne	.+10     	; 0x7ff8 <free+0x100>
    7fee:	10 92 3c 07 	sts	0x073C, r1	; 0x80073c <__flp+0x1>
    7ff2:	10 92 3b 07 	sts	0x073B, r1	; 0x80073b <__flp>
    7ff6:	02 c0       	rjmp	.+4      	; 0x7ffc <free+0x104>
    7ff8:	13 82       	std	Z+3, r1	; 0x03
    7ffa:	12 82       	std	Z+2, r1	; 0x02
    7ffc:	b0 93 3a 07 	sts	0x073A, r27	; 0x80073a <__brkval+0x1>
    8000:	a0 93 39 07 	sts	0x0739, r26	; 0x800739 <__brkval>
    8004:	df 91       	pop	r29
    8006:	cf 91       	pop	r28
    8008:	08 95       	ret

0000800a <realloc>:
    800a:	6f 92       	push	r6
    800c:	7f 92       	push	r7
    800e:	8f 92       	push	r8
    8010:	9f 92       	push	r9
    8012:	af 92       	push	r10
    8014:	bf 92       	push	r11
    8016:	cf 92       	push	r12
    8018:	df 92       	push	r13
    801a:	ef 92       	push	r14
    801c:	ff 92       	push	r15
    801e:	0f 93       	push	r16
    8020:	1f 93       	push	r17
    8022:	cf 93       	push	r28
    8024:	df 93       	push	r29
    8026:	00 97       	sbiw	r24, 0x00	; 0
    8028:	81 f4       	brne	.+32     	; 0x804a <realloc+0x40>
    802a:	cb 01       	movw	r24, r22
    802c:	df 91       	pop	r29
    802e:	cf 91       	pop	r28
    8030:	1f 91       	pop	r17
    8032:	0f 91       	pop	r16
    8034:	ff 90       	pop	r15
    8036:	ef 90       	pop	r14
    8038:	df 90       	pop	r13
    803a:	cf 90       	pop	r12
    803c:	bf 90       	pop	r11
    803e:	af 90       	pop	r10
    8040:	9f 90       	pop	r9
    8042:	8f 90       	pop	r8
    8044:	7f 90       	pop	r7
    8046:	6f 90       	pop	r6
    8048:	bf ce       	rjmp	.-642    	; 0x7dc8 <malloc>
    804a:	fc 01       	movw	r30, r24
    804c:	e6 0f       	add	r30, r22
    804e:	f7 1f       	adc	r31, r23
    8050:	9c 01       	movw	r18, r24
    8052:	22 50       	subi	r18, 0x02	; 2
    8054:	31 09       	sbc	r19, r1
    8056:	e2 17       	cp	r30, r18
    8058:	f3 07       	cpc	r31, r19
    805a:	08 f4       	brcc	.+2      	; 0x805e <realloc+0x54>
    805c:	a5 c0       	rjmp	.+330    	; 0x81a8 <realloc+0x19e>
    805e:	ec 01       	movw	r28, r24
    8060:	d9 01       	movw	r26, r18
    8062:	0d 91       	ld	r16, X+
    8064:	1c 91       	ld	r17, X
    8066:	11 97       	sbiw	r26, 0x01	; 1
    8068:	06 17       	cp	r16, r22
    806a:	17 07       	cpc	r17, r23
    806c:	a8 f0       	brcs	.+42     	; 0x8098 <realloc+0x8e>
    806e:	05 30       	cpi	r16, 0x05	; 5
    8070:	11 05       	cpc	r17, r1
    8072:	08 f4       	brcc	.+2      	; 0x8076 <realloc+0x6c>
    8074:	97 c0       	rjmp	.+302    	; 0x81a4 <realloc+0x19a>
    8076:	c8 01       	movw	r24, r16
    8078:	04 97       	sbiw	r24, 0x04	; 4
    807a:	86 17       	cp	r24, r22
    807c:	97 07       	cpc	r25, r23
    807e:	08 f4       	brcc	.+2      	; 0x8082 <realloc+0x78>
    8080:	91 c0       	rjmp	.+290    	; 0x81a4 <realloc+0x19a>
    8082:	02 50       	subi	r16, 0x02	; 2
    8084:	11 09       	sbc	r17, r1
    8086:	06 1b       	sub	r16, r22
    8088:	17 0b       	sbc	r17, r23
    808a:	01 93       	st	Z+, r16
    808c:	11 93       	st	Z+, r17
    808e:	6d 93       	st	X+, r22
    8090:	7c 93       	st	X, r23
    8092:	cf 01       	movw	r24, r30
    8094:	31 df       	rcall	.-414    	; 0x7ef8 <free>
    8096:	86 c0       	rjmp	.+268    	; 0x81a4 <realloc+0x19a>
    8098:	5b 01       	movw	r10, r22
    809a:	a0 1a       	sub	r10, r16
    809c:	b1 0a       	sbc	r11, r17
    809e:	4c 01       	movw	r8, r24
    80a0:	80 0e       	add	r8, r16
    80a2:	91 1e       	adc	r9, r17
    80a4:	a0 91 3b 07 	lds	r26, 0x073B	; 0x80073b <__flp>
    80a8:	b0 91 3c 07 	lds	r27, 0x073C	; 0x80073c <__flp+0x1>
    80ac:	61 2c       	mov	r6, r1
    80ae:	71 2c       	mov	r7, r1
    80b0:	e1 2c       	mov	r14, r1
    80b2:	f1 2c       	mov	r15, r1
    80b4:	10 97       	sbiw	r26, 0x00	; 0
    80b6:	09 f4       	brne	.+2      	; 0x80ba <realloc+0xb0>
    80b8:	46 c0       	rjmp	.+140    	; 0x8146 <realloc+0x13c>
    80ba:	8d 91       	ld	r24, X+
    80bc:	9c 91       	ld	r25, X
    80be:	11 97       	sbiw	r26, 0x01	; 1
    80c0:	a8 15       	cp	r26, r8
    80c2:	b9 05       	cpc	r27, r9
    80c4:	b1 f5       	brne	.+108    	; 0x8132 <realloc+0x128>
    80c6:	6c 01       	movw	r12, r24
    80c8:	42 e0       	ldi	r20, 0x02	; 2
    80ca:	c4 0e       	add	r12, r20
    80cc:	d1 1c       	adc	r13, r1
    80ce:	ca 14       	cp	r12, r10
    80d0:	db 04       	cpc	r13, r11
    80d2:	78 f1       	brcs	.+94     	; 0x8132 <realloc+0x128>
    80d4:	4c 01       	movw	r8, r24
    80d6:	8a 18       	sub	r8, r10
    80d8:	9b 08       	sbc	r9, r11
    80da:	64 01       	movw	r12, r8
    80dc:	42 e0       	ldi	r20, 0x02	; 2
    80de:	c4 0e       	add	r12, r20
    80e0:	d1 1c       	adc	r13, r1
    80e2:	12 96       	adiw	r26, 0x02	; 2
    80e4:	bc 90       	ld	r11, X
    80e6:	12 97       	sbiw	r26, 0x02	; 2
    80e8:	13 96       	adiw	r26, 0x03	; 3
    80ea:	ac 91       	ld	r26, X
    80ec:	b5 e0       	ldi	r27, 0x05	; 5
    80ee:	cb 16       	cp	r12, r27
    80f0:	d1 04       	cpc	r13, r1
    80f2:	40 f0       	brcs	.+16     	; 0x8104 <realloc+0xfa>
    80f4:	b2 82       	std	Z+2, r11	; 0x02
    80f6:	a3 83       	std	Z+3, r26	; 0x03
    80f8:	91 82       	std	Z+1, r9	; 0x01
    80fa:	80 82       	st	Z, r8
    80fc:	d9 01       	movw	r26, r18
    80fe:	6d 93       	st	X+, r22
    8100:	7c 93       	st	X, r23
    8102:	09 c0       	rjmp	.+18     	; 0x8116 <realloc+0x10c>
    8104:	0e 5f       	subi	r16, 0xFE	; 254
    8106:	1f 4f       	sbci	r17, 0xFF	; 255
    8108:	80 0f       	add	r24, r16
    810a:	91 1f       	adc	r25, r17
    810c:	f9 01       	movw	r30, r18
    810e:	91 83       	std	Z+1, r25	; 0x01
    8110:	80 83       	st	Z, r24
    8112:	eb 2d       	mov	r30, r11
    8114:	fa 2f       	mov	r31, r26
    8116:	e1 14       	cp	r14, r1
    8118:	f1 04       	cpc	r15, r1
    811a:	31 f0       	breq	.+12     	; 0x8128 <realloc+0x11e>
    811c:	d7 01       	movw	r26, r14
    811e:	13 96       	adiw	r26, 0x03	; 3
    8120:	fc 93       	st	X, r31
    8122:	ee 93       	st	-X, r30
    8124:	12 97       	sbiw	r26, 0x02	; 2
    8126:	3e c0       	rjmp	.+124    	; 0x81a4 <realloc+0x19a>
    8128:	f0 93 3c 07 	sts	0x073C, r31	; 0x80073c <__flp+0x1>
    812c:	e0 93 3b 07 	sts	0x073B, r30	; 0x80073b <__flp>
    8130:	39 c0       	rjmp	.+114    	; 0x81a4 <realloc+0x19a>
    8132:	68 16       	cp	r6, r24
    8134:	79 06       	cpc	r7, r25
    8136:	08 f4       	brcc	.+2      	; 0x813a <realloc+0x130>
    8138:	3c 01       	movw	r6, r24
    813a:	7d 01       	movw	r14, r26
    813c:	12 96       	adiw	r26, 0x02	; 2
    813e:	0d 90       	ld	r0, X+
    8140:	bc 91       	ld	r27, X
    8142:	a0 2d       	mov	r26, r0
    8144:	b7 cf       	rjmp	.-146    	; 0x80b4 <realloc+0xaa>
    8146:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <__brkval>
    814a:	90 91 3a 07 	lds	r25, 0x073A	; 0x80073a <__brkval+0x1>
    814e:	88 16       	cp	r8, r24
    8150:	99 06       	cpc	r9, r25
    8152:	e1 f4       	brne	.+56     	; 0x818c <realloc+0x182>
    8154:	66 16       	cp	r6, r22
    8156:	77 06       	cpc	r7, r23
    8158:	c8 f4       	brcc	.+50     	; 0x818c <realloc+0x182>
    815a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    815e:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    8162:	00 97       	sbiw	r24, 0x00	; 0
    8164:	41 f4       	brne	.+16     	; 0x8176 <realloc+0x16c>
    8166:	8d b7       	in	r24, 0x3d	; 61
    8168:	9e b7       	in	r25, 0x3e	; 62
    816a:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    816e:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    8172:	84 1b       	sub	r24, r20
    8174:	95 0b       	sbc	r25, r21
    8176:	e8 17       	cp	r30, r24
    8178:	f9 07       	cpc	r31, r25
    817a:	b0 f4       	brcc	.+44     	; 0x81a8 <realloc+0x19e>
    817c:	f0 93 3a 07 	sts	0x073A, r31	; 0x80073a <__brkval+0x1>
    8180:	e0 93 39 07 	sts	0x0739, r30	; 0x800739 <__brkval>
    8184:	f9 01       	movw	r30, r18
    8186:	71 83       	std	Z+1, r23	; 0x01
    8188:	60 83       	st	Z, r22
    818a:	0c c0       	rjmp	.+24     	; 0x81a4 <realloc+0x19a>
    818c:	cb 01       	movw	r24, r22
    818e:	1c de       	rcall	.-968    	; 0x7dc8 <malloc>
    8190:	7c 01       	movw	r14, r24
    8192:	00 97       	sbiw	r24, 0x00	; 0
    8194:	49 f0       	breq	.+18     	; 0x81a8 <realloc+0x19e>
    8196:	a8 01       	movw	r20, r16
    8198:	be 01       	movw	r22, r28
    819a:	1b d0       	rcall	.+54     	; 0x81d2 <memcpy>
    819c:	ce 01       	movw	r24, r28
    819e:	ac de       	rcall	.-680    	; 0x7ef8 <free>
    81a0:	c7 01       	movw	r24, r14
    81a2:	04 c0       	rjmp	.+8      	; 0x81ac <realloc+0x1a2>
    81a4:	ce 01       	movw	r24, r28
    81a6:	02 c0       	rjmp	.+4      	; 0x81ac <realloc+0x1a2>
    81a8:	80 e0       	ldi	r24, 0x00	; 0
    81aa:	90 e0       	ldi	r25, 0x00	; 0
    81ac:	df 91       	pop	r29
    81ae:	cf 91       	pop	r28
    81b0:	1f 91       	pop	r17
    81b2:	0f 91       	pop	r16
    81b4:	ff 90       	pop	r15
    81b6:	ef 90       	pop	r14
    81b8:	df 90       	pop	r13
    81ba:	cf 90       	pop	r12
    81bc:	bf 90       	pop	r11
    81be:	af 90       	pop	r10
    81c0:	9f 90       	pop	r9
    81c2:	8f 90       	pop	r8
    81c4:	7f 90       	pop	r7
    81c6:	6f 90       	pop	r6
    81c8:	08 95       	ret

000081ca <abort>:
    81ca:	81 e0       	ldi	r24, 0x01	; 1
    81cc:	90 e0       	ldi	r25, 0x00	; 0
    81ce:	f8 94       	cli
    81d0:	f3 c2       	rjmp	.+1510   	; 0x87b8 <__do_global_dtors>

000081d2 <memcpy>:
    81d2:	fb 01       	movw	r30, r22
    81d4:	dc 01       	movw	r26, r24
    81d6:	02 c0       	rjmp	.+4      	; 0x81dc <memcpy+0xa>
    81d8:	01 90       	ld	r0, Z+
    81da:	0d 92       	st	X+, r0
    81dc:	41 50       	subi	r20, 0x01	; 1
    81de:	50 40       	sbci	r21, 0x00	; 0
    81e0:	d8 f7       	brcc	.-10     	; 0x81d8 <memcpy+0x6>
    81e2:	08 95       	ret

000081e4 <memset>:
    81e4:	dc 01       	movw	r26, r24
    81e6:	01 c0       	rjmp	.+2      	; 0x81ea <memset+0x6>
    81e8:	6d 93       	st	X+, r22
    81ea:	41 50       	subi	r20, 0x01	; 1
    81ec:	50 40       	sbci	r21, 0x00	; 0
    81ee:	e0 f7       	brcc	.-8      	; 0x81e8 <memset+0x4>
    81f0:	08 95       	ret

000081f2 <strcmp>:
    81f2:	fb 01       	movw	r30, r22
    81f4:	dc 01       	movw	r26, r24
    81f6:	8d 91       	ld	r24, X+
    81f8:	01 90       	ld	r0, Z+
    81fa:	80 19       	sub	r24, r0
    81fc:	01 10       	cpse	r0, r1
    81fe:	d9 f3       	breq	.-10     	; 0x81f6 <strcmp+0x4>
    8200:	99 0b       	sbc	r25, r25
    8202:	08 95       	ret

00008204 <strcpy>:
    8204:	fb 01       	movw	r30, r22
    8206:	dc 01       	movw	r26, r24
    8208:	01 90       	ld	r0, Z+
    820a:	0d 92       	st	X+, r0
    820c:	00 20       	and	r0, r0
    820e:	e1 f7       	brne	.-8      	; 0x8208 <strcpy+0x4>
    8210:	08 95       	ret

00008212 <strncpy>:
    8212:	fb 01       	movw	r30, r22
    8214:	dc 01       	movw	r26, r24
    8216:	41 50       	subi	r20, 0x01	; 1
    8218:	50 40       	sbci	r21, 0x00	; 0
    821a:	48 f0       	brcs	.+18     	; 0x822e <strncpy+0x1c>
    821c:	01 90       	ld	r0, Z+
    821e:	0d 92       	st	X+, r0
    8220:	00 20       	and	r0, r0
    8222:	c9 f7       	brne	.-14     	; 0x8216 <strncpy+0x4>
    8224:	01 c0       	rjmp	.+2      	; 0x8228 <strncpy+0x16>
    8226:	1d 92       	st	X+, r1
    8228:	41 50       	subi	r20, 0x01	; 1
    822a:	50 40       	sbci	r21, 0x00	; 0
    822c:	e0 f7       	brcc	.-8      	; 0x8226 <strncpy+0x14>
    822e:	08 95       	ret

00008230 <__itoa_ncheck>:
    8230:	bb 27       	eor	r27, r27
    8232:	4a 30       	cpi	r20, 0x0A	; 10
    8234:	31 f4       	brne	.+12     	; 0x8242 <__itoa_ncheck+0x12>
    8236:	99 23       	and	r25, r25
    8238:	22 f4       	brpl	.+8      	; 0x8242 <__itoa_ncheck+0x12>
    823a:	bd e2       	ldi	r27, 0x2D	; 45
    823c:	90 95       	com	r25
    823e:	81 95       	neg	r24
    8240:	9f 4f       	sbci	r25, 0xFF	; 255
    8242:	44 c0       	rjmp	.+136    	; 0x82cc <__utoa_common>

00008244 <ltoa>:
    8244:	25 32       	cpi	r18, 0x25	; 37
    8246:	31 05       	cpc	r19, r1
    8248:	18 f4       	brcc	.+6      	; 0x8250 <ltoa+0xc>
    824a:	22 30       	cpi	r18, 0x02	; 2
    824c:	08 f0       	brcs	.+2      	; 0x8250 <ltoa+0xc>
    824e:	04 c0       	rjmp	.+8      	; 0x8258 <__ltoa_ncheck>
    8250:	fa 01       	movw	r30, r20
    8252:	10 82       	st	Z, r1
    8254:	ca 01       	movw	r24, r20
    8256:	08 95       	ret

00008258 <__ltoa_ncheck>:
    8258:	bb 27       	eor	r27, r27
    825a:	2a 30       	cpi	r18, 0x0A	; 10
    825c:	51 f4       	brne	.+20     	; 0x8272 <__ltoa_ncheck+0x1a>
    825e:	99 23       	and	r25, r25
    8260:	42 f4       	brpl	.+16     	; 0x8272 <__ltoa_ncheck+0x1a>
    8262:	bd e2       	ldi	r27, 0x2D	; 45
    8264:	90 95       	com	r25
    8266:	80 95       	com	r24
    8268:	70 95       	com	r23
    826a:	61 95       	neg	r22
    826c:	7f 4f       	sbci	r23, 0xFF	; 255
    826e:	8f 4f       	sbci	r24, 0xFF	; 255
    8270:	9f 4f       	sbci	r25, 0xFF	; 255
    8272:	01 c0       	rjmp	.+2      	; 0x8276 <__ultoa_common>

00008274 <__ultoa_ncheck>:
    8274:	bb 27       	eor	r27, r27

00008276 <__ultoa_common>:
    8276:	fa 01       	movw	r30, r20
    8278:	a6 2f       	mov	r26, r22
    827a:	62 17       	cp	r22, r18
    827c:	71 05       	cpc	r23, r1
    827e:	81 05       	cpc	r24, r1
    8280:	91 05       	cpc	r25, r1
    8282:	33 0b       	sbc	r19, r19
    8284:	30 fb       	bst	r19, 0
    8286:	66 f0       	brts	.+24     	; 0x82a0 <__ultoa_common+0x2a>
    8288:	aa 27       	eor	r26, r26
    828a:	66 0f       	add	r22, r22
    828c:	77 1f       	adc	r23, r23
    828e:	88 1f       	adc	r24, r24
    8290:	99 1f       	adc	r25, r25
    8292:	aa 1f       	adc	r26, r26
    8294:	a2 17       	cp	r26, r18
    8296:	10 f0       	brcs	.+4      	; 0x829c <__ultoa_common+0x26>
    8298:	a2 1b       	sub	r26, r18
    829a:	63 95       	inc	r22
    829c:	38 50       	subi	r19, 0x08	; 8
    829e:	a9 f7       	brne	.-22     	; 0x828a <__ultoa_common+0x14>
    82a0:	a0 5d       	subi	r26, 0xD0	; 208
    82a2:	aa 33       	cpi	r26, 0x3A	; 58
    82a4:	08 f0       	brcs	.+2      	; 0x82a8 <__ultoa_common+0x32>
    82a6:	a9 5d       	subi	r26, 0xD9	; 217
    82a8:	a1 93       	st	Z+, r26
    82aa:	36 f7       	brtc	.-52     	; 0x8278 <__ultoa_common+0x2>
    82ac:	b1 11       	cpse	r27, r1
    82ae:	b1 93       	st	Z+, r27
    82b0:	10 82       	st	Z, r1
    82b2:	ca 01       	movw	r24, r20
    82b4:	71 c2       	rjmp	.+1250   	; 0x8798 <strrev>

000082b6 <utoa>:
    82b6:	45 32       	cpi	r20, 0x25	; 37
    82b8:	51 05       	cpc	r21, r1
    82ba:	18 f4       	brcc	.+6      	; 0x82c2 <utoa+0xc>
    82bc:	42 30       	cpi	r20, 0x02	; 2
    82be:	08 f0       	brcs	.+2      	; 0x82c2 <utoa+0xc>
    82c0:	04 c0       	rjmp	.+8      	; 0x82ca <__utoa_ncheck>
    82c2:	fb 01       	movw	r30, r22
    82c4:	10 82       	st	Z, r1
    82c6:	cb 01       	movw	r24, r22
    82c8:	08 95       	ret

000082ca <__utoa_ncheck>:
    82ca:	bb 27       	eor	r27, r27

000082cc <__utoa_common>:
    82cc:	fb 01       	movw	r30, r22
    82ce:	55 27       	eor	r21, r21
    82d0:	aa 27       	eor	r26, r26
    82d2:	88 0f       	add	r24, r24
    82d4:	99 1f       	adc	r25, r25
    82d6:	aa 1f       	adc	r26, r26
    82d8:	a4 17       	cp	r26, r20
    82da:	10 f0       	brcs	.+4      	; 0x82e0 <__utoa_common+0x14>
    82dc:	a4 1b       	sub	r26, r20
    82de:	83 95       	inc	r24
    82e0:	50 51       	subi	r21, 0x10	; 16
    82e2:	b9 f7       	brne	.-18     	; 0x82d2 <__utoa_common+0x6>
    82e4:	a0 5d       	subi	r26, 0xD0	; 208
    82e6:	aa 33       	cpi	r26, 0x3A	; 58
    82e8:	08 f0       	brcs	.+2      	; 0x82ec <__utoa_common+0x20>
    82ea:	a9 5d       	subi	r26, 0xD9	; 217
    82ec:	a1 93       	st	Z+, r26
    82ee:	00 97       	sbiw	r24, 0x00	; 0
    82f0:	79 f7       	brne	.-34     	; 0x82d0 <__utoa_common+0x4>
    82f2:	b1 11       	cpse	r27, r1
    82f4:	b1 93       	st	Z+, r27
    82f6:	11 92       	st	Z+, r1
    82f8:	cb 01       	movw	r24, r22
    82fa:	4e c2       	rjmp	.+1180   	; 0x8798 <strrev>

000082fc <dtoa_prf>:
    82fc:	8f 92       	push	r8
    82fe:	9f 92       	push	r9
    8300:	af 92       	push	r10
    8302:	bf 92       	push	r11
    8304:	cf 92       	push	r12
    8306:	df 92       	push	r13
    8308:	ef 92       	push	r14
    830a:	ff 92       	push	r15
    830c:	0f 93       	push	r16
    830e:	1f 93       	push	r17
    8310:	cf 93       	push	r28
    8312:	df 93       	push	r29
    8314:	cd b7       	in	r28, 0x3d	; 61
    8316:	de b7       	in	r29, 0x3e	; 62
    8318:	29 97       	sbiw	r28, 0x09	; 9
    831a:	0f b6       	in	r0, 0x3f	; 63
    831c:	f8 94       	cli
    831e:	de bf       	out	0x3e, r29	; 62
    8320:	0f be       	out	0x3f, r0	; 63
    8322:	cd bf       	out	0x3d, r28	; 61
    8324:	6a 01       	movw	r12, r20
    8326:	12 2f       	mov	r17, r18
    8328:	b0 2e       	mov	r11, r16
    832a:	2b e3       	ldi	r18, 0x3B	; 59
    832c:	20 17       	cp	r18, r16
    832e:	20 f0       	brcs	.+8      	; 0x8338 <dtoa_prf+0x3c>
    8330:	ff 24       	eor	r15, r15
    8332:	f3 94       	inc	r15
    8334:	f0 0e       	add	r15, r16
    8336:	02 c0       	rjmp	.+4      	; 0x833c <dtoa_prf+0x40>
    8338:	2c e3       	ldi	r18, 0x3C	; 60
    833a:	f2 2e       	mov	r15, r18
    833c:	0f 2d       	mov	r16, r15
    833e:	27 e0       	ldi	r18, 0x07	; 7
    8340:	ae 01       	movw	r20, r28
    8342:	4f 5f       	subi	r20, 0xFF	; 255
    8344:	5f 4f       	sbci	r21, 0xFF	; 255
    8346:	50 d1       	rcall	.+672    	; 0x85e8 <__ftoa_engine>
    8348:	bc 01       	movw	r22, r24
    834a:	49 81       	ldd	r20, Y+1	; 0x01
    834c:	84 2f       	mov	r24, r20
    834e:	89 70       	andi	r24, 0x09	; 9
    8350:	81 30       	cpi	r24, 0x01	; 1
    8352:	31 f0       	breq	.+12     	; 0x8360 <dtoa_prf+0x64>
    8354:	e1 fc       	sbrc	r14, 1
    8356:	06 c0       	rjmp	.+12     	; 0x8364 <dtoa_prf+0x68>
    8358:	e0 fe       	sbrs	r14, 0
    835a:	06 c0       	rjmp	.+12     	; 0x8368 <dtoa_prf+0x6c>
    835c:	90 e2       	ldi	r25, 0x20	; 32
    835e:	05 c0       	rjmp	.+10     	; 0x836a <dtoa_prf+0x6e>
    8360:	9d e2       	ldi	r25, 0x2D	; 45
    8362:	03 c0       	rjmp	.+6      	; 0x836a <dtoa_prf+0x6e>
    8364:	9b e2       	ldi	r25, 0x2B	; 43
    8366:	01 c0       	rjmp	.+2      	; 0x836a <dtoa_prf+0x6e>
    8368:	90 e0       	ldi	r25, 0x00	; 0
    836a:	5e 2d       	mov	r21, r14
    836c:	50 71       	andi	r21, 0x10	; 16
    836e:	43 ff       	sbrs	r20, 3
    8370:	3c c0       	rjmp	.+120    	; 0x83ea <dtoa_prf+0xee>
    8372:	91 11       	cpse	r25, r1
    8374:	02 c0       	rjmp	.+4      	; 0x837a <dtoa_prf+0x7e>
    8376:	83 e0       	ldi	r24, 0x03	; 3
    8378:	01 c0       	rjmp	.+2      	; 0x837c <dtoa_prf+0x80>
    837a:	84 e0       	ldi	r24, 0x04	; 4
    837c:	81 17       	cp	r24, r17
    837e:	18 f4       	brcc	.+6      	; 0x8386 <dtoa_prf+0x8a>
    8380:	21 2f       	mov	r18, r17
    8382:	28 1b       	sub	r18, r24
    8384:	01 c0       	rjmp	.+2      	; 0x8388 <dtoa_prf+0x8c>
    8386:	20 e0       	ldi	r18, 0x00	; 0
    8388:	51 11       	cpse	r21, r1
    838a:	0b c0       	rjmp	.+22     	; 0x83a2 <dtoa_prf+0xa6>
    838c:	f6 01       	movw	r30, r12
    838e:	82 2f       	mov	r24, r18
    8390:	30 e2       	ldi	r19, 0x20	; 32
    8392:	88 23       	and	r24, r24
    8394:	19 f0       	breq	.+6      	; 0x839c <dtoa_prf+0xa0>
    8396:	31 93       	st	Z+, r19
    8398:	81 50       	subi	r24, 0x01	; 1
    839a:	fb cf       	rjmp	.-10     	; 0x8392 <dtoa_prf+0x96>
    839c:	c2 0e       	add	r12, r18
    839e:	d1 1c       	adc	r13, r1
    83a0:	20 e0       	ldi	r18, 0x00	; 0
    83a2:	99 23       	and	r25, r25
    83a4:	29 f0       	breq	.+10     	; 0x83b0 <dtoa_prf+0xb4>
    83a6:	d6 01       	movw	r26, r12
    83a8:	9c 93       	st	X, r25
    83aa:	f6 01       	movw	r30, r12
    83ac:	31 96       	adiw	r30, 0x01	; 1
    83ae:	6f 01       	movw	r12, r30
    83b0:	c6 01       	movw	r24, r12
    83b2:	03 96       	adiw	r24, 0x03	; 3
    83b4:	e2 fe       	sbrs	r14, 2
    83b6:	0a c0       	rjmp	.+20     	; 0x83cc <dtoa_prf+0xd0>
    83b8:	3e e4       	ldi	r19, 0x4E	; 78
    83ba:	d6 01       	movw	r26, r12
    83bc:	3c 93       	st	X, r19
    83be:	41 e4       	ldi	r20, 0x41	; 65
    83c0:	11 96       	adiw	r26, 0x01	; 1
    83c2:	4c 93       	st	X, r20
    83c4:	11 97       	sbiw	r26, 0x01	; 1
    83c6:	12 96       	adiw	r26, 0x02	; 2
    83c8:	3c 93       	st	X, r19
    83ca:	06 c0       	rjmp	.+12     	; 0x83d8 <dtoa_prf+0xdc>
    83cc:	3e e6       	ldi	r19, 0x6E	; 110
    83ce:	f6 01       	movw	r30, r12
    83d0:	30 83       	st	Z, r19
    83d2:	41 e6       	ldi	r20, 0x61	; 97
    83d4:	41 83       	std	Z+1, r20	; 0x01
    83d6:	32 83       	std	Z+2, r19	; 0x02
    83d8:	fc 01       	movw	r30, r24
    83da:	32 2f       	mov	r19, r18
    83dc:	40 e2       	ldi	r20, 0x20	; 32
    83de:	33 23       	and	r19, r19
    83e0:	09 f4       	brne	.+2      	; 0x83e4 <dtoa_prf+0xe8>
    83e2:	42 c0       	rjmp	.+132    	; 0x8468 <dtoa_prf+0x16c>
    83e4:	41 93       	st	Z+, r20
    83e6:	31 50       	subi	r19, 0x01	; 1
    83e8:	fa cf       	rjmp	.-12     	; 0x83de <dtoa_prf+0xe2>
    83ea:	42 ff       	sbrs	r20, 2
    83ec:	44 c0       	rjmp	.+136    	; 0x8476 <dtoa_prf+0x17a>
    83ee:	91 11       	cpse	r25, r1
    83f0:	02 c0       	rjmp	.+4      	; 0x83f6 <dtoa_prf+0xfa>
    83f2:	83 e0       	ldi	r24, 0x03	; 3
    83f4:	01 c0       	rjmp	.+2      	; 0x83f8 <dtoa_prf+0xfc>
    83f6:	84 e0       	ldi	r24, 0x04	; 4
    83f8:	81 17       	cp	r24, r17
    83fa:	18 f4       	brcc	.+6      	; 0x8402 <dtoa_prf+0x106>
    83fc:	21 2f       	mov	r18, r17
    83fe:	28 1b       	sub	r18, r24
    8400:	01 c0       	rjmp	.+2      	; 0x8404 <dtoa_prf+0x108>
    8402:	20 e0       	ldi	r18, 0x00	; 0
    8404:	51 11       	cpse	r21, r1
    8406:	0b c0       	rjmp	.+22     	; 0x841e <dtoa_prf+0x122>
    8408:	f6 01       	movw	r30, r12
    840a:	82 2f       	mov	r24, r18
    840c:	30 e2       	ldi	r19, 0x20	; 32
    840e:	88 23       	and	r24, r24
    8410:	19 f0       	breq	.+6      	; 0x8418 <dtoa_prf+0x11c>
    8412:	31 93       	st	Z+, r19
    8414:	81 50       	subi	r24, 0x01	; 1
    8416:	fb cf       	rjmp	.-10     	; 0x840e <dtoa_prf+0x112>
    8418:	c2 0e       	add	r12, r18
    841a:	d1 1c       	adc	r13, r1
    841c:	20 e0       	ldi	r18, 0x00	; 0
    841e:	99 23       	and	r25, r25
    8420:	29 f0       	breq	.+10     	; 0x842c <dtoa_prf+0x130>
    8422:	d6 01       	movw	r26, r12
    8424:	9c 93       	st	X, r25
    8426:	f6 01       	movw	r30, r12
    8428:	31 96       	adiw	r30, 0x01	; 1
    842a:	6f 01       	movw	r12, r30
    842c:	c6 01       	movw	r24, r12
    842e:	03 96       	adiw	r24, 0x03	; 3
    8430:	e2 fe       	sbrs	r14, 2
    8432:	0b c0       	rjmp	.+22     	; 0x844a <dtoa_prf+0x14e>
    8434:	39 e4       	ldi	r19, 0x49	; 73
    8436:	d6 01       	movw	r26, r12
    8438:	3c 93       	st	X, r19
    843a:	3e e4       	ldi	r19, 0x4E	; 78
    843c:	11 96       	adiw	r26, 0x01	; 1
    843e:	3c 93       	st	X, r19
    8440:	11 97       	sbiw	r26, 0x01	; 1
    8442:	36 e4       	ldi	r19, 0x46	; 70
    8444:	12 96       	adiw	r26, 0x02	; 2
    8446:	3c 93       	st	X, r19
    8448:	07 c0       	rjmp	.+14     	; 0x8458 <dtoa_prf+0x15c>
    844a:	39 e6       	ldi	r19, 0x69	; 105
    844c:	f6 01       	movw	r30, r12
    844e:	30 83       	st	Z, r19
    8450:	3e e6       	ldi	r19, 0x6E	; 110
    8452:	31 83       	std	Z+1, r19	; 0x01
    8454:	36 e6       	ldi	r19, 0x66	; 102
    8456:	32 83       	std	Z+2, r19	; 0x02
    8458:	fc 01       	movw	r30, r24
    845a:	32 2f       	mov	r19, r18
    845c:	40 e2       	ldi	r20, 0x20	; 32
    845e:	33 23       	and	r19, r19
    8460:	19 f0       	breq	.+6      	; 0x8468 <dtoa_prf+0x16c>
    8462:	41 93       	st	Z+, r20
    8464:	31 50       	subi	r19, 0x01	; 1
    8466:	fb cf       	rjmp	.-10     	; 0x845e <dtoa_prf+0x162>
    8468:	fc 01       	movw	r30, r24
    846a:	e2 0f       	add	r30, r18
    846c:	f1 1d       	adc	r31, r1
    846e:	10 82       	st	Z, r1
    8470:	8e ef       	ldi	r24, 0xFE	; 254
    8472:	9f ef       	ldi	r25, 0xFF	; 255
    8474:	a6 c0       	rjmp	.+332    	; 0x85c2 <dtoa_prf+0x2c6>
    8476:	21 e0       	ldi	r18, 0x01	; 1
    8478:	30 e0       	ldi	r19, 0x00	; 0
    847a:	91 11       	cpse	r25, r1
    847c:	02 c0       	rjmp	.+4      	; 0x8482 <dtoa_prf+0x186>
    847e:	20 e0       	ldi	r18, 0x00	; 0
    8480:	30 e0       	ldi	r19, 0x00	; 0
    8482:	16 16       	cp	r1, r22
    8484:	17 06       	cpc	r1, r23
    8486:	1c f4       	brge	.+6      	; 0x848e <dtoa_prf+0x192>
    8488:	fb 01       	movw	r30, r22
    848a:	31 96       	adiw	r30, 0x01	; 1
    848c:	02 c0       	rjmp	.+4      	; 0x8492 <dtoa_prf+0x196>
    848e:	e1 e0       	ldi	r30, 0x01	; 1
    8490:	f0 e0       	ldi	r31, 0x00	; 0
    8492:	2e 0f       	add	r18, r30
    8494:	3f 1f       	adc	r19, r31
    8496:	bb 20       	and	r11, r11
    8498:	21 f0       	breq	.+8      	; 0x84a2 <dtoa_prf+0x1a6>
    849a:	eb 2d       	mov	r30, r11
    849c:	f0 e0       	ldi	r31, 0x00	; 0
    849e:	31 96       	adiw	r30, 0x01	; 1
    84a0:	02 c0       	rjmp	.+4      	; 0x84a6 <dtoa_prf+0x1aa>
    84a2:	e0 e0       	ldi	r30, 0x00	; 0
    84a4:	f0 e0       	ldi	r31, 0x00	; 0
    84a6:	2e 0f       	add	r18, r30
    84a8:	3f 1f       	adc	r19, r31
    84aa:	e1 2f       	mov	r30, r17
    84ac:	f0 e0       	ldi	r31, 0x00	; 0
    84ae:	2e 17       	cp	r18, r30
    84b0:	3f 07       	cpc	r19, r31
    84b2:	1c f4       	brge	.+6      	; 0x84ba <dtoa_prf+0x1be>
    84b4:	12 1b       	sub	r17, r18
    84b6:	21 2f       	mov	r18, r17
    84b8:	01 c0       	rjmp	.+2      	; 0x84bc <dtoa_prf+0x1c0>
    84ba:	20 e0       	ldi	r18, 0x00	; 0
    84bc:	8e 2d       	mov	r24, r14
    84be:	88 71       	andi	r24, 0x18	; 24
    84c0:	59 f4       	brne	.+22     	; 0x84d8 <dtoa_prf+0x1dc>
    84c2:	f6 01       	movw	r30, r12
    84c4:	82 2f       	mov	r24, r18
    84c6:	30 e2       	ldi	r19, 0x20	; 32
    84c8:	88 23       	and	r24, r24
    84ca:	19 f0       	breq	.+6      	; 0x84d2 <dtoa_prf+0x1d6>
    84cc:	31 93       	st	Z+, r19
    84ce:	81 50       	subi	r24, 0x01	; 1
    84d0:	fb cf       	rjmp	.-10     	; 0x84c8 <dtoa_prf+0x1cc>
    84d2:	c2 0e       	add	r12, r18
    84d4:	d1 1c       	adc	r13, r1
    84d6:	20 e0       	ldi	r18, 0x00	; 0
    84d8:	99 23       	and	r25, r25
    84da:	29 f0       	breq	.+10     	; 0x84e6 <dtoa_prf+0x1ea>
    84dc:	d6 01       	movw	r26, r12
    84de:	9c 93       	st	X, r25
    84e0:	f6 01       	movw	r30, r12
    84e2:	31 96       	adiw	r30, 0x01	; 1
    84e4:	6f 01       	movw	r12, r30
    84e6:	51 11       	cpse	r21, r1
    84e8:	0b c0       	rjmp	.+22     	; 0x8500 <dtoa_prf+0x204>
    84ea:	f6 01       	movw	r30, r12
    84ec:	82 2f       	mov	r24, r18
    84ee:	90 e3       	ldi	r25, 0x30	; 48
    84f0:	88 23       	and	r24, r24
    84f2:	19 f0       	breq	.+6      	; 0x84fa <dtoa_prf+0x1fe>
    84f4:	91 93       	st	Z+, r25
    84f6:	81 50       	subi	r24, 0x01	; 1
    84f8:	fb cf       	rjmp	.-10     	; 0x84f0 <dtoa_prf+0x1f4>
    84fa:	c2 0e       	add	r12, r18
    84fc:	d1 1c       	adc	r13, r1
    84fe:	20 e0       	ldi	r18, 0x00	; 0
    8500:	0f 2d       	mov	r16, r15
    8502:	06 0f       	add	r16, r22
    8504:	9a 81       	ldd	r25, Y+2	; 0x02
    8506:	34 2f       	mov	r19, r20
    8508:	30 71       	andi	r19, 0x10	; 16
    850a:	44 ff       	sbrs	r20, 4
    850c:	03 c0       	rjmp	.+6      	; 0x8514 <dtoa_prf+0x218>
    850e:	91 33       	cpi	r25, 0x31	; 49
    8510:	09 f4       	brne	.+2      	; 0x8514 <dtoa_prf+0x218>
    8512:	01 50       	subi	r16, 0x01	; 1
    8514:	10 16       	cp	r1, r16
    8516:	24 f4       	brge	.+8      	; 0x8520 <dtoa_prf+0x224>
    8518:	09 30       	cpi	r16, 0x09	; 9
    851a:	18 f0       	brcs	.+6      	; 0x8522 <dtoa_prf+0x226>
    851c:	08 e0       	ldi	r16, 0x08	; 8
    851e:	01 c0       	rjmp	.+2      	; 0x8522 <dtoa_prf+0x226>
    8520:	01 e0       	ldi	r16, 0x01	; 1
    8522:	ab 01       	movw	r20, r22
    8524:	77 ff       	sbrs	r23, 7
    8526:	02 c0       	rjmp	.+4      	; 0x852c <dtoa_prf+0x230>
    8528:	40 e0       	ldi	r20, 0x00	; 0
    852a:	50 e0       	ldi	r21, 0x00	; 0
    852c:	fb 01       	movw	r30, r22
    852e:	e4 1b       	sub	r30, r20
    8530:	f5 0b       	sbc	r31, r21
    8532:	a1 e0       	ldi	r26, 0x01	; 1
    8534:	b0 e0       	ldi	r27, 0x00	; 0
    8536:	ac 0f       	add	r26, r28
    8538:	bd 1f       	adc	r27, r29
    853a:	ea 0f       	add	r30, r26
    853c:	fb 1f       	adc	r31, r27
    853e:	8e e2       	ldi	r24, 0x2E	; 46
    8540:	a8 2e       	mov	r10, r24
    8542:	4b 01       	movw	r8, r22
    8544:	80 1a       	sub	r8, r16
    8546:	91 08       	sbc	r9, r1
    8548:	0b 2d       	mov	r16, r11
    854a:	10 e0       	ldi	r17, 0x00	; 0
    854c:	11 95       	neg	r17
    854e:	01 95       	neg	r16
    8550:	11 09       	sbc	r17, r1
    8552:	4f 3f       	cpi	r20, 0xFF	; 255
    8554:	bf ef       	ldi	r27, 0xFF	; 255
    8556:	5b 07       	cpc	r21, r27
    8558:	21 f4       	brne	.+8      	; 0x8562 <dtoa_prf+0x266>
    855a:	d6 01       	movw	r26, r12
    855c:	ac 92       	st	X, r10
    855e:	11 96       	adiw	r26, 0x01	; 1
    8560:	6d 01       	movw	r12, r26
    8562:	64 17       	cp	r22, r20
    8564:	75 07       	cpc	r23, r21
    8566:	2c f0       	brlt	.+10     	; 0x8572 <dtoa_prf+0x276>
    8568:	84 16       	cp	r8, r20
    856a:	95 06       	cpc	r9, r21
    856c:	14 f4       	brge	.+4      	; 0x8572 <dtoa_prf+0x276>
    856e:	81 81       	ldd	r24, Z+1	; 0x01
    8570:	01 c0       	rjmp	.+2      	; 0x8574 <dtoa_prf+0x278>
    8572:	80 e3       	ldi	r24, 0x30	; 48
    8574:	41 50       	subi	r20, 0x01	; 1
    8576:	51 09       	sbc	r21, r1
    8578:	31 96       	adiw	r30, 0x01	; 1
    857a:	d6 01       	movw	r26, r12
    857c:	11 96       	adiw	r26, 0x01	; 1
    857e:	7d 01       	movw	r14, r26
    8580:	40 17       	cp	r20, r16
    8582:	51 07       	cpc	r21, r17
    8584:	24 f0       	brlt	.+8      	; 0x858e <dtoa_prf+0x292>
    8586:	d6 01       	movw	r26, r12
    8588:	8c 93       	st	X, r24
    858a:	67 01       	movw	r12, r14
    858c:	e2 cf       	rjmp	.-60     	; 0x8552 <dtoa_prf+0x256>
    858e:	64 17       	cp	r22, r20
    8590:	75 07       	cpc	r23, r21
    8592:	39 f4       	brne	.+14     	; 0x85a2 <dtoa_prf+0x2a6>
    8594:	96 33       	cpi	r25, 0x36	; 54
    8596:	20 f4       	brcc	.+8      	; 0x85a0 <dtoa_prf+0x2a4>
    8598:	95 33       	cpi	r25, 0x35	; 53
    859a:	19 f4       	brne	.+6      	; 0x85a2 <dtoa_prf+0x2a6>
    859c:	31 11       	cpse	r19, r1
    859e:	01 c0       	rjmp	.+2      	; 0x85a2 <dtoa_prf+0x2a6>
    85a0:	81 e3       	ldi	r24, 0x31	; 49
    85a2:	f6 01       	movw	r30, r12
    85a4:	80 83       	st	Z, r24
    85a6:	f7 01       	movw	r30, r14
    85a8:	82 2f       	mov	r24, r18
    85aa:	90 e2       	ldi	r25, 0x20	; 32
    85ac:	88 23       	and	r24, r24
    85ae:	19 f0       	breq	.+6      	; 0x85b6 <dtoa_prf+0x2ba>
    85b0:	91 93       	st	Z+, r25
    85b2:	81 50       	subi	r24, 0x01	; 1
    85b4:	fb cf       	rjmp	.-10     	; 0x85ac <dtoa_prf+0x2b0>
    85b6:	f7 01       	movw	r30, r14
    85b8:	e2 0f       	add	r30, r18
    85ba:	f1 1d       	adc	r31, r1
    85bc:	10 82       	st	Z, r1
    85be:	80 e0       	ldi	r24, 0x00	; 0
    85c0:	90 e0       	ldi	r25, 0x00	; 0
    85c2:	29 96       	adiw	r28, 0x09	; 9
    85c4:	0f b6       	in	r0, 0x3f	; 63
    85c6:	f8 94       	cli
    85c8:	de bf       	out	0x3e, r29	; 62
    85ca:	0f be       	out	0x3f, r0	; 63
    85cc:	cd bf       	out	0x3d, r28	; 61
    85ce:	df 91       	pop	r29
    85d0:	cf 91       	pop	r28
    85d2:	1f 91       	pop	r17
    85d4:	0f 91       	pop	r16
    85d6:	ff 90       	pop	r15
    85d8:	ef 90       	pop	r14
    85da:	df 90       	pop	r13
    85dc:	cf 90       	pop	r12
    85de:	bf 90       	pop	r11
    85e0:	af 90       	pop	r10
    85e2:	9f 90       	pop	r9
    85e4:	8f 90       	pop	r8
    85e6:	08 95       	ret

000085e8 <__ftoa_engine>:
    85e8:	28 30       	cpi	r18, 0x08	; 8
    85ea:	08 f0       	brcs	.+2      	; 0x85ee <__ftoa_engine+0x6>
    85ec:	27 e0       	ldi	r18, 0x07	; 7
    85ee:	33 27       	eor	r19, r19
    85f0:	da 01       	movw	r26, r20
    85f2:	99 0f       	add	r25, r25
    85f4:	31 1d       	adc	r19, r1
    85f6:	87 fd       	sbrc	r24, 7
    85f8:	91 60       	ori	r25, 0x01	; 1
    85fa:	00 96       	adiw	r24, 0x00	; 0
    85fc:	61 05       	cpc	r22, r1
    85fe:	71 05       	cpc	r23, r1
    8600:	39 f4       	brne	.+14     	; 0x8610 <__ftoa_engine+0x28>
    8602:	32 60       	ori	r19, 0x02	; 2
    8604:	2e 5f       	subi	r18, 0xFE	; 254
    8606:	3d 93       	st	X+, r19
    8608:	30 e3       	ldi	r19, 0x30	; 48
    860a:	2a 95       	dec	r18
    860c:	e1 f7       	brne	.-8      	; 0x8606 <__ftoa_engine+0x1e>
    860e:	08 95       	ret
    8610:	9f 3f       	cpi	r25, 0xFF	; 255
    8612:	30 f0       	brcs	.+12     	; 0x8620 <__ftoa_engine+0x38>
    8614:	80 38       	cpi	r24, 0x80	; 128
    8616:	71 05       	cpc	r23, r1
    8618:	61 05       	cpc	r22, r1
    861a:	09 f0       	breq	.+2      	; 0x861e <__ftoa_engine+0x36>
    861c:	3c 5f       	subi	r19, 0xFC	; 252
    861e:	3c 5f       	subi	r19, 0xFC	; 252
    8620:	3d 93       	st	X+, r19
    8622:	91 30       	cpi	r25, 0x01	; 1
    8624:	08 f0       	brcs	.+2      	; 0x8628 <__ftoa_engine+0x40>
    8626:	80 68       	ori	r24, 0x80	; 128
    8628:	91 1d       	adc	r25, r1
    862a:	df 93       	push	r29
    862c:	cf 93       	push	r28
    862e:	1f 93       	push	r17
    8630:	0f 93       	push	r16
    8632:	ff 92       	push	r15
    8634:	ef 92       	push	r14
    8636:	19 2f       	mov	r17, r25
    8638:	98 7f       	andi	r25, 0xF8	; 248
    863a:	96 95       	lsr	r25
    863c:	e9 2f       	mov	r30, r25
    863e:	96 95       	lsr	r25
    8640:	96 95       	lsr	r25
    8642:	e9 0f       	add	r30, r25
    8644:	ff 27       	eor	r31, r31
    8646:	ec 56       	subi	r30, 0x6C	; 108
    8648:	fe 4f       	sbci	r31, 0xFE	; 254
    864a:	99 27       	eor	r25, r25
    864c:	33 27       	eor	r19, r19
    864e:	ee 24       	eor	r14, r14
    8650:	ff 24       	eor	r15, r15
    8652:	a7 01       	movw	r20, r14
    8654:	e7 01       	movw	r28, r14
    8656:	05 90       	lpm	r0, Z+
    8658:	08 94       	sec
    865a:	07 94       	ror	r0
    865c:	28 f4       	brcc	.+10     	; 0x8668 <__ftoa_engine+0x80>
    865e:	36 0f       	add	r19, r22
    8660:	e7 1e       	adc	r14, r23
    8662:	f8 1e       	adc	r15, r24
    8664:	49 1f       	adc	r20, r25
    8666:	51 1d       	adc	r21, r1
    8668:	66 0f       	add	r22, r22
    866a:	77 1f       	adc	r23, r23
    866c:	88 1f       	adc	r24, r24
    866e:	99 1f       	adc	r25, r25
    8670:	06 94       	lsr	r0
    8672:	a1 f7       	brne	.-24     	; 0x865c <__ftoa_engine+0x74>
    8674:	05 90       	lpm	r0, Z+
    8676:	07 94       	ror	r0
    8678:	28 f4       	brcc	.+10     	; 0x8684 <__ftoa_engine+0x9c>
    867a:	e7 0e       	add	r14, r23
    867c:	f8 1e       	adc	r15, r24
    867e:	49 1f       	adc	r20, r25
    8680:	56 1f       	adc	r21, r22
    8682:	c1 1d       	adc	r28, r1
    8684:	77 0f       	add	r23, r23
    8686:	88 1f       	adc	r24, r24
    8688:	99 1f       	adc	r25, r25
    868a:	66 1f       	adc	r22, r22
    868c:	06 94       	lsr	r0
    868e:	a1 f7       	brne	.-24     	; 0x8678 <__ftoa_engine+0x90>
    8690:	05 90       	lpm	r0, Z+
    8692:	07 94       	ror	r0
    8694:	28 f4       	brcc	.+10     	; 0x86a0 <__ftoa_engine+0xb8>
    8696:	f8 0e       	add	r15, r24
    8698:	49 1f       	adc	r20, r25
    869a:	56 1f       	adc	r21, r22
    869c:	c7 1f       	adc	r28, r23
    869e:	d1 1d       	adc	r29, r1
    86a0:	88 0f       	add	r24, r24
    86a2:	99 1f       	adc	r25, r25
    86a4:	66 1f       	adc	r22, r22
    86a6:	77 1f       	adc	r23, r23
    86a8:	06 94       	lsr	r0
    86aa:	a1 f7       	brne	.-24     	; 0x8694 <__ftoa_engine+0xac>
    86ac:	05 90       	lpm	r0, Z+
    86ae:	07 94       	ror	r0
    86b0:	20 f4       	brcc	.+8      	; 0x86ba <__ftoa_engine+0xd2>
    86b2:	49 0f       	add	r20, r25
    86b4:	56 1f       	adc	r21, r22
    86b6:	c7 1f       	adc	r28, r23
    86b8:	d8 1f       	adc	r29, r24
    86ba:	99 0f       	add	r25, r25
    86bc:	66 1f       	adc	r22, r22
    86be:	77 1f       	adc	r23, r23
    86c0:	88 1f       	adc	r24, r24
    86c2:	06 94       	lsr	r0
    86c4:	a9 f7       	brne	.-22     	; 0x86b0 <__ftoa_engine+0xc8>
    86c6:	84 91       	lpm	r24, Z
    86c8:	10 95       	com	r17
    86ca:	17 70       	andi	r17, 0x07	; 7
    86cc:	41 f0       	breq	.+16     	; 0x86de <__ftoa_engine+0xf6>
    86ce:	d6 95       	lsr	r29
    86d0:	c7 95       	ror	r28
    86d2:	57 95       	ror	r21
    86d4:	47 95       	ror	r20
    86d6:	f7 94       	ror	r15
    86d8:	e7 94       	ror	r14
    86da:	1a 95       	dec	r17
    86dc:	c1 f7       	brne	.-16     	; 0x86ce <__ftoa_engine+0xe6>
    86de:	ea e3       	ldi	r30, 0x3A	; 58
    86e0:	f1 e0       	ldi	r31, 0x01	; 1
    86e2:	68 94       	set
    86e4:	15 90       	lpm	r1, Z+
    86e6:	15 91       	lpm	r17, Z+
    86e8:	35 91       	lpm	r19, Z+
    86ea:	65 91       	lpm	r22, Z+
    86ec:	95 91       	lpm	r25, Z+
    86ee:	05 90       	lpm	r0, Z+
    86f0:	7f e2       	ldi	r23, 0x2F	; 47
    86f2:	73 95       	inc	r23
    86f4:	e1 18       	sub	r14, r1
    86f6:	f1 0a       	sbc	r15, r17
    86f8:	43 0b       	sbc	r20, r19
    86fa:	56 0b       	sbc	r21, r22
    86fc:	c9 0b       	sbc	r28, r25
    86fe:	d0 09       	sbc	r29, r0
    8700:	c0 f7       	brcc	.-16     	; 0x86f2 <__ftoa_engine+0x10a>
    8702:	e1 0c       	add	r14, r1
    8704:	f1 1e       	adc	r15, r17
    8706:	43 1f       	adc	r20, r19
    8708:	56 1f       	adc	r21, r22
    870a:	c9 1f       	adc	r28, r25
    870c:	d0 1d       	adc	r29, r0
    870e:	7e f4       	brtc	.+30     	; 0x872e <__ftoa_engine+0x146>
    8710:	70 33       	cpi	r23, 0x30	; 48
    8712:	11 f4       	brne	.+4      	; 0x8718 <__ftoa_engine+0x130>
    8714:	8a 95       	dec	r24
    8716:	e6 cf       	rjmp	.-52     	; 0x86e4 <__ftoa_engine+0xfc>
    8718:	e8 94       	clt
    871a:	01 50       	subi	r16, 0x01	; 1
    871c:	30 f0       	brcs	.+12     	; 0x872a <__ftoa_engine+0x142>
    871e:	08 0f       	add	r16, r24
    8720:	0a f4       	brpl	.+2      	; 0x8724 <__ftoa_engine+0x13c>
    8722:	00 27       	eor	r16, r16
    8724:	02 17       	cp	r16, r18
    8726:	08 f4       	brcc	.+2      	; 0x872a <__ftoa_engine+0x142>
    8728:	20 2f       	mov	r18, r16
    872a:	23 95       	inc	r18
    872c:	02 2f       	mov	r16, r18
    872e:	7a 33       	cpi	r23, 0x3A	; 58
    8730:	28 f0       	brcs	.+10     	; 0x873c <__ftoa_engine+0x154>
    8732:	79 e3       	ldi	r23, 0x39	; 57
    8734:	7d 93       	st	X+, r23
    8736:	2a 95       	dec	r18
    8738:	e9 f7       	brne	.-6      	; 0x8734 <__ftoa_engine+0x14c>
    873a:	10 c0       	rjmp	.+32     	; 0x875c <__ftoa_engine+0x174>
    873c:	7d 93       	st	X+, r23
    873e:	2a 95       	dec	r18
    8740:	89 f6       	brne	.-94     	; 0x86e4 <__ftoa_engine+0xfc>
    8742:	06 94       	lsr	r0
    8744:	97 95       	ror	r25
    8746:	67 95       	ror	r22
    8748:	37 95       	ror	r19
    874a:	17 95       	ror	r17
    874c:	17 94       	ror	r1
    874e:	e1 18       	sub	r14, r1
    8750:	f1 0a       	sbc	r15, r17
    8752:	43 0b       	sbc	r20, r19
    8754:	56 0b       	sbc	r21, r22
    8756:	c9 0b       	sbc	r28, r25
    8758:	d0 09       	sbc	r29, r0
    875a:	98 f0       	brcs	.+38     	; 0x8782 <__ftoa_engine+0x19a>
    875c:	23 95       	inc	r18
    875e:	7e 91       	ld	r23, -X
    8760:	73 95       	inc	r23
    8762:	7a 33       	cpi	r23, 0x3A	; 58
    8764:	08 f0       	brcs	.+2      	; 0x8768 <__ftoa_engine+0x180>
    8766:	70 e3       	ldi	r23, 0x30	; 48
    8768:	7c 93       	st	X, r23
    876a:	20 13       	cpse	r18, r16
    876c:	b8 f7       	brcc	.-18     	; 0x875c <__ftoa_engine+0x174>
    876e:	7e 91       	ld	r23, -X
    8770:	70 61       	ori	r23, 0x10	; 16
    8772:	7d 93       	st	X+, r23
    8774:	30 f0       	brcs	.+12     	; 0x8782 <__ftoa_engine+0x19a>
    8776:	83 95       	inc	r24
    8778:	71 e3       	ldi	r23, 0x31	; 49
    877a:	7d 93       	st	X+, r23
    877c:	70 e3       	ldi	r23, 0x30	; 48
    877e:	2a 95       	dec	r18
    8780:	e1 f7       	brne	.-8      	; 0x877a <__ftoa_engine+0x192>
    8782:	11 24       	eor	r1, r1
    8784:	ef 90       	pop	r14
    8786:	ff 90       	pop	r15
    8788:	0f 91       	pop	r16
    878a:	1f 91       	pop	r17
    878c:	cf 91       	pop	r28
    878e:	df 91       	pop	r29
    8790:	99 27       	eor	r25, r25
    8792:	87 fd       	sbrc	r24, 7
    8794:	90 95       	com	r25
    8796:	08 95       	ret

00008798 <strrev>:
    8798:	dc 01       	movw	r26, r24
    879a:	fc 01       	movw	r30, r24
    879c:	67 2f       	mov	r22, r23
    879e:	71 91       	ld	r23, Z+
    87a0:	77 23       	and	r23, r23
    87a2:	e1 f7       	brne	.-8      	; 0x879c <strrev+0x4>
    87a4:	32 97       	sbiw	r30, 0x02	; 2
    87a6:	04 c0       	rjmp	.+8      	; 0x87b0 <strrev+0x18>
    87a8:	7c 91       	ld	r23, X
    87aa:	6d 93       	st	X+, r22
    87ac:	70 83       	st	Z, r23
    87ae:	62 91       	ld	r22, -Z
    87b0:	ae 17       	cp	r26, r30
    87b2:	bf 07       	cpc	r27, r31
    87b4:	c8 f3       	brcs	.-14     	; 0x87a8 <strrev+0x10>
    87b6:	08 95       	ret

000087b8 <__do_global_dtors>:
    87b8:	16 e0       	ldi	r17, 0x06	; 6
    87ba:	c3 e9       	ldi	r28, 0x93	; 147
    87bc:	d6 e0       	ldi	r29, 0x06	; 6
    87be:	00 e0       	ldi	r16, 0x00	; 0
    87c0:	05 c0       	rjmp	.+10     	; 0x87cc <__do_global_dtors+0x14>
    87c2:	80 2f       	mov	r24, r16
    87c4:	fe 01       	movw	r30, r28
    87c6:	c0 da       	rcall	.-2688   	; 0x7d48 <__tablejump2__>
    87c8:	21 96       	adiw	r28, 0x01	; 1
    87ca:	01 1d       	adc	r16, r1
    87cc:	c6 39       	cpi	r28, 0x96	; 150
    87ce:	d1 07       	cpc	r29, r17
    87d0:	80 e0       	ldi	r24, 0x00	; 0
    87d2:	08 07       	cpc	r16, r24
    87d4:	b1 f7       	brne	.-20     	; 0x87c2 <__do_global_dtors+0xa>
    87d6:	f8 94       	cli

000087d8 <__stop_program>:
    87d8:	ff cf       	rjmp	.-2      	; 0x87d8 <__stop_program>
